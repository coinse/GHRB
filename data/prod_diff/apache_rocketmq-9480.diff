diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java
index c19592a44c..1efb508664 100644
--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java
+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java
@@ -18,6 +18,7 @@ package org.apache.rocketmq.common.topic;
 
 import java.util.HashSet;
 import java.util.Set;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 
 public class TopicValidator {
@@ -38,6 +39,7 @@ public class TopicValidator {
 
     public static final boolean[] VALID_CHAR_BIT_MAP = new boolean[128];
     private static final int TOPIC_MAX_LENGTH = 127;
+    private static final int RETRY_OR_DLQ_TOPIC_MAX_LENGTH = 255;
 
     private static final Set<String> SYSTEM_TOPIC_SET = new HashSet<>();
 
@@ -111,8 +113,14 @@ public class TopicValidator {
             return new ValidateTopicResult(false, "The specified topic contains illegal characters, allowing only ^[%|a-zA-Z0-9_-]+$");
         }
 
-        if (topic.length() > TOPIC_MAX_LENGTH) {
-            return new ValidateTopicResult(false, "The specified topic is longer than topic max length.");
+        if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX)) {
+            if (topic.length() > RETRY_OR_DLQ_TOPIC_MAX_LENGTH) {
+                return new ValidateTopicResult(false, "The specified topic is longer than topic max length.");
+            }
+        } else {
+            if (topic.length() > TOPIC_MAX_LENGTH) {
+                return new ValidateTopicResult(false, "The specified topic is longer than topic max length.");
+            }
         }
 
         return new ValidateTopicResult(true, "");
