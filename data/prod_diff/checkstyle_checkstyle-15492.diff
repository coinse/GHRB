diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 7efcc60fa8..bdc3503208 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -64,6 +64,9 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * {@code strictfp} modifier when using JDK 17 or later. See reason at
  * <a href="https://openjdk.org/jeps/306">JEP 306</a>
  * </li>
+ * <li>
+ * {@code final} modifier on unnamed variables when using JDK 22 or later.
+ * </li>
  * </ol>
  * <p>
  * interfaces by definition are abstract so the {@code abstract} modifier is redundant on them.
@@ -152,7 +155,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * Old JDK version numbering is supported (e.g. 1.8 for Java 8)
  * as well as just the major JDK version alone (e.g. 8) is supported.
  * Type is {@code java.lang.String}.
- * Default value is {@code "21"}.
+ * Default value is {@code "22"}.
  * </li>
  * <li>
  * Property {@code tokens} - tokens to check
@@ -178,7 +181,13 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF">
  * ANNOTATION_DEF</a>,
  * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_DEF">
- * RECORD_DEF</a>.
+ * RECORD_DEF</a>,
+ * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PATTERN_VARIABLE_DEF">
+ * PATTERN_VARIABLE_DEF</a>,
+ * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH">
+ * LITERAL_CATCH</a>,
+ * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAMBDA">
+ * LAMBDA</a>.
  * </li>
  * </ul>
  * <p>
@@ -214,9 +223,9 @@ public class RedundantModifierCheck
     };
 
     /**
-     *  Constant for jdk 21 version number.
+     *  Constant for jdk 22 version number.
      */
-    private static final int JDK_21 = 21;
+    private static final int JDK_22 = 22;
 
     /**
      *  Constant for jdk 17 version number.
@@ -230,7 +239,7 @@ public class RedundantModifierCheck
      * as well as just the major JDK version alone (e.g. 8) is supported.
      *
      */
-    private int jdkVersion = JDK_21;
+    private int jdkVersion = JDK_22;
 
     /**
      * Setter to set the JDK version that you are using.
@@ -275,6 +284,9 @@ public class RedundantModifierCheck
             TokenTypes.RESOURCE,
             TokenTypes.ANNOTATION_DEF,
             TokenTypes.RECORD_DEF,
+            TokenTypes.PATTERN_VARIABLE_DEF,
+            TokenTypes.LITERAL_CATCH,
+            TokenTypes.LAMBDA,
         };
     }
 
@@ -300,8 +312,17 @@ public class RedundantModifierCheck
             case TokenTypes.RECORD_DEF:
                 checkForRedundantModifier(ast, TokenTypes.FINAL, TokenTypes.LITERAL_STATIC);
                 break;
-            case TokenTypes.CLASS_DEF:
             case TokenTypes.VARIABLE_DEF:
+            case TokenTypes.PATTERN_VARIABLE_DEF:
+                checkUnnamedVariables(ast);
+                break;
+            case TokenTypes.LITERAL_CATCH:
+                checkUnnamedVariables(ast.findFirstToken(TokenTypes.PARAMETER_DEF));
+                break;
+            case TokenTypes.LAMBDA:
+                processLambdaParameters(ast);
+                break;
+            case TokenTypes.CLASS_DEF:
             case TokenTypes.ANNOTATION_FIELD_DEF:
                 break;
             default:
@@ -317,6 +338,44 @@ public class RedundantModifierCheck
         }
     }
 
+    /**
+     * Process lambda parameters.
+     *
+     * @param lambdaAst node of type {@link TokenTypes#LAMBDA}
+     */
+    private void processLambdaParameters(DetailAST lambdaAst) {
+        final DetailAST lambdaParameters = lambdaAst.findFirstToken(TokenTypes.PARAMETERS);
+        if (lambdaParameters != null) {
+            TokenUtil.forEachChild(lambdaParameters, TokenTypes.PARAMETER_DEF,
+                    this::checkUnnamedVariables);
+        }
+    }
+
+    /**
+     * Check if the variable is unnamed and has redundant final modifier.
+     *
+     * @param ast node of type {@link TokenTypes#VARIABLE_DEF}
+     *     or {@link TokenTypes#PATTERN_VARIABLE_DEF}
+     *     or {@link TokenTypes#PARAMETER_DEF}
+     */
+    private void checkUnnamedVariables(DetailAST ast) {
+        if (jdkVersion >= JDK_22 && isUnnamedVariable(ast)) {
+            checkForRedundantModifier(ast, TokenTypes.FINAL);
+        }
+    }
+
+    /**
+     * Check if the variable is unnamed.
+     *
+     * @param ast node of type {@link TokenTypes#VARIABLE_DEF}
+     *     or {@link TokenTypes#PATTERN_VARIABLE_DEF}
+     *     or {@link TokenTypes#PARAMETER_DEF}
+     * @return true if the variable is unnamed
+     */
+    private static boolean isUnnamedVariable(DetailAST ast) {
+        return "_".equals(ast.findFirstToken(TokenTypes.IDENT).getText());
+    }
+
     /**
      * Check modifiers of constructor.
      *
