diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 85c71f11b..4a091322f 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -48,7 +48,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * Final modifier on methods of final and anonymous classes.
  * </li>
  * <li>
- * Inner {@code interface} declarations that are declared as {@code static}.
+ * Type declarations nested under interfaces that are declared as {@code public} or {@code static}.
  * </li>
  * <li>
  * Class constructors.
@@ -58,13 +58,11 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * </li>
  * </ol>
  * <p>
- * Interfaces by definition are abstract so the {@code abstract}
- * modifier on the interface is redundant.
+ * interfaces by definition are abstract so the {@code abstract} modifier is redundant on them.
  * </p>
- * <p>Classes inside of interfaces by definition are public and static,
- * so the {@code public} and {@code static} modifiers
- * on the inner classes are redundant. On the other hand, classes
- * inside of interfaces can be abstract or non abstract.
+ * <p>Type declarations nested under interfaces by definition are public and static,
+ * so the {@code public} and {@code static} modifiers on nested type declarations are redundant.
+ * On the other hand, classes inside of interfaces can be abstract or non abstract.
  * So, {@code abstract} modifier is allowed.
  * </p>
  * <p>Fields in interfaces and annotations are automatically
@@ -155,7 +153,9 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF">
  * ENUM_DEF</a>,
  * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RESOURCE">
- * RESOURCE</a>.
+ * RESOURCE</a>,
+ * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF">
+ * ANNOTATION_DEF</a>.
  * </li>
  * </ul>
  * <p>
@@ -225,36 +225,53 @@ public class RedundantModifierCheck
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.RESOURCE,
+            TokenTypes.ANNOTATION_DEF,
         };
     }
 
     @Override
     public void visitToken(DetailAST ast) {
-        if (ast.getType() == TokenTypes.INTERFACE_DEF) {
-            checkInterfaceModifiers(ast);
-        }
-        else if (ast.getType() == TokenTypes.ENUM_DEF) {
-            checkEnumDef(ast);
-        }
-        else {
-            if (ast.getType() == TokenTypes.CTOR_DEF) {
-                if (isEnumMember(ast)) {
-                    checkEnumConstructorModifiers(ast);
-                }
-                else {
-                    checkClassConstructorModifiers(ast);
-                }
-            }
-            else if (ast.getType() == TokenTypes.METHOD_DEF) {
+        switch (ast.getType()) {
+            case TokenTypes.INTERFACE_DEF:
+            case TokenTypes.ANNOTATION_DEF:
+                checkInterfaceModifiers(ast);
+                break;
+            case TokenTypes.ENUM_DEF:
+                checkForRedundantModifier(ast, TokenTypes.LITERAL_STATIC);
+                break;
+            case TokenTypes.CTOR_DEF:
+                checkConstructorModifiers(ast);
+                break;
+            case TokenTypes.METHOD_DEF:
                 processMethods(ast);
-            }
-            else if (ast.getType() == TokenTypes.RESOURCE) {
+                break;
+            case TokenTypes.RESOURCE:
                 processResources(ast);
-            }
+                break;
+            case TokenTypes.CLASS_DEF:
+            case TokenTypes.VARIABLE_DEF:
+            case TokenTypes.ANNOTATION_FIELD_DEF:
+                break;
+            default:
+                throw new IllegalStateException("Unexpected token type: " + ast.getType());
+        }
 
-            if (isInterfaceOrAnnotationMember(ast)) {
-                processInterfaceOrAnnotation(ast);
-            }
+        if (isInterfaceOrAnnotationMember(ast)) {
+            processInterfaceOrAnnotation(ast);
+        }
+    }
+
+    /**
+     * Check modifiers of constructor.
+     *
+     * @param ctorDefAst ast node of type {@link TokenTypes#CTOR_DEF}
+     */
+    private void checkConstructorModifiers(DetailAST ctorDefAst) {
+        if (isEnumMember(ctorDefAst)) {
+            checkEnumConstructorModifiers(ctorDefAst);
+        }
+        else {
+            checkClassConstructorModifiers(ctorDefAst);
         }
     }
 
@@ -288,20 +305,6 @@ public class RedundantModifierCheck
         ).ifPresent(modifier -> log(modifier, MSG_KEY, modifier.getText()));
     }
 
-    /**
-     * Checks whether enum has proper modifiers.
-     *
-     * @param ast enum definition.
-     */
-    private void checkEnumDef(DetailAST ast) {
-        if (isInterfaceOrAnnotationMember(ast)) {
-            processInterfaceOrAnnotation(ast);
-        }
-        else {
-            checkForRedundantModifier(ast, TokenTypes.LITERAL_STATIC);
-        }
-    }
-
     /**
      * Do validation of interface of annotation.
      *
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/modifier/RedundantModifierCheck.xml b/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/modifier/RedundantModifierCheck.xml
index a5023e515..2a4dcc352 100644
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/modifier/RedundantModifierCheck.xml
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/modifier/RedundantModifierCheck.xml
@@ -21,7 +21,7 @@
  Final modifier on methods of final and anonymous classes.
  &lt;/li&gt;
  &lt;li&gt;
- Inner {@code interface} declarations that are declared as {@code static}.
+ Type declarations nested under interfaces that are declared as {@code public} or {@code static}.
  &lt;/li&gt;
  &lt;li&gt;
  Class constructors.
@@ -31,13 +31,11 @@
  &lt;/li&gt;
  &lt;/ol&gt;
  &lt;p&gt;
- Interfaces by definition are abstract so the {@code abstract}
- modifier on the interface is redundant.
+ interfaces by definition are abstract so the {@code abstract} modifier is redundant on them.
  &lt;/p&gt;
- &lt;p&gt;Classes inside of interfaces by definition are public and static,
- so the {@code public} and {@code static} modifiers
- on the inner classes are redundant. On the other hand, classes
- inside of interfaces can be abstract or non abstract.
+ &lt;p&gt;Type declarations nested under interfaces by definition are public and static,
+ so the {@code public} and {@code static} modifiers on nested type declarations are redundant.
+ On the other hand, classes inside of interfaces can be abstract or non abstract.
  So, {@code abstract} modifier is allowed.
  &lt;/p&gt;
  &lt;p&gt;Fields in interfaces and annotations are automatically
@@ -108,7 +106,7 @@
  }
  &lt;/pre&gt;</description>
          <properties>
-            <property default-value="METHOD_DEF,VARIABLE_DEF,ANNOTATION_FIELD_DEF,INTERFACE_DEF,CTOR_DEF,CLASS_DEF,ENUM_DEF,RESOURCE"
+            <property default-value="METHOD_DEF,VARIABLE_DEF,ANNOTATION_FIELD_DEF,INTERFACE_DEF,CTOR_DEF,CLASS_DEF,ENUM_DEF,RESOURCE,ANNOTATION_DEF"
                       name="tokens"
                       type="java.lang.String[]"
                       validation-type="tokenSet">
