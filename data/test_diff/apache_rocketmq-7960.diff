diff --git a/proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java b/proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java
index 98bf1104f..5894f8719 100644
--- a/proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java
+++ b/proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java
@@ -18,10 +18,16 @@
 package org.apache.rocketmq.proxy.service.metadata;
 
 import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Optional;
+import java.util.Set;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.attribute.TopicMessageType;
 import org.apache.rocketmq.proxy.common.ProxyContext;
 import org.apache.rocketmq.proxy.config.ConfigurationManager;
 import org.apache.rocketmq.proxy.service.BaseServiceTest;
+import org.apache.rocketmq.proxy.service.route.MessageQueueView;
+import org.apache.rocketmq.remoting.protocol.route.BrokerData;
 import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
 import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
 import org.junit.Before;
@@ -29,6 +35,7 @@ import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.ArgumentMatchers.eq;
@@ -38,6 +45,8 @@ public class ClusterMetadataServiceTest extends BaseServiceTest {
 
     private ClusterMetadataService clusterMetadataService;
 
+    protected static final String BROKER2_ADDR = "127.0.0.2:10911";
+
     @Before
     public void before() throws Throwable {
         super.before();
@@ -51,6 +60,16 @@ public class ClusterMetadataServiceTest extends BaseServiceTest {
         when(this.mqClientAPIExt.getSubscriptionGroupConfig(anyString(), eq(GROUP), anyLong())).thenReturn(new SubscriptionGroupConfig());
 
         this.clusterMetadataService = new ClusterMetadataService(this.topicRouteService, this.mqClientAPIFactory);
+
+        BrokerData brokerData2 = new BrokerData();
+        brokerData2.setBrokerName("brokerName2");
+        HashMap<Long, String> addrs = new HashMap<>();
+        addrs.put(MixAll.MASTER_ID, BROKER2_ADDR);
+        brokerData2.setBrokerAddrs(addrs);
+        brokerData2.setCluster(CLUSTER_NAME);
+        topicRouteData.getBrokerDatas().add(brokerData2);
+        when(this.topicRouteService.getAllMessageQueueView(any(), eq(TOPIC))).thenReturn(new MessageQueueView(CLUSTER_NAME, topicRouteData, null));
+
     }
 
     @Test
@@ -70,4 +89,22 @@ public class ClusterMetadataServiceTest extends BaseServiceTest {
         assertNotNull(this.clusterMetadataService.getSubscriptionGroupConfig(ctx, GROUP));
         assertEquals(1, this.clusterMetadataService.subscriptionGroupConfigCache.asMap().size());
     }
+
+    @Test
+    public void findOneBroker() {
+
+        Set<String> resultBrokerNames = new HashSet<>();
+        // run 1000 times to test the random
+        for (int i = 0; i < 1000; i++) {
+            Optional<BrokerData> brokerData = null;
+            try {
+                brokerData = this.clusterMetadataService.findOneBroker(TOPIC);
+                resultBrokerNames.add(brokerData.get().getBrokerName());
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }
+        // we should choose two brokers
+        assertEquals(2, resultBrokerNames.size());
+    }
 }
