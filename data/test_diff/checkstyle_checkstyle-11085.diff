diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheckTest.java
index 1b2ba59..d6ea3b1 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheckTest.java
@@ -59,6 +59,43 @@ public class StringLiteralEqualityCheckTest
     }
 
     @Test
+    public void testConcatenatedStringLiterals() throws Exception {
+        final String[] expected = {
+            "14:15: " + getCheckMessage(MSG_KEY, "=="),
+            "17:24: " + getCheckMessage(MSG_KEY, "=="),
+            "20:31: " + getCheckMessage(MSG_KEY, "!="),
+            "23:15: " + getCheckMessage(MSG_KEY, "=="),
+            "28:26: " + getCheckMessage(MSG_KEY, "=="),
+            "31:26: " + getCheckMessage(MSG_KEY, "!="),
+            "34:15: " + getCheckMessage(MSG_KEY, "!="),
+            "37:32: " + getCheckMessage(MSG_KEY, "=="),
+            "39:33: " + getCheckMessage(MSG_KEY, "!="),
+            "41:31: " + getCheckMessage(MSG_KEY, "!="),
+            "42:27: " + getCheckMessage(MSG_KEY, "=="),
+        };
+        verifyWithInlineConfigParser(
+                getPath("InputStringLiteralEqualityConcatenatedString.java"), expected);
+    }
+
+    @Test
+    public void testConcatenatedTextBlocks() throws Exception {
+        final String[] expected = {
+            "15:15: " + getCheckMessage(MSG_KEY, "=="),
+            "21:23: " + getCheckMessage(MSG_KEY, "=="),
+            "26:23: " + getCheckMessage(MSG_KEY, "!="),
+            "29:15: " + getCheckMessage(MSG_KEY, "=="),
+            "38:26: " + getCheckMessage(MSG_KEY, "=="),
+            "42:26: " + getCheckMessage(MSG_KEY, "!="),
+            "46:15: " + getCheckMessage(MSG_KEY, "!="),
+            "51:28: " + getCheckMessage(MSG_KEY, "!="),
+            "53:31: " + getCheckMessage(MSG_KEY, "=="),
+        };
+        verifyWithInlineConfigParser(
+                getNonCompilablePath("InputStringLiteralEqualityConcatenatedTextBlocks.java"),
+                expected);
+    }
+
+    @Test
     public void testTokensNotNull() {
         final StringLiteralEqualityCheck check = new StringLiteralEqualityCheck();
         assertWithMessage("Acceptable tokens should not be null")
diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/stringliteralequality/InputStringLiteralEqualityConcatenatedTextBlocks.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/stringliteralequality/InputStringLiteralEqualityConcatenatedTextBlocks.java
new file mode 100644
index 000000000..b2ef7b63a
--- /dev/null
+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/stringliteralequality/InputStringLiteralEqualityConcatenatedTextBlocks.java
@@ -0,0 +1,57 @@
+/*
+StringLiteralEquality
+
+
+*/
+
+//non-compiled with javac: Compilable with Java14
+package com.puppycrawl.tools.checkstyle.checks.coding.stringliteralequality;
+
+public class InputStringLiteralEqualityConcatenatedTextBlocks {
+
+    public void testMethod() {
+        String s = "abc";
+        String p = "asd";
+        if (s == """
+                a""" + "bc") { // violation above
+        }
+
+        if ("""
+                a""" + """
+                bc""" == s) { // violation
+        }
+
+        if ("a" + ("""
+                b""" + """
+                c""") != s) { // violation
+        }
+
+        if (s == """
+                a""" + """
+                b""" + """
+                c""") { // violation 3 lines above
+        }
+        if ((s += """
+                asd""") != p) { // ok, can't be detected as check in not type aware.
+        }
+
+        if ((s += "asd") == s + (p + """
+                asd""")) { // violation above
+        }
+
+        if ((s += "asd") != s + """
+                p""" + p) { // violation above
+        }
+
+        if (s != s + """
+                p""" + p) { // violation above
+        }
+
+        String c = ("""
+                ab""" + s) != null ? // violation
+                (p + """
+                        ab""" == null ? p : s) : p; // violation
+
+    }
+
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/stringliteralequality/InputStringLiteralEqualityConcatenatedString.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/stringliteralequality/InputStringLiteralEqualityConcatenatedString.java
new file mode 100644
index 000000000..4f076748d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/stringliteralequality/InputStringLiteralEqualityConcatenatedString.java
@@ -0,0 +1,46 @@
+/*
+StringLiteralEquality
+
+
+*/
+
+package com.puppycrawl.tools.checkstyle.checks.coding.stringliteralequality;
+
+public class InputStringLiteralEqualityConcatenatedString {
+
+    public void testMethod() {
+        String s = "abc";
+        String p = "asd";
+        if (s == "a" + "bc") { // violation
+        }
+
+        if ("a" + "bc" == s) { // violation
+        }
+
+        if ("a" + ("b" + "c") != s) { // violation
+        }
+
+        if (s == "a" + "b" + "c") { // violation
+        }
+        if ((s += "asd") != p) { // ok, can't be detected as check in not type aware.
+        }
+
+        if ((s += "asd") == s + (p + "asd")) { // violation
+        }
+
+        if ((s += "asd") != s + "p" + p) { // violation
+        }
+
+        if (s != s + "p" + p) { // violation
+        }
+
+        String a = (s + "asd") == null ? "asd" : s; // violation
+
+        String b = s + "ab" + p != null ? s : p; // violation
+
+        String c = ("ab" + s) != null ? // violation
+                (p + "ab" == null ? p : s) : p; // violation
+
+    }
+
+}
