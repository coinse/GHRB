diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
index 8f87eb5..6190c4b 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
@@ -21,10 +21,12 @@ package com.puppycrawl.tools.checkstyle.checks.modifier;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.MSG_KEY;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import org.junit.jupiter.api.Test;
 
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
+import com.puppycrawl.tools.checkstyle.DetailAstImpl;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 
@@ -126,6 +128,7 @@ public class RedundantModifierCheckTest
 
         final String[] expected = {
             "22:17: " + getCheckMessage(MSG_KEY, "public"),
+            "24:13: " + getCheckMessage(MSG_KEY, "public"),
             "26:21: " + getCheckMessage(MSG_KEY, "public"),
             "37:12: " + getCheckMessage(MSG_KEY, "public"),
             "45:17: " + getCheckMessage(MSG_KEY, "public"),
@@ -149,6 +152,7 @@ public class RedundantModifierCheckTest
             TokenTypes.CLASS_DEF,
             TokenTypes.ENUM_DEF,
             TokenTypes.RESOURCE,
+            TokenTypes.ANNOTATION_DEF,
         };
         assertWithMessage("Invalid acceptable tokens")
             .that(actual)
@@ -156,6 +160,21 @@ public class RedundantModifierCheckTest
     }
 
     @Test
+    public void testWrongTokenType() {
+        final RedundantModifierCheck obj = new RedundantModifierCheck();
+        final DetailAstImpl ast = new DetailAstImpl();
+        ast.initialize(TokenTypes.LITERAL_NULL, "null");
+
+        final IllegalStateException exception = assertThrows(IllegalStateException.class, () -> {
+            obj.visitToken(ast);
+        }, "IllegalStateException was expected");
+
+        assertWithMessage("Expected and actual violation messages do not match")
+                .that(exception.getMessage())
+                .isEqualTo("Unexpected token type: " + ast.getType());
+    }
+
+    @Test
     public void testGetRequiredTokens() {
         final RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
         final int[] actual = redundantModifierCheckObj.getRequiredTokens();
@@ -273,6 +292,22 @@ public class RedundantModifierCheckTest
             "13:5: " + getCheckMessage(MSG_KEY, "static"),
             "13:12: " + getCheckMessage(MSG_KEY, "public"),
             "16:9: " + getCheckMessage(MSG_KEY, "public"),
+            "19:5: " + getCheckMessage(MSG_KEY, "public"),
+            "19:12: " + getCheckMessage(MSG_KEY, "static"),
+            "22:5: " + getCheckMessage(MSG_KEY, "public"),
+            "22:12: " + getCheckMessage(MSG_KEY, "abstract"),
+            "22:21: " + getCheckMessage(MSG_KEY, "static"),
+            "26:1: " + getCheckMessage(MSG_KEY, "abstract"),
+            "28:5: " + getCheckMessage(MSG_KEY, "public"),
+            "28:12: " + getCheckMessage(MSG_KEY, "static"),
+            "32:9: " + getCheckMessage(MSG_KEY, "public"),
+            "32:16: " + getCheckMessage(MSG_KEY, "static"),
+            "34:13: " + getCheckMessage(MSG_KEY, "public"),
+            "34:20: " + getCheckMessage(MSG_KEY, "static"),
+            "37:13: " + getCheckMessage(MSG_KEY, "public"),
+            "37:20: " + getCheckMessage(MSG_KEY, "static"),
+            "40:13: " + getCheckMessage(MSG_KEY, "public"),
+            "40:20: " + getCheckMessage(MSG_KEY, "static"),
         };
         verifyWithInlineConfigParser(getPath(
                 "InputRedundantModifierNestedDef.java"), expected);
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java
index a2cb3c0c0..03a0cb906 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers.java
@@ -21,7 +21,7 @@ public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModi
             class ClassInPrivateNestedInterface {
                 public ClassInPrivateNestedInterface() { } // violation
             }
-            public interface PrivateNestedInterfaceWithPublicModifier {
+            public interface PrivateNestedInterfaceWithPublicModifier { // violation
                 class ClassInPrivateNestedInterface {
                     public ClassInPrivateNestedInterface() { } // violation
                 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedDef.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedDef.java
index 193e64510..130f86d2b 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedDef.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/modifier/redundantmodifier/InputRedundantModifierNestedDef.java
@@ -15,4 +15,30 @@ public interface InputRedundantModifierNestedDef {
     interface MyInnerInterface {
         public strictfp class MyInnerClass {} // violation
     }
+
+    public static class testClass { // 2 violations
+    }
+
+    public abstract static @interface testAnnotatedInterface { // 3 violations
+    }
+}
+
+abstract @interface testAnnotatedInterface { // violation
+
+    public static enum testEnum { // 2 violations
+    }
+
+    interface testInterface {
+        public static interface nestedInterface { // 2 violations
+
+            public static class nestedClass { // 2 violations
+            }
+
+            public static @interface nestedAnnInterface { // 2 violations
+            }
+
+            public static enum nestedEnum { // 2 violations
+            }
+        }
+    }
 }
