diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java
index 46d1681e..adee6c81 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java
@@ -16,6 +16,7 @@
 package nl.altindag.ssl.trustmanager;
 
 import nl.altindag.log.LogCaptor;
+import nl.altindag.log.model.LogEvent;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.internal.HostUtils;
 import org.junit.jupiter.api.Test;
@@ -36,6 +37,7 @@ import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatCode;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.mockStatic;
 import static org.mockito.Mockito.times;
@@ -73,10 +75,12 @@ class LoggingX509ExtendedTrustManagerShould {
         verify(innerTrustManager, times(1)).checkClientTrusted(trustedCerts, "RSA");
         verify(innerTrustManager, times(1)).getAcceptedIssuers();
 
-        assertThat(logCaptor.getDebugLogs()).hasSize(1);
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
         assertThat(logCaptor.getDebugLogs().get(0))
                 .contains("Validating the certificate chain of the client with authentication type RSA. See below for the full chain of the client")
                 .contains(Arrays.toString(trustedCerts));
+        assertThat(logCaptor.getDebugLogs().get(1))
+                .contains("Successfully validated the client with authentication type RSA.");
     }
 
     @Test
@@ -106,10 +110,12 @@ class LoggingX509ExtendedTrustManagerShould {
         verify(innerTrustManager, times(1)).checkClientTrusted(trustedCerts, "RSA", sslEngine);
         verify(innerTrustManager, times(1)).getAcceptedIssuers();
 
-        assertThat(logCaptor.getDebugLogs()).hasSize(1);
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
         assertThat(logCaptor.getDebugLogs().get(0))
                 .contains("Validating the certificate chain of the client[foo:443] with authentication type RSA, while also using the SSLEngine. See below for the full chain of the client")
                 .contains(Arrays.toString(trustedCerts));
+        assertThat(logCaptor.getDebugLogs().get(1))
+                .contains("Successfully validated the client[foo:443] with authentication type RSA, while also using the SSLEngine.");
     }
 
     @Test
@@ -139,10 +145,12 @@ class LoggingX509ExtendedTrustManagerShould {
         verify(innerTrustManager, times(1)).checkClientTrusted(trustedCerts, "RSA", socket);
         verify(innerTrustManager, times(1)).getAcceptedIssuers();
 
-        assertThat(logCaptor.getDebugLogs()).hasSize(1);
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
         assertThat(logCaptor.getDebugLogs().get(0))
                 .contains("Validating the certificate chain of the client[foo:443] with authentication type RSA, while also using the Socket. See below for the full chain of the client:")
                 .contains(Arrays.toString(trustedCerts));
+        assertThat(logCaptor.getDebugLogs().get(1))
+                .contains("Successfully validated the client[foo:443] with authentication type RSA, while also using the Socket.");
     }
 
     @Test
@@ -167,10 +175,12 @@ class LoggingX509ExtendedTrustManagerShould {
         verify(innerTrustManager, times(1)).checkServerTrusted(trustedCerts, "RSA");
         verify(innerTrustManager, times(1)).getAcceptedIssuers();
 
-        assertThat(logCaptor.getDebugLogs()).hasSize(1);
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
         assertThat(logCaptor.getDebugLogs().get(0))
                 .contains("Validating the certificate chain of the server with authentication type RSA. See below for the full chain of the server")
                 .contains(Arrays.toString(trustedCerts));
+        assertThat(logCaptor.getDebugLogs().get(1))
+                .contains("Successfully validated the server with authentication type RSA.");
     }
 
     @Test
@@ -200,10 +210,12 @@ class LoggingX509ExtendedTrustManagerShould {
         verify(innerTrustManager, times(1)).checkServerTrusted(trustedCerts, "RSA", sslEngine);
         verify(innerTrustManager, times(1)).getAcceptedIssuers();
 
-        assertThat(logCaptor.getDebugLogs()).hasSize(1);
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
         assertThat(logCaptor.getDebugLogs().get(0))
                 .contains("Validating the certificate chain of the server[foo:443] with authentication type RSA, while also using the SSLEngine. See below for the full chain of the server")
                 .contains(Arrays.toString(trustedCerts));
+        assertThat(logCaptor.getDebugLogs().get(1))
+                .contains("Successfully validated the server[foo:443] with authentication type RSA, while also using the SSLEngine.");
     }
 
     @Test
@@ -233,10 +245,12 @@ class LoggingX509ExtendedTrustManagerShould {
         verify(innerTrustManager, times(1)).checkServerTrusted(trustedCerts, "RSA", socket);
         verify(innerTrustManager, times(1)).getAcceptedIssuers();
 
-        assertThat(logCaptor.getDebugLogs()).hasSize(1);
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
         assertThat(logCaptor.getDebugLogs().get(0))
                 .contains("Validating the certificate chain of the server[foo:443] with authentication type RSA, while also using the Socket. See below for the full chain of the server:")
                 .contains(Arrays.toString(trustedCerts));
+        assertThat(logCaptor.getDebugLogs().get(1))
+                .contains("Successfully validated the server[foo:443] with authentication type RSA, while also using the Socket.");
     }
 
     @Test
@@ -300,4 +314,39 @@ class LoggingX509ExtendedTrustManagerShould {
         assertThat(hostAndPort).isNotPresent();
     }
 
+    @Test
+    void checkClientTrustedLogsException() throws KeyStoreException, CertificateException {
+        LogCaptor logCaptor = LogCaptor.forClass(LoggingX509ExtendedTrustManager.class);
+
+        KeyStore trustStore = KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);
+        X509Certificate[] trustedCerts = KeyStoreTestUtils.getTrustedX509Certificates(trustStore);
+
+        X509ExtendedTrustManager innerTrustManager = mock(X509ExtendedTrustManager.class);
+        doThrow(new CertificateException("Not Trusted!")).when(innerTrustManager).checkClientTrusted(any(), any());
+        when(innerTrustManager.getAcceptedIssuers()).thenReturn(new X509Certificate[]{});
+
+        X509ExtendedTrustManager trustManager = new LoggingX509ExtendedTrustManager(innerTrustManager);
+
+        assertThat(trustManager.getAcceptedIssuers()).isEmpty();
+        assertThat(trustedCerts).hasSize(1);
+
+        assertThatCode(() -> trustManager.checkClientTrusted(trustedCerts, "RSA"))
+                .isInstanceOf(CertificateException.class)
+                .hasMessage("Not Trusted!");
+
+        verify(innerTrustManager, times(1)).checkClientTrusted(trustedCerts, "RSA");
+        verify(innerTrustManager, times(1)).getAcceptedIssuers();
+
+        assertThat(logCaptor.getDebugLogs()).hasSize(2);
+        assertThat(logCaptor.getDebugLogs().get(0))
+                .contains("Validating the certificate chain of the client with authentication type RSA. See below for the full chain of the client")
+                .contains(Arrays.toString(trustedCerts));
+
+        LogEvent logEvent = logCaptor.getLogEvents().get(1);
+        assertThat(logEvent.getLevel()).isEqualTo("DEBUG");
+        assertThat(logEvent.getMessage()).isEqualTo("Failed validating the client with authentication type RSA.");
+        assertThat(logEvent.getThrowable()).isPresent();
+        assertThat(logEvent.getThrowable().get().getMessage()).isEqualTo("Not Trusted!");
+    }
+
 }
