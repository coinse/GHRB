{
  "issue_id": 882,
  "issue_url": "https://github.com/FasterXML/jackson-core/issues/882",
  "title": "Allow TokenFIlter to skip last elements in arrays",
  "description_text": "When the last element in array is an array or object and that element is skipped, the `FilteringParserDelegate` will end up in a loop from which it cannot exit. This means that the rest of the input will be skipped too. This results in incorrect JSON.\r\n\r\nThis behaviour exists since 2.9+\r\nI believe this is due to https://github.com/FasterXML/jackson-core/commit/7db467ddec7c2899038249b55695b7e44c7b5c3e#diff-f6642caef61e0c403f51a6150ecf45263034fca5002782fd02eacd01e53fe549L694 where the `if (gotEnd)` conditions where removed.\r\nI think this should be added as currently the logic is:\r\n```\r\n boolean gotEnd = (_headContext == buffRoot);\r\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\r\n\r\n                    _headContext = _headContext.getParent();\r\n                    _itemFilter = _headContext.getFilter();\r\n\r\n                    if (returnEnd) {\r\n                        return t;\r\n                    }\r\n```\r\nand that means that it can only exit when `_headContext.isStartHandled()` is true. For skipped elements this is false.\r\n\r\nThis can be easily reproduced with this testcase\r\n```\r\n @Test\r\n    public void testCustomIncludesWithMultipleObjectsInArrayMissLast() throws Exception {\r\n        var factory = new JsonFactory();\r\n        var baseParser = factory.createParser(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"},{\\\"bing\\\":\\\"boom\\\"}]}\");\r\n        var filteredParser = getFilteredParser(baseParser, filter(\"foo\", \"bar\"));\r\n        var writer = new StringWriter();\r\n        var generator = factory.createGenerator(writer);\r\n        Assertions.assertTrue(filteredParser.nextToken().isStructStart());\r\n        generator.copyCurrentStructure(filteredParser);\r\n        generator.flush();\r\n        Assertions.assertEquals(\"{\\\"foo\\\":[{\\\"bar\\\":\\\"baz\\\"}]}\", writer.toString());\r\n        //Expected :{\"foo\":[{\"bar\":\"baz\"}]}\r\n        //Actual   :{\"foo\":[{\"bar\":\"baz\"} \r\n    }\r\n```\r\ncc @tvernum who coauthored the fix and the testcases"
}