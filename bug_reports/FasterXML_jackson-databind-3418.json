{
  "issue_id": 513,
  "issue_url": "https://github.com/FasterXML/jackson-dataformat-xml/issues/513",
  "title": "Empty list incorrectly deserialized when `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled",
  "description_text": "When `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled, an empty `List<String>` is incorrectly deserialized as a list containing a single empty string (`List.of(\"\")`). Test case:\r\n\r\n```java\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\nimport java.util.List;\r\n\r\npublic class EmptyElementTest {\r\n    @Test\r\n    public void test() throws JsonProcessingException {\r\n        XmlMapper mapper = new XmlMapper();\r\n        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\r\n        List<String> list = mapper.readValue(\"<values/>\", new TypeReference<List<String>>() {});\r\n        Assert.assertTrue(list.isEmpty());\r\n    }\r\n}\r\n```\r\n\r\nThis is technically correct behavior, because `<values/>` can be deserialized as an empty string, which can then be wrapped in a list. However imo this should still be fixed.\r\n\r\nLooking at the code, the issue is in databind `StringCollectionDeserializer`. For the test case, `isExpectedStartArrayToken` returns false, which triggers the `handleNonArray` logic. This logic checks for the `ACCEPT_SINGLE_VALUE_AS_ARRAY` *first*, before trying to coerce the empty string to a list, which would succeed here.\r\n\r\nI see two approaches to fix this. Either change `FromXmlParser.isExpectedStartArrayToken` to return `true` for an empty string token, or change `StringCollectionDeserializer` to attempt a coercion from empty string *before* wrapping the value. imo the former should work fine.\r\n\r\nI can work on a fix for this once my corp CLA is cleared, which will be soon(tm)."
}