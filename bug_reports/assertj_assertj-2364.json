{
  "issue_id": 2363,
  "issue_url": "https://github.com/assertj/assertj/issues/2363",
  "title": "Extracting through field names not supported for optional in java 17",
  "description_text": "#### Summary\r\nI'm upgrading to java 17 (from java 11), and I have some tests failing due to an incompatibility between java 17 and assertJ.\r\nOne of the breaking changes introduced by java 17 is [JEP 396: Strongly Encapsulate JDK Internals by Default](https://openjdk.java.net/jeps/396).\r\nIt seems that assertJ try to force access to non public value (not public) when extracting them through field name => extract the value from an optional (\"object.value\") and since the value is not public I got this exception:\r\n```\r\norg.assertj.core.util.introspection.IntrospectionError: \r\nCan't find any field or property with name 'value'.\r\nError when introspecting properties was :\r\n- No getter for property 'value' in java.util.Optional \r\nError when introspecting fields was :\r\n- Unable to obtain the value of the field <'value'> from <Optional[john]>\r\n\r\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:88)\r\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:60)\r\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:57)\r\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\r\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1059)\r\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\r\n\tat fr.witchbird.cl.negotiation.test.functional.VersionIT.should_access(VersionIT.java:165)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\r\nCaused by: org.assertj.core.util.introspection.IntrospectionError: Unable to obtain the value of the field <'value'> from <Optional[john]>\r\n\tat org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:248)\r\n\tat org.assertj.core.util.introspection.FieldSupport.fieldValue(FieldSupport.java:202)\r\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:70)\r\n\t... 28 more\r\nCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.util.Optional.value accessible: module java.base does not \"opens java.util\" to unnamed module @7fbe847c\r\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)\r\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\r\n\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)\r\n\tat java.base/java.lang.reflect.Field.setAccessible(Field.java:172)\r\n\tat org.assertj.core.util.introspection.FieldUtils.getField(FieldUtils.java:67)\r\n\tat org.assertj.core.util.introspection.FieldUtils.readField(FieldUtils.java:143)\r\n\tat org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:208)\r\n\t... 30 more\r\n```\r\n\r\n#### Example\r\n\r\n```java\r\n       private static class Person {\r\n\t\tprivate final Optional<String> name;\r\n\r\n\t\tpublic Person(final Optional<String> name) {\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\r\n\t\tpublic Optional<String> getName() {\r\n\t\t\treturn name;\r\n\t\t}\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void should_access() {\r\n\t\tfinal Optional<String> name = Optional.of(\"john\");\r\n\t\tfinal var person = new Person(name);\r\n\t\tAssertions.assertThat(person)\r\n\t\t        .extracting(\"name.value\")\r\n\t\t        .isEqualTo(\"john\");\r\n\t}\r\n```\r\n"
}