{
  "issue_id": 847,
  "issue_url": "https://github.com/google/gson/issues/847",
  "title": "LazilyParsedNumber being serialised as JsonObject",
  "description_text": "When I deserialise a JSON object into a map and back into JSON it seems to serialise the `LazilyParsedNumber` as an object.\n\nJSON being parsed:\n\n``` js\n{\n    \"class\": \"Setting\",\n    \"event\": 4,\n    \"severity\": 2,\n    \"notify\": true,\n    \"sound\": false,\n    \"feeds\": [\n        {\n            \"code\": \"USGS\",\n            \"language\": \"eng\"\n        }\n    ]\n}\n```\n\nClass JSON is being parsed into \n\n``` java\n@NoArgsConstructor\n@AllArgsConstructor(suppressConstructorProperties = true)\n@Accessors(chain = true) @Data\npublic class MonitoredLocationSetting\n{\n    @SerializedName(\"class\") private final String className = \"Setting\";\n\n    protected int event = -1;\n    protected Map<String, Object> settings = new HashMap<>();\n    protected List<LocationSettingFeed> feeds = new ArrayList<>();\n}\n```\n\nBasically all im doing is deserialising all fields except \"event\", \"feeds\", and \"class\" into the `settings` map using the following adapters\n\n``` java\nbuilder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonDeserializer<MonitoredLocationSetting>()\n{\n    @Override public MonitoredLocationSetting deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException\n    {\n        MonitoredLocationSetting setting = new Gson().fromJson(json, typeOfT);\n\n        if (setting != null)\n        {\n            // Ignore for setting.settings\n            List<String> fieldsToIgnore = new ArrayList<String>(Arrays.asList(new String[]{\"event\", \"feeds\", \"class\"}));\n            Iterator<Map.Entry<String, JsonElement>> entries = json.getAsJsonObject().entrySet().iterator();\n            while (entries.hasNext())\n            {\n                Map.Entry<String, JsonElement> next = entries.next();\n\n                if (!fieldsToIgnore.contains(next.getKey()))\n                {\n                    if (next.getValue().isJsonPrimitive())\n                    {\n                        if (next.getValue().getAsJsonPrimitive().isBoolean())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isNumber())\n                        {\n                            // This deserialises as LazilyParsedNumber\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isString())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsString());\n                        }\n                        else\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue());\n                        }\n                    }\n                }\n            }\n        }\n\n        return setting;\n    }\n});\nbuilder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer<MonitoredLocationSetting>()\n{\n    @Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)\n    {\n        JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);\n        // After the above line is called the following JSON is produced\n        /*\n                {\n                    \"class\": \"Setting\",\n                    \"event\": 4,\n                    \"feeds\": [\n                        {\n                            \"code\": \"USGS\",\n                            \"language\": \"eng\"\n                        }\n                    ],\n                    \"settings\": {\n                        \"notify\": true,\n                        \"severity\": {  <-- Issue here\n                            \"value\": \"2\"\n                        },\n                        \"sound\": false\n                    }\n                }\n        */\n        JsonObject setting = serialised.get(\"settings\").getAsJsonObject();\n\n        // Ignore for setting.settings\n        Iterator<Map.Entry<String, JsonElement>> entries = setting.entrySet().iterator();\n        while (entries.hasNext())\n        {\n            Map.Entry<String, JsonElement> next = entries.next();\n            serialised.add(next.getKey(), next.getValue());\n        }\n\n        serialised.remove(\"settings\");\n        return serialised;\n    }\n});\n```\n\nFrom what I can see, _technically_ this is correct because as far as Gson is concerned `LazilyParsedNumber` IS an object and not a 'primitive', however, doing a straight convert from and then back to json causes a problem because the object isnt parsed back as a primitive after being read as a primitive (Number)\n"
}