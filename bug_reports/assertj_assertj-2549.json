{
  "issue_id": 2547,
  "issue_url": "https://github.com/assertj/assertj/issues/2547",
  "title": "Regression in `AbstractMapAssert#containsOnlyKeys` with Spring's `MultiValueMapAdapter`",
  "description_text": "#### Summary\r\nWe saw this when updating from AssertJ 3.19.0 to 3.20.0. It appears that `AbstractMapAssert#containsOnlyKeys` is mutating the map that we're asserting on, which leads to test failures in our case. This is happening on an instance of `org.springframework.util.MultiValueMapAdapter`\r\n\r\n#### Example\r\n\r\n```java\r\nvar underlyingMap = new HashMap<String, List<String>>();\r\nunderlyingMap.put(\"Hello\", List.of(\"World\"));\r\n\r\nvar multiValueMap = CollectionUtils.toMultiValueMap(underlyingMap);\r\n// This assertion passes\r\nassertThat(multiValueMap).containsOnlyKeys(\"Hello\");\r\n// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty\r\nassertThat(multiValueMap).containsOnlyKeys(\"Hello\");\r\n```\r\n\r\nThe issue seems to have been introduced in #2167, and is caused by [this](https://github.com/assertj/assertj-core/pull/2167/files#diff-abf21eb7e9d518345dcc39f1097da30169084ee0a538e0b174fba36807cf7386R397) use of `Map#remove` on a \"clone\" of the `Map` being asserted on. In our case that `Map` is a Spring `MultiValueMapAdapter`, which delegates operations to the underlying `Map` that it was constructed from. The `remove` call on the clone delegates to `multiValueMap#remove` which in turn delegates to `underlyingMap#remove`.\r\n"
}