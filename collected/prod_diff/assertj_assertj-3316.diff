diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java
index 123f34968..1a436f138 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java
@@ -34,6 +34,7 @@ import static org.assertj.core.error.ShouldBeSealed.shouldNotBeSealed;
 import static org.assertj.core.error.ShouldHaveNoPackage.shouldHaveNoPackage;
 import static org.assertj.core.error.ShouldHaveNoSuperclass.shouldHaveNoSuperclass;
 import static org.assertj.core.error.ShouldHavePackage.shouldHavePackage;
+import static org.assertj.core.error.ShouldHavePermittedSubclasses.shouldHavePermittedSubclasses;
 import static org.assertj.core.error.ShouldHaveRecordComponents.shouldHaveRecordComponents;
 import static org.assertj.core.error.ShouldHaveSuperclass.shouldHaveSuperclass;
 import static org.assertj.core.error.ShouldNotBeNull.shouldNotBeNull;
@@ -45,6 +46,7 @@ import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Collections;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 import org.assertj.core.internal.Classes;
@@ -1166,6 +1168,62 @@ public abstract class AbstractClassAssert<SELF extends AbstractClassAssert<SELF>
     }
   }
 
+  /**
+   * Verifies that permitted subclasses of the actual {@code Class} has the given {@code Class}es.
+   * <p>
+   * Example:
+   * <pre><code class='java'>  sealed class SuperClass permits Permitted {
+   * }
+   *
+   * final class Permitted extends SuperClass {
+   * }
+   *
+   * final class NotPermitted {
+   * }
+   *
+   * // these assertions succeed:
+   * assertThat(SuperClass.class).hasPermittedSubclasses();
+   * assertThat(SuperClass.class).hasPermittedSubclasses(Permitted.class);
+   *
+   * // these assertions fail:
+   * assertThat(SuperClass.class).hasPermittedSubclasses(NotPermitted.class);
+   * assertThat(SuperClass.class).hasPermittedSubclasses(Permitted.class, NotPermitted.class);</code></pre>
+   *
+   * @param permittedSubclasses classes that must be permitted subclasses of the given class
+   * @return {@code this} assertions object
+   * @throws AssertionError if {@code actual} is {@code null}.
+   * @throws AssertionError if the actual {@code Class} does not have all of given permitted subclasses
+   */
+  public SELF hasPermittedSubclasses(Class<?>... permittedSubclasses) {
+    isNotNull();
+    assertHasPermittedSubclasses(permittedSubclasses);
+    return myself;
+  }
+
+  private void assertHasPermittedSubclasses(Class<?>[] permittedSubclasses) {
+    Set<Class<?>> expected = newLinkedHashSet(permittedSubclasses);
+    Set<Class<?>> missing = new LinkedHashSet<>();
+    Set<Class<?>> actualPermitted = newLinkedHashSet(getPermittedSubclasses(actual));
+    for (Class<?> other : expected) {
+      classes.classParameterIsNotNull(other);
+      if (!actualPermitted.contains(other)) missing.add(other);
+    }
+
+    if (!missing.isEmpty()) throw assertionError(shouldHavePermittedSubclasses(actual, expected, missing));
+  }
+
+  private static Class<?>[] getPermittedSubclasses(Class<?> actual) {
+    try {
+      Method getPermittedSubclasses = Class.class.getMethod("getPermittedSubclasses");
+      Class<?>[] permittedSubclasses = (Class<?>[]) getPermittedSubclasses.invoke(actual);
+      return permittedSubclasses == null ? array() : permittedSubclasses;
+    } catch (NoSuchMethodException e) {
+      return new Class<?>[0];
+    } catch (ReflectiveOperationException e) {
+      throw new IllegalStateException(e);
+    }
+  }
+
   /**
    * Verifies that the actual {@code Class} is a primitive type.
    * <p>
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePermittedSubclasses.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePermittedSubclasses.java
new file mode 100644
index 000000000..5ea0d4570
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePermittedSubclasses.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2024 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import java.util.Collection;
+
+/**
+ * Creates an error message indicating that an assertion that verifies that a class has permitted subclasses failed.
+ */
+public class ShouldHavePermittedSubclasses extends BasicErrorMessageFactory {
+
+  /**
+   * Creates a new <code>{@link ShouldHavePermittedSubclasses}</code>.
+   *
+   * @param actual the actual value in the failed assertion
+   * @param expected expected permitted subclasses for this class
+   * @param missing missing permitted subclasses for this class
+   * @return the created {@code ErrorMessageFactory}.
+   */
+  public static ErrorMessageFactory shouldHavePermittedSubclasses(Class<?> actual,
+                                                                  Collection<Class<?>> expected,
+                                                                  Collection<Class<?>> missing) {
+    return new ShouldHavePermittedSubclasses(actual, expected, missing);
+  }
+
+  private ShouldHavePermittedSubclasses(Class<?> actual, Collection<Class<?>> expected, Collection<Class<?>> missing) {
+    super("%nExpecting%n  %s%nto have permitted subclasses:%n  %s%n" +
+          "but the following permitted subclasses were not found:%n  %s",
+          actual, expected, missing);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Classes.java b/assertj-core/src/main/java/org/assertj/core/internal/Classes.java
index 6c45b7db4..730f6c17a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Classes.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Classes.java
@@ -317,6 +317,17 @@ public class Classes {
     }
   }
 
+  /**
+   * used to check that the class to compare is not null, in that case throws a {@link NullPointerException} with an
+   * explicit message.
+   *
+   * @param clazz the class to check
+   * @throws NullPointerException with an explicit message if the given class is null
+   */
+  public void classParameterIsNotNull(Class<?> clazz) {
+    requireNonNull(clazz, "The class to compare actual with should not be null");
+  }
+
   private static SortedSet<String> getMethodsWithModifier(Set<Method> methods, int modifier) {
     SortedSet<String> methodsWithModifier = newTreeSet();
     for (Method method : methods) {
@@ -389,15 +400,4 @@ public class Classes {
   private static void assertNotNull(AssertionInfo info, Class<?> actual) {
     Objects.instance().assertNotNull(info, actual);
   }
-
-  /**
-   * used to check that the class to compare is not null, in that case throws a {@link NullPointerException} with an
-   * explicit message.
-   * 
-   * @param clazz the date to check
-   * @throws NullPointerException with an explicit message if the given class is null
-   */
-  private static void classParameterIsNotNull(Class<?> clazz) {
-    requireNonNull(clazz, "The class to compare actual with should not be null");
-  }
 }
