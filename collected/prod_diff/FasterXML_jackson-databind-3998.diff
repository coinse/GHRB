diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/JsonNodeFeature.java b/src/main/java/com/fasterxml/jackson/databind/cfg/JsonNodeFeature.java
index 0dec57c022..202b29818f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/cfg/JsonNodeFeature.java
+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/JsonNodeFeature.java
@@ -27,6 +27,19 @@ public enum JsonNodeFeature implements DatatypeFeature
      */
     WRITE_NULL_PROPERTIES(true),
 
+    /**
+     * When writing {@code com.fasterxml.jackson.databind.JsonNode}s are Object properties
+     * (for {@code ObjectNode}s) sorted alphabetically (using natural order of
+     * {@link java.lang.String}) or not?
+     * If not sorted, order is the insertion order; when reading this also means retaining
+     * order from the input document.
+     *<p>
+     * Default value: {@code false}
+     *
+     * @since 2.16
+     */
+    WRITE_PROPERTIES_SORTED(false),
+
     // // // Merge configuration settings
 
     // // // 03-Aug-2022, tatu: Possible other additions:
diff --git a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
index 387a947466..20b2311b9a 100644
--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
@@ -430,7 +430,7 @@ public class ObjectNode
             }
         }
         g.writeStartObject(this);
-        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {
+        for (Map.Entry<String, JsonNode> en : _contentsToSerialize(provider).entrySet()) {
             JsonNode value = en.getValue();
             g.writeFieldName(en.getKey());
             value.serialize(g, provider);
@@ -457,7 +457,7 @@ public class ObjectNode
         if (trimEmptyArray || skipNulls) {
             serializeFilteredContents(g, provider, trimEmptyArray, skipNulls);
         } else {
-            for (Map.Entry<String, JsonNode> en : _children.entrySet()) {
+            for (Map.Entry<String, JsonNode> en : _contentsToSerialize(provider).entrySet()) {
                 JsonNode value = en.getValue();
                 g.writeFieldName(en.getKey());
                 value.serialize(g, provider);
@@ -476,7 +476,7 @@ public class ObjectNode
             final boolean trimEmptyArray, final boolean skipNulls)
         throws IOException
     {
-        for (Map.Entry<String, JsonNode> en : _children.entrySet()) {
+        for (Map.Entry<String, JsonNode> en : _contentsToSerialize(provider).entrySet()) {
             // 17-Feb-2009, tatu: Can we trust that all nodes will always
             //   extend BaseJsonNode? Or if not, at least implement
             //   JsonSerializable? Let's start with former, change if
@@ -497,6 +497,21 @@ public class ObjectNode
         }
     }
 
+    /**
+     * Helper method for encapsulating details of accessing child node entries
+     * to serialize.
+     *
+     * @since 2.16
+     */
+    protected Map<String, JsonNode> _contentsToSerialize(SerializerProvider ctxt) {
+        if (ctxt.isEnabled(JsonNodeFeature.WRITE_PROPERTIES_SORTED)) {
+            if (!_children.isEmpty()) {
+                return new TreeMap<>(_children);
+            }
+        }
+        return _children;
+    }
+
     /*
     /**********************************************************
     /* Extended ObjectNode API, mutators, since 2.1
