diff --git a/tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredIndexFile.java b/tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredIndexFile.java
index 50beb01ae..eda5e0106 100644
--- a/tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredIndexFile.java
+++ b/tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/TieredIndexFile.java
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.tieredstore.file;
 
+import com.google.common.annotations.VisibleForTesting;
 import java.io.File;
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -99,7 +100,7 @@ public class TieredIndexFile {
             this::doScheduleTask, 10, 10, TimeUnit.SECONDS);
     }
 
-    private void doScheduleTask() {
+    protected void doScheduleTask() {
         try {
             curFileLock.lock();
             try {
@@ -145,6 +146,11 @@ public class TieredIndexFile {
         }
     }
 
+    @VisibleForTesting
+    public MappedFile getPreMappedFile() {
+        return preMappedFile;
+    }
+
     private void initFile() throws IOException {
         curMappedFile = new DefaultMappedFile(curFilePath, fileMaxSize);
         initIndexFileHeader(curMappedFile);
@@ -156,19 +162,26 @@ public class TieredIndexFile {
 
         if (isFileSealed(curMappedFile)) {
             if (preFileExists) {
-                preFile.delete();
+                if (preFile.delete()) {
+                    logger.info("Pre IndexFile deleted success", preFilepath);
+                } else {
+                    logger.error("Pre IndexFile deleted failed", preFilepath);
+                }
             }
             boolean rename = curMappedFile.renameTo(preFilepath);
             if (rename) {
                 preMappedFile = curMappedFile;
                 curMappedFile = new DefaultMappedFile(curFilePath, fileMaxSize);
+                initIndexFileHeader(curMappedFile);
                 preFileExists = true;
             }
         }
+
         if (preFileExists) {
             synchronized (TieredIndexFile.class) {
                 if (inflightCompactFuture.isDone()) {
-                    inflightCompactFuture = TieredStoreExecutor.compactIndexFileExecutor.submit(new CompactTask(storeConfig, preMappedFile, flatFile), null);
+                    inflightCompactFuture = TieredStoreExecutor.compactIndexFileExecutor.submit(
+                        new CompactTask(storeConfig, preMappedFile, flatFile), null);
                 }
             }
         }
@@ -261,7 +274,8 @@ public class TieredIndexFile {
         }
     }
 
-    public CompletableFuture<List<Pair<Long, ByteBuffer>>> queryAsync(String topic, String key, long beginTime, long endTime) {
+    public CompletableFuture<List<Pair<Long, ByteBuffer>>> queryAsync(String topic, String key, long beginTime,
+        long endTime) {
         int hashCode = indexKeyHashMethod(buildKey(topic, key));
         int slotPosition = hashCode % maxHashSlotNum;
         List<TieredFileSegment> fileSegmentList = flatFile.getFileListByTime(beginTime, endTime);
@@ -355,7 +369,7 @@ public class TieredIndexFile {
         private final int fileMaxSize;
         private MappedFile originFile;
         private TieredFlatFile fileQueue;
-        private final MappedFile compactFile;
+        private MappedFile compactFile;
 
         public CompactTask(TieredMessageStoreConfig storeConfig, MappedFile originFile,
             TieredFlatFile fileQueue) throws IOException {
@@ -381,6 +395,17 @@ public class TieredIndexFile {
             } catch (Throwable throwable) {
                 logger.error("TieredIndexFile#compactTask: compact index file failed:", throwable);
             }
+
+            try {
+                if (originFile != null) {
+                    originFile.destroy(-1);
+                }
+                if (compactFile != null) {
+                    compactFile.destroy(-1);
+                }
+            } catch (Throwable throwable) {
+                logger.error("TieredIndexFile#compactTask: destroy index file failed:", throwable);
+            }
         }
 
         public void compact() {
@@ -396,6 +421,8 @@ public class TieredIndexFile {
             fileQueue.commit(true);
             compactFile.destroy(-1);
             originFile.destroy(-1);
+            compactFile = null;
+            originFile = null;
         }
 
         private void buildCompactFile() {
@@ -414,6 +441,7 @@ public class TieredIndexFile {
                 if (slotValue != -1) {
                     int indexTotalSize = 0;
                     int indexPosition = slotValue;
+
                     while (indexPosition >= 0 && indexPosition < maxIndexNum) {
                         int indexOffset = INDEX_FILE_HEADER_SIZE + maxHashSlotNum * INDEX_FILE_HASH_SLOT_SIZE
                             + indexPosition * INDEX_FILE_HASH_ORIGIN_INDEX_SIZE;
