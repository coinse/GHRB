diff --git a/assertj-core/src/main/java/org/assertj/core/annotations/Beta.java b/assertj-core/src/main/java/org/assertj/core/annotations/Beta.java
index cfdae1c50..10ef85f9f 100644
--- a/assertj-core/src/main/java/org/assertj/core/annotations/Beta.java
+++ b/assertj-core/src/main/java/org/assertj/core/annotations/Beta.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.annotations;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Abstract2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Abstract2DArrayAssert.java
index a92607a27..f1da69955 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Abstract2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Abstract2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractArrayAssert.java
index 0649b136f..3bd288553 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractAssert.java
index d566b4448..e9b0c9591 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -773,7 +773,7 @@ public abstract class AbstractAssert<SELF extends AbstractAssert<SELF, ACTUAL>,
    *
    * @param predicate the {@link Predicate} to match
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual does not match the given {@link Predicate}.
+   * @throws AssertionError if {@code actual} does not match the given {@link Predicate}.
    * @throws NullPointerException if given {@link Predicate} is null.
    */
   public SELF matches(Predicate<? super ACTUAL> predicate) {
@@ -798,7 +798,7 @@ public abstract class AbstractAssert<SELF extends AbstractAssert<SELF, ACTUAL>,
    * @param predicate the {@link Predicate} to match
    * @param predicateDescription a description of the {@link Predicate} used in the error message
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual does not match the given {@link Predicate}.
+   * @throws AssertionError if {@code actual} does not match the given {@link Predicate}.
    * @throws NullPointerException if given {@link Predicate} is null.
    * @throws NullPointerException if given predicateDescription is null.
    */
@@ -1118,7 +1118,7 @@ public abstract class AbstractAssert<SELF extends AbstractAssert<SELF, ACTUAL>,
    * @param propertyOrField the property/field to extract from the initial object under test
    * @param assertFactory   the factory for the creation of the new {@code Assert}
    * @return the new {@code Assert} instance
-   * @throws AssertionError if the object under test is {@code null}
+   * @throws AssertionError if {@code actual} is {@code null}
    *
    * @since 3.16.0
    * @see AbstractObjectAssert#extracting(String)
@@ -1146,7 +1146,7 @@ public abstract class AbstractAssert<SELF extends AbstractAssert<SELF, ACTUAL>,
    * @param extractor     the extractor function used to extract the value from the object under test
    * @param assertFactory the factory for the creation of the new {@code Assert}
    * @return the new {@code Assert} instance
-   * @throws AssertionError if the object under test is {@code null}
+   * @throws AssertionError if {@code actual} is {@code null}
    *
    * @since 3.16.0
    * @see AbstractObjectAssert#extracting(Function)
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicFieldUpdaterAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicFieldUpdaterAssert.java
index 9a34bfeaf..e69659841 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicFieldUpdaterAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicFieldUpdaterAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicReferenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicReferenceAssert.java
index aa94048cd..4d9af8c21 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicReferenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractAtomicReferenceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalAssert.java
index 7d981e9e4..041916f6e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalScaleAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalScaleAssert.java
index 4777bc128..913a0023a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalScaleAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractBigDecimalScaleAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractBigIntegerAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractBigIntegerAssert.java
index 9ab288493..66dcd911d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractBigIntegerAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractBigIntegerAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanArrayAssert.java
index 5ec2bfd74..34a6b8bf6 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -205,7 +205,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -229,7 +229,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -256,7 +256,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -282,7 +282,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -308,7 +308,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -333,7 +333,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -359,6 +359,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(boolean... sequence) {
@@ -381,6 +382,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(Boolean[] sequence) {
@@ -404,6 +406,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(boolean... subsequence) {
@@ -426,6 +429,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(Boolean[] subsequence) {
@@ -563,7 +567,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -587,7 +591,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -612,7 +616,6 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -636,7 +639,6 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -698,6 +700,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -721,6 +724,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -749,6 +753,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -775,6 +780,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -802,7 +808,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -829,7 +835,7 @@ public abstract class AbstractBooleanArrayAssert<SELF extends AbstractBooleanArr
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanAssert.java
index 1d9b987d8..eed53e1e9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractBooleanAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java
index d44bfb5b9..45f281050 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -211,10 +211,10 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not contain the given values.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not contain the given values.
    */
   public SELF contains(byte... values) {
     arrays.assertContains(info, actual, values);
@@ -236,10 +236,10 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not contain the given values.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not contain the given values.
    * @since 3.19.0
    */
   public SELF contains(Byte[] values) {
@@ -263,10 +263,10 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not contain the given values.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not contain the given values.
    * @since 2.6.0 / 3.6.0
    */
   public SELF contains(int... values) {
@@ -289,13 +289,12 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not contain the given values, i.e. the actual array
-   *                                  contains some
-   *                                  or none of the given values, or the actual array contains more values than the
-   *                                  given ones.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not contain the given values, i.e. the actual array contains
+   *                              some or none of the given values, or the actual array contains more values than the
+   *                              given ones.
    */
   public SELF containsOnly(byte... values) {
     arrays.assertContainsOnly(info, actual, values);
@@ -317,13 +316,12 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not contain the given values, i.e. the actual array
-   *                                  contains some
-   *                                  or none of the given values, or the actual array contains more values than the
-   *                                  given ones.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not contain the given values, i.e. the actual array contains
+   *                              some or none of the given values, or the actual array contains more values than the
+   *                              given ones.
    * @since 3.19.0
    */
   public SELF containsOnly(Byte[] values) {
@@ -347,13 +345,12 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not contain the given values, i.e. the actual array
-   *                                  contains some
-   *                                  or none of the given values, or the actual array contains more values than the
-   *                                  given ones.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not contain the given values, i.e. the actual array contains
+   *                              some or none of the given values, or the actual array contains more values than the
+   *                              given ones.
    * @since 2.6.0 / 3.6.0
    */
   public SELF containsOnly(int... values) {
@@ -375,13 +372,12 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual group does not contain the given values, i.e. the actual group
-   *                                  contains some
-   *                                  or none of the given values, or the actual group contains more than once these
-   *                                  values.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual group does not contain the given values, i.e. the actual group contains
+   *                              some or none of the given values, or the actual group contains more than once these
+   *                              values.
    */
   public SELF containsOnlyOnce(byte... values) {
     arrays.assertContainsOnlyOnce(info, actual, values);
@@ -402,13 +398,12 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual group does not contain the given values, i.e. the actual group
-   *                                  contains some
-   *                                  or none of the given values, or the actual group contains more than once these
-   *                                  values.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual group does not contain the given values, i.e. the actual group contains
+   *                              some or none of the given values, or the actual group contains more than once these
+   *                              values.
    * @since 3.19.0
    */
   public SELF containsOnlyOnce(Byte[] values) {
@@ -431,13 +426,12 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param values the given values.
    * @return {@code this} assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual group does not contain the given values, i.e. the actual group
-   *                                  contains some
-   *                                  or none of the given values, or the actual group contains more than once these
-   *                                  values.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual group does not contain the given values, i.e. the actual group contains
+   *                              some or none of the given values, or the actual group contains more than once these
+   *                              values.
    * @since 2.6.0 / 3.6.0
    */
   public SELF containsOnlyOnce(int... values) {
@@ -462,6 +456,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(byte... sequence) {
@@ -486,6 +481,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -512,6 +508,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 2.6.0 / 3.6.0
    */
@@ -538,6 +535,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(byte... subsequence) {
@@ -563,6 +561,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -590,6 +589,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 2.6.0 / 3.6.0
    */
@@ -802,10 +802,10 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not start with the given sequence.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not start with the given sequence.
    */
   public SELF startsWith(byte... sequence) {
     arrays.assertStartsWith(info, actual, sequence);
@@ -826,10 +826,10 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not start with the given sequence.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not start with the given sequence.
    * @since 3.19.0
    */
   public SELF startsWith(Byte[] sequence) {
@@ -852,10 +852,10 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    *
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
-   * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
-   * @throws AssertionError           if the actual array is {@code null}.
-   * @throws AssertionError           if the actual array does not start with the given sequence.
+   * @throws NullPointerException if the given argument is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
+   * @throws AssertionError       if the actual array is {@code null}.
+   * @throws AssertionError       if the actual array does not start with the given sequence.
    * @since 2.6.0 / 3.6.0
    */
   public SELF startsWith(int... sequence) {
@@ -878,7 +878,6 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError           if the actual array is {@code null}.
    * @throws AssertionError           if the actual array does not end with the given sequence.
    */
@@ -902,7 +901,6 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError           if the actual array is {@code null}.
    * @throws AssertionError           if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -928,7 +926,6 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException     if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError           if the actual array is {@code null}.
    * @throws AssertionError           if the actual array does not end with the given sequence.
    * @since 2.6.0 / 3.6.0
@@ -985,6 +982,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError       if the actual group is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError       if the actual group does not contain the given values with same order, i.e. the actual
    *                              group
    *                              contains some or none of the given values, or the actual group contains more values
@@ -1018,6 +1016,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError       if the actual group is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError       if the actual group does not contain the given values with same order, i.e. the actual
    *                              group
    *                              contains some or none of the given values, or the actual group contains more values
@@ -1051,6 +1050,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError       if the actual group is {@code null}.
+   * @throws AssertionError       if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError       if the actual group does not contain the given values with same order, i.e. the actual
    *                              group
    *                              contains some or none of the given values, or the actual group contains more values
@@ -1080,6 +1080,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -1106,6 +1107,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -1133,6 +1135,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -1162,7 +1165,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -1192,7 +1195,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
@@ -1223,7 +1226,7 @@ public abstract class AbstractByteArrayAssert<SELF extends AbstractByteArrayAsse
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractByteAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractByteAssert.java
index f025340ce..6f88750ea 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractByteAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractByteAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharArrayAssert.java
index 20404bbdd..5554741a1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -210,7 +210,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -235,7 +235,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the given {@code Character} array of values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -262,7 +262,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -288,7 +288,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -315,7 +315,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -340,7 +340,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -369,6 +369,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(char... sequence) {
@@ -393,6 +394,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -420,6 +422,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(char... subsequence) {
@@ -445,6 +448,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -584,7 +588,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -608,7 +612,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.19.0
@@ -634,7 +638,6 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -658,7 +661,6 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -713,6 +715,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -736,6 +739,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -764,6 +768,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -790,6 +795,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -845,7 +851,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -875,7 +881,7 @@ public abstract class AbstractCharArrayAssert<SELF extends AbstractCharArrayAsse
    * @param values the array of values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java
index 650726420..3d5bee885 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -1622,7 +1622,7 @@ public abstract class AbstractCharSequenceAssert<SELF extends AbstractCharSequen
    * To be exact, the following rules are applied:
    * <ul>
    * <li>all leading and trailing whitespace of both actual and expected strings are ignored</li>
-   * <li>any remaining whitespace, appearing within either string, is collapsed to a single space before comparison</li>
+   * <li>any remaining whitespace (including non-breaking spaces), appearing within either string, is collapsed to a single space before comparison</li>
    * </ul>
    * <p>
    * Example:
@@ -1634,6 +1634,7 @@ public abstract class AbstractCharSequenceAssert<SELF extends AbstractCharSequen
    *                              .isEqualToNormalizingWhitespace("  Game of   Thrones  ")
    *                              .isEqualToNormalizingWhitespace("Game of\tThrones")
    *                              .isEqualToNormalizingWhitespace("Game of Thrones");
+   *                              .isEqualToNormalizingWhitespace("Game\u00A0of Thrones");
    *
    * // assertions will fail
    * assertThat("Game of Thrones").isEqualToNormalizingWhitespace("Game ofThrones");
@@ -1657,7 +1658,7 @@ public abstract class AbstractCharSequenceAssert<SELF extends AbstractCharSequen
    * To be exact, the following rules are applied:
    * <ul>
    * <li>all leading and trailing whitespace of both actual and expected strings are ignored</li>
-   * <li>any remaining whitespace, appearing within either string, is collapsed to a single space before comparison</li>
+   * <li>any remaining whitespace (including non-breaking spaces), appearing within either string, is collapsed to a single space before comparison</li>
    * </ul>
    * <p>
    * Example:
@@ -1686,11 +1687,11 @@ public abstract class AbstractCharSequenceAssert<SELF extends AbstractCharSequen
 
   /**
    * Verifies that the actual {@code CharSequence} is equal to the given one, after the punctuation
-   * of both strings have been normalized.
+   * of both strings has been normalized.
    * <p>
    * To be exact, the following rules are applied:
    * <ul>
-   * <li>All punctuation of actual and expected strings are ignored and whitespaces are normalized</li>
+   * <li>All punctuation of actual and expected strings are ignored and whitespaces (including non-breaking spaces) are normalized</li>
    * <li>Punctuation is any of the following character <b>{@code !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~}</b></li>
    * </ul>
    * <p>
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharacterAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharacterAssert.java
index 9aa78ac3e..feed8b0c4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractCharacterAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractCharacterAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java
index d5f8a56e0..123f34968 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -26,6 +26,7 @@ import static org.assertj.core.error.ShouldBeAnnotation.shouldNotBeAnnotation;
 import static org.assertj.core.error.ShouldBeAssignableTo.shouldBeAssignableTo;
 import static org.assertj.core.error.ShouldBeInterface.shouldBeInterface;
 import static org.assertj.core.error.ShouldBeInterface.shouldNotBeInterface;
+import static org.assertj.core.error.ShouldBePrimitive.shouldBePrimitive;
 import static org.assertj.core.error.ShouldBeRecord.shouldBeRecord;
 import static org.assertj.core.error.ShouldBeRecord.shouldNotBeRecord;
 import static org.assertj.core.error.ShouldBeSealed.shouldBeSealed;
@@ -36,6 +37,7 @@ import static org.assertj.core.error.ShouldHavePackage.shouldHavePackage;
 import static org.assertj.core.error.ShouldHaveRecordComponents.shouldHaveRecordComponents;
 import static org.assertj.core.error.ShouldHaveSuperclass.shouldHaveSuperclass;
 import static org.assertj.core.error.ShouldNotBeNull.shouldNotBeNull;
+import static org.assertj.core.error.ShouldNotBePrimitive.shouldNotBePrimitive;
 import static org.assertj.core.util.Arrays.array;
 import static org.assertj.core.util.Sets.newLinkedHashSet;
 
@@ -1164,4 +1166,59 @@ public abstract class AbstractClassAssert<SELF extends AbstractClassAssert<SELF>
     }
   }
 
+  /**
+   * Verifies that the actual {@code Class} is a primitive type.
+   * <p>
+   * Example:
+   * <pre><code class='java'> // these assertions succeed:
+   * assertThat(byte.class).isPrimitive();
+   * assertThat(short.class).isPrimitive();
+   * assertThat(int.class).isPrimitive();
+   * assertThat(long.class).isPrimitive();
+   * assertThat(float.class).isPrimitive();
+   * assertThat(double.class).isPrimitive();
+   * assertThat(boolean.class).isPrimitive();
+   * assertThat(char.class).isPrimitive();
+   *
+   * // this assertion fails as Object is not a primitive type:
+   * assertThat(Object.class).isPrimitive(); </code></pre>
+   *
+   * @return {@code this} assertions object
+   * @throws AssertionError if {@code actual} is {@code null}.
+   * @throws AssertionError if the actual {@code Class} is not a primitive type.
+   * @see Class#isPrimitive()
+   */
+  public SELF isPrimitive() {
+    isNotNull();
+    if (!actual.isPrimitive()) throw assertionError(shouldBePrimitive(actual));
+    return myself;
+  }
+
+  /**
+   * Verifies that the actual {@code Class} is not a primitive type.
+   * <p>
+   * Example:
+   * <pre><code class='java'> // this assertion succeeds as Object is not a primitive type:
+   * assertThat(Object.class).isNotPrimitive();
+   *
+   * // these assertions fail:
+   * assertThat(byte.class).isNotPrimitive();
+   * assertThat(short.class).isNotPrimitive();
+   * assertThat(int.class).isNotPrimitive();
+   * assertThat(long.class).isNotPrimitive();
+   * assertThat(float.class).isNotPrimitive();
+   * assertThat(double.class).isNotPrimitive();
+   * assertThat(boolean.class).isNotPrimitive();
+   * assertThat(char.class).isNotPrimitive(); </code></pre>
+   *
+   * @return {@code this} assertions object
+   * @throws AssertionError if {@code actual} is {@code null}.
+   * @throws AssertionError if the actual {@code Class} is a primitive type.
+   * @see Class#isPrimitive()
+   */
+  public SELF isNotPrimitive() {
+    isNotNull();
+    if (actual.isPrimitive()) throw assertionError(shouldNotBePrimitive(actual));
+    return myself;
+  }
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractCollectionAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractCollectionAssert.java
index 9edc18e4e..847739a1c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractCollectionAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractCollectionAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractComparableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractComparableAssert.java
index a56b559e5..4617f7311 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractComparableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractComparableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractCompletableFutureAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractCompletableFutureAssert.java
index 19a1fecde..f28012dcc 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractCompletableFutureAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractCompletableFutureAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -388,7 +388,7 @@ public abstract class AbstractCompletableFutureAssert<SELF extends AbstractCompl
    * assertThat(future).succeedsWithin(timeout);</code></pre>
    *
    * @param timeout the maximum time to wait
-   * @return a new assertion object on the the future's result.
+   * @return a new assertion object on the future's result.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} does not succeed within the given timeout.
    */
@@ -431,7 +431,7 @@ public abstract class AbstractCompletableFutureAssert<SELF extends AbstractCompl
    *
    * @param timeout the maximum time to wait
    * @param unit the time unit of the timeout argument
-   * @return a new assertion object on the the future's result.
+   * @return a new assertion object on the future's result.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} does not succeed within the given timeout.
    */
@@ -446,7 +446,7 @@ public abstract class AbstractCompletableFutureAssert<SELF extends AbstractCompl
 
   /**
    * Waits if necessary for at most the given time for this future to complete, the {@link InstanceOfAssertFactory}
-   * parameter is used to return assertions specific to the the future's result type.
+   * parameter is used to return assertions specific to the future's result type.
    * <p>
    * If the future's result is not available for any reason an assertion error is thrown.
    * <p>
@@ -477,7 +477,7 @@ public abstract class AbstractCompletableFutureAssert<SELF extends AbstractCompl
 
   /**
    * Waits if necessary for at most the given time for this future to complete, the {@link InstanceOfAssertFactory}
-   * parameter is used to return assertions specific to the the future's result type.
+   * parameter is used to return assertions specific to the future's result type.
    * <p>
    * If the future's result is not available for any reason an assertion error is thrown.
    * <p>
@@ -578,7 +578,7 @@ public abstract class AbstractCompletableFutureAssert<SELF extends AbstractCompl
    * assertThat(future).failsWithin(Duration.ofMillis(200));</code></pre>
    *
    * @param timeout the maximum time to wait
-   * @return a new assertion instance on the the future's exception.
+   * @return a new assertion instance on the future's exception.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} succeeds within the given timeout.
    * @since 3.18.0
@@ -613,7 +613,7 @@ public abstract class AbstractCompletableFutureAssert<SELF extends AbstractCompl
    *
    * @param timeout the maximum time to wait
    * @param unit the time unit
-   * @return a new assertion instance on the the future's exception.
+   * @return a new assertion instance on the future's exception.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} succeeds within the given timeout.
    * @since 3.18.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractDateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractDateAssert.java
index cb339c509..cf91202ba 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractDateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractDateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleArrayAssert.java
index 73df4b01f..cfcab4c2e 100755
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -216,7 +216,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -241,7 +241,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -270,7 +270,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the value may vary
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -296,7 +296,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the value may vary
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -330,7 +330,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -356,7 +356,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -387,7 +387,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the value may vary
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -415,7 +415,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the value may vary
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -447,7 +447,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -472,7 +472,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -501,7 +501,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
   * @param precision the precision under which the value may vary
   * @return {@code this} assertion object.
   * @throws NullPointerException if the given argument is {@code null}.
-  * @throws IllegalArgumentException if the given argument is an empty array.
+  * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
   * @throws AssertionError if the actual array is {@code null}.
   * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
   *           or none of the given values, or the actual group contains more than once these values.
@@ -527,7 +527,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the value may vary
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -563,6 +563,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(double... sequence) {
@@ -585,6 +586,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -615,6 +617,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(double[] sequence, Offset<Double> precision) {
@@ -642,6 +645,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -675,6 +679,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(double... subsequence) {
@@ -697,6 +702,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -727,6 +733,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(double[] subsequence, Offset<Double> precision) {
@@ -754,6 +761,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -1058,7 +1066,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param sequence the sequence of values to look for.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -1082,7 +1090,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.19.0
@@ -1114,7 +1122,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -1143,7 +1151,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -1174,7 +1182,6 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param sequence the sequence of values to look for.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -1198,7 +1205,6 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -1230,7 +1236,6 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -1259,7 +1264,6 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -1320,6 +1324,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -1343,6 +1348,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -1371,6 +1377,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -1397,6 +1404,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -1428,6 +1436,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values within the specified precision
    *           with same order, i.e. the actual group contains some or none of the given values, or the actual group contains
    *           more values than the given ones or values are the same but the order is not.
@@ -1457,6 +1466,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values within the specified precision
    *           with same order, i.e. the actual group contains some or none of the given values, or the actual group contains
    *           more values than the given ones or values are the same but the order is not.
@@ -1498,7 +1508,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -1525,7 +1535,7 @@ public abstract class AbstractDoubleArrayAssert<SELF extends AbstractDoubleArray
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleAssert.java
index a918e87bd..315f6ff0c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractDoubleAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractDurationAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractDurationAssert.java
index 8614b84d1..1ce7bf2a9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractDurationAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractDurationAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractEnumerableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractEnumerableAssert.java
index 5a5646a65..a9dbc8c1e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractEnumerableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractEnumerableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractFileAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractFileAssert.java
index ddf299856..9bb6983e6 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractFileAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractFileAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractFileSizeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractFileSizeAssert.java
index c625b965b..249d443b3 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractFileSizeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractFileSizeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatArrayAssert.java
index 0a63329a5..430ca06ae 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -216,7 +216,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -240,7 +240,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -269,7 +269,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -295,7 +295,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -329,7 +329,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -355,7 +355,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -386,7 +386,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -414,7 +414,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -446,7 +446,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -471,7 +471,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -500,7 +500,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
   * @param precision the precision under which the values may vary.
   * @return {@code this} assertion object.
   * @throws NullPointerException if the given argument is {@code null}.
-  * @throws IllegalArgumentException if the given argument is an empty array.
+  * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
   * @throws AssertionError if the actual array is {@code null}.
   * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
   *           or none of the given values, or the actual group contains more than once these values.
@@ -526,7 +526,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -562,6 +562,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(float... sequence) {
@@ -584,6 +585,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -614,6 +616,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(float[] sequence, Offset<Float> precision) {
@@ -641,6 +644,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -674,6 +678,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(float... subsequence) {
@@ -696,6 +701,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -726,6 +732,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(float[] subsequence, Offset<Float> precision) {
@@ -753,6 +760,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -868,7 +876,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array contains any of the given values.
    * @since 3.19.0
@@ -1057,7 +1065,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param sequence the sequence of values to look for.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -1081,7 +1089,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.19.0
@@ -1113,7 +1121,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -1142,7 +1150,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -1173,7 +1181,6 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param sequence the sequence of values to look for.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -1197,7 +1204,6 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -1229,7 +1235,6 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -1258,7 +1263,6 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param precision the precision under which the values may vary.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -1318,6 +1322,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -1341,6 +1346,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -1373,6 +1379,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values within the specified precision
    *           with same order, i.e. the actual group contains some or none of the given values, or the actual group contains
    *           more values than the given ones or values are the same but the order is not.
@@ -1402,6 +1409,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values within the specified precision
    *           with same order, i.e. the actual group contains some or none of the given values, or the actual group contains
    *           more values than the given ones or values are the same but the order is not.
@@ -1428,6 +1436,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -1454,6 +1463,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -1496,7 +1506,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -1523,7 +1533,7 @@ public abstract class AbstractFloatArrayAssert<SELF extends AbstractFloatArrayAs
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatAssert.java
index f7266bdd2..5bd80c40d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractFloatAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractFutureAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractFutureAssert.java
index ff5efd648..d9cfea5c2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractFutureAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractFutureAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -207,7 +207,7 @@ public abstract class AbstractFutureAssert<SELF extends AbstractFutureAssert<SEL
    * assertThat(future).succeedsWithin(timeout);</code></pre>
    *
    * @param timeout the maximum time to wait
-   * @return a new assertion object on the the future's result.
+   * @return a new assertion object on the future's result.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} does not succeed within the given timeout.
    * @since 3.17.0
@@ -253,7 +253,7 @@ public abstract class AbstractFutureAssert<SELF extends AbstractFutureAssert<SEL
    *
    * @param timeout the maximum time to wait
    * @param unit the time unit of the timeout argument
-   * @return a new assertion object on the the future's result.
+   * @return a new assertion object on the future's result.
    * @throws AssertionError if the actual {@code Future} is {@code null}.
    * @throws AssertionError if the actual {@code Future} does not succeed within the given timeout.
    * @since 3.17.0
@@ -264,7 +264,7 @@ public abstract class AbstractFutureAssert<SELF extends AbstractFutureAssert<SEL
 
   /**
    * Waits if necessary for at most the given time for this future to complete, the {@link InstanceOfAssertFactory}
-   * parameter is used to return assertions specific to the the future's result type.
+   * parameter is used to return assertions specific to the future's result type.
    * <p>
    * If the future's result is not available for any reason an assertion error is thrown.
    * <p>
@@ -315,7 +315,7 @@ public abstract class AbstractFutureAssert<SELF extends AbstractFutureAssert<SEL
 
   /**
    * Waits if necessary for at most the given time for this future to complete, the {@link InstanceOfAssertFactory}
-   * parameter is used to return assertions specific to the the future's result type.
+   * parameter is used to return assertions specific to the future's result type.
    * <p>
    * If the future's result is not available for any reason an assertion error is thrown.
    * <p>
@@ -393,7 +393,7 @@ public abstract class AbstractFutureAssert<SELF extends AbstractFutureAssert<SEL
    * assertThat(future).failsWithin(Duration.ofMillis(200));</code></pre>
    *
    * @param timeout the maximum time to wait
-   * @return a new assertion instance on the the future's exception.
+   * @return a new assertion instance on the future's exception.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} succeeds within the given timeout.
    * @since 3.18.0
@@ -433,7 +433,7 @@ public abstract class AbstractFutureAssert<SELF extends AbstractFutureAssert<SEL
    *
    * @param timeout the maximum time to wait
    * @param unit the time unit
-   * @return a new assertion instance on the the future's exception.
+   * @return a new assertion instance on the future's exception.
    * @throws AssertionError if the actual {@code CompletableFuture} is {@code null}.
    * @throws AssertionError if the actual {@code CompletableFuture} succeeds within the given timeout.
    * @since 3.18.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java
index 190d3b095..be3a03cac 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java
@@ -8,16 +8,19 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
 import static java.util.Objects.requireNonNull;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.error.ShouldBeEmpty.shouldBeEmpty;
+import static org.assertj.core.error.ShouldNotBeEmpty.shouldNotBeEmpty;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.UncheckedIOException;
 import java.nio.charset.Charset;
 import java.security.MessageDigest;
 
@@ -132,14 +135,23 @@ public abstract class AbstractInputStreamAssert<SELF extends AbstractInputStream
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given {@code InputStream} is {@code null}.
    * @throws AssertionError if the content of the actual {@code InputStream} is not empty.
-   * @throws InputStreamsException if an I/O error occurs.
+   * @throws UncheckedIOException if an I/O error occurs.
    * @since 3.17.0
    */
   public SELF isEmpty() {
-    inputStreams.assertIsEmpty(info, actual);
+    isNotNull();
+    assertIsEmpty();
     return myself;
   }
 
+  private void assertIsEmpty() {
+    try {
+      if (actual.read() != -1) throw assertionError(shouldBeEmpty(actual));
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
+    }
+  }
+
   /**
    * Verifies that the content of the actual {@code InputStream} is not empty.
    * <p>
@@ -155,14 +167,23 @@ public abstract class AbstractInputStreamAssert<SELF extends AbstractInputStream
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given {@code InputStream} is {@code null}.
    * @throws AssertionError if the content of the actual {@code InputStream} is empty.
-   * @throws InputStreamsException if an I/O error occurs.
+   * @throws UncheckedIOException if an I/O error occurs.
    * @since 3.17.0
    */
   public SELF isNotEmpty() {
-    inputStreams.assertIsNotEmpty(info, actual);
+    isNotNull();
+    assertIsNotEmpty();
     return myself;
   }
 
+  private void assertIsNotEmpty() {
+    try {
+      if (actual.read() == -1) throw assertionError(shouldNotBeEmpty());
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
+    }
+  }
+
   /**
    * Verifies that the content of the actual {@code InputStream} is equal to the given {@code String}.
    * <p>
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractInstantAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractInstantAssert.java
index 149ebd3d3..487cfb693 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractInstantAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractInstantAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractIntArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractIntArrayAssert.java
index ded5ef8bb..a39deff49 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractIntArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractIntArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -190,7 +190,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -215,7 +215,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -242,7 +242,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -268,7 +268,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -295,7 +295,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more than once these values.
@@ -320,7 +320,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -347,6 +347,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(int... sequence) {
@@ -369,6 +370,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -393,6 +395,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(int... subsequence) {
@@ -415,6 +418,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -554,7 +558,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -578,7 +582,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.19.0
@@ -604,7 +608,6 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -628,7 +631,6 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -685,6 +687,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given values with same order, i.e. the actual array
    *           contains some or none of the given values, or the actual array contains more values than the given ones
    *           or values are the same but the order is not.
@@ -708,6 +711,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -736,6 +740,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array
    *           contains some or none of the given values, or the actual array contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -762,6 +767,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -792,7 +798,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -822,7 +828,7 @@ public abstract class AbstractIntArrayAssert<SELF extends AbstractIntArrayAssert
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractIntegerAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractIntegerAssert.java
index 0f6da359d..4a8de91b8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractIntegerAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractIntegerAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableAssert.java
index 540c4de78..872196066 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableSizeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableSizeAssert.java
index 7a2d3329e..89217fb8d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableSizeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractIterableSizeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractIteratorAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractIteratorAssert.java
index fbc20db18..370aff01f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractIteratorAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractIteratorAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractListAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractListAssert.java
index 3328d0a77..ffca6d253 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractListAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractListAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateAssert.java
index 885fe2033..7bcc34f7d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateTimeAssert.java
index 39264e506..91e6acdaa 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalDateTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalTimeAssert.java
index a99cf7352..9b0a25ad8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractLocalTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAdderAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAdderAssert.java
index ba1da5ed7..35cf5d84e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAdderAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAdderAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractLongArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractLongArrayAssert.java
index 17d5c06d9..cec9165a8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractLongArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractLongArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -190,7 +190,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -215,7 +215,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the given {@code Long} array of values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -242,7 +242,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -268,7 +268,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -295,7 +295,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -320,7 +320,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -347,6 +347,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(long... sequence) {
@@ -369,6 +370,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -393,6 +395,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(long... subsequence) {
@@ -415,6 +418,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -554,7 +558,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -578,7 +582,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.19.0
@@ -604,7 +608,6 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -628,7 +631,6 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -685,6 +687,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -710,6 +713,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -738,6 +742,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -764,6 +769,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -794,7 +800,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -824,7 +830,7 @@ public abstract class AbstractLongArrayAssert<SELF extends AbstractLongArrayAsse
    * @param values the array of values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAssert.java
index a1fbafead..b0352a620 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractLongAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractMapAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractMapAssert.java
index abba37245..8e23acff2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractMapAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractMapAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractMapSizeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractMapSizeAssert.java
index 8a4b22f2a..104fa71a6 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractMapSizeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractMapSizeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractMatcherAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractMatcherAssert.java
index 7da3a8271..3cebab7b1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractMatcherAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractMatcherAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java
index c4624c52c..67f36a105 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -346,7 +346,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -391,7 +391,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -559,7 +559,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more than once these values.
@@ -602,6 +602,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given values with same order, i.e. the actual array
    *           contains some or none of the given values, or the actual array contains more values than the given ones
    *           or values are the same but the order is not.
@@ -637,6 +638,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual arrray does not contain the given values, i.e. the actual array
    *           contains some or none of the given values, or the actual array contains more values than the given ones.
    */
@@ -702,6 +704,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @return this assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   @Override
@@ -738,6 +741,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @return this assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty iterable and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   @Override
@@ -1152,7 +1156,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @param sequence the sequence of objects to look for.
    * @return this assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence of objects.
    */
@@ -3832,7 +3836,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -3871,7 +3875,7 @@ public abstract class AbstractObjectArrayAssert<SELF extends AbstractObjectArray
    * @param iterable the iterable whose at least one element is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the iterable of expected values is {@code null}.
-   * @throws IllegalArgumentException if the iterable of expected values is empty and the array under test is not empty.
+   * @throws AssertionError if the iterable of expected values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of elements from the given {@code Iterable}.
    * @since 2.9.0 / 3.9.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
index 84299dcdd..98e08459c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -1096,12 +1096,14 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    * @param from {@link Function} used to acquire the value to test from the object under test. Must not be {@code null}
    * @param <T> the expected value type the given {@code method} returns.
    * @return {@code this} assertion object.
+   * @throws AssertionError if {@code actual} is {@code null}
    * @throws NullPointerException if given {@code from} function is null
    *
    * @see #usingComparatorForType(Comparator, Class)
    */
   public <T> SELF returns(T expected, Function<ACTUAL, T> from) {
     requireNonNull(from, "The given getter method/Function must not be null");
+    isNotNull();
     Objects objects = getComparatorBasedObjectAssertions(expected);
     objects.assertEqual(info, from.apply(actual), expected);
     return myself;
@@ -1125,6 +1127,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    * @param from {@link Function} used to acquire the value to test from the object under test. Must not be {@code null}
    * @param <T> the expected value type the given {@code method} returns.
    * @return {@code this} assertion object.
+   * @throws AssertionError if {@code actual} is {@code null}
    * @throws NullPointerException if given {@code from} function is null
    *
    * @since 3.22.0
@@ -1132,6 +1135,7 @@ public abstract class AbstractObjectAssert<SELF extends AbstractObjectAssert<SEL
    */
   public <T> SELF doesNotReturn(T expected, Function<ACTUAL, T> from) {
     requireNonNull(from, "The given getter method/Function must not be null");
+    isNotNull();
     Objects objects = getComparatorBasedObjectAssertions(expected);
     objects.assertNotEqual(info, from.apply(actual), expected);
     return myself;
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetDateTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetDateTimeAssert.java
index 04a762c23..a3b72512a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetDateTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetDateTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -854,8 +854,8 @@ public abstract class AbstractOffsetDateTimeAssert<SELF extends AbstractOffsetDa
    *                                          .isBetween(parse("2010-01-01T01:00:00+01:00"),
    *                                                     parse("2010-01-01T01:00:00+01:00"));</code></pre>
    *
-   * @param startExclusive the start value (exclusive), expected not to be null.
-   * @param endExclusive the end value (exclusive), expected not to be null.
+   * @param startInclusive the start value (inclusive), expected not to be null.
+   * @param endInclusive the end value (inclusive), expected not to be null.
    * @return this assertion object.
    * @throws AssertionError if the actual value is {@code null}.
    * @throws NullPointerException if start value is {@code null}.
@@ -864,8 +864,8 @@ public abstract class AbstractOffsetDateTimeAssert<SELF extends AbstractOffsetDa
    *
    * @since 3.7.1
    */
-  public SELF isBetween(OffsetDateTime startExclusive, OffsetDateTime endExclusive) {
-    comparables.assertIsBetween(info, actual, startExclusive, endExclusive, true, true);
+  public SELF isBetween(OffsetDateTime startInclusive, OffsetDateTime endInclusive) {
+    comparables.assertIsBetween(info, actual, startInclusive, endInclusive, true, true);
     return myself;
   }
 
@@ -892,8 +892,8 @@ public abstract class AbstractOffsetDateTimeAssert<SELF extends AbstractOffsetDa
    * // assertion fails:
    * assertThat(firstOfJanuary2000).isBetween("1999-01-01T00:00:01Z", "1999-12-31T23:59:59Z");</code></pre>
    *
-   * @param startExclusive the start value (exclusive), expected not to be null.
-   * @param endExclusive the end value (exclusive), expected not to be null.
+   * @param startInclusive the start value (inclusive), expected not to be null.
+   * @param endInclusive the end value (inclusive), expected not to be null.
    * @return this assertion object.
    *
    * @throws AssertionError if the actual value is {@code null}.
@@ -904,8 +904,8 @@ public abstract class AbstractOffsetDateTimeAssert<SELF extends AbstractOffsetDa
    *
    * @since 3.7.1
    */
-  public SELF isBetween(String startExclusive, String endExclusive) {
-    return isBetween(parse(startExclusive), parse(endExclusive));
+  public SELF isBetween(String startInclusive, String endInclusive) {
+    return isBetween(parse(startInclusive), parse(endInclusive));
   }
 
   /**
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetTimeAssert.java
index abab91739..2c3f1b6d3 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractOffsetTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalAssert.java
index edcbcebe6..3e700bbe1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalDoubleAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalDoubleAssert.java
index 40407931c..d255e79bb 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalDoubleAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalDoubleAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalIntAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalIntAssert.java
index 2bf8e54b1..65e8bfe74 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalIntAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalIntAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalLongAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalLongAssert.java
index ad364784f..d8520c759 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalLongAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractOptionalLongAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractPathAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractPathAssert.java
index f5070d0c4..a0d59714f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractPathAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractPathAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractPeriodAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractPeriodAssert.java
index a29df2d43..ac0c6f6e9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractPeriodAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractPeriodAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateAssert.java
index 97f090bba..0da389829 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateLikeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateLikeAssert.java
index bc709df0a..7a56257d0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateLikeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractPredicateLikeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractShortArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractShortArrayAssert.java
index 673e7ca7d..7c78f05bc 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractShortArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractShortArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -191,7 +191,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    */
@@ -216,7 +216,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.19.0
@@ -243,7 +243,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values.
    * @since 3.16.0
@@ -269,7 +269,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -295,7 +295,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -323,7 +323,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not contain the given values, i.e. the actual array contains some
    *           or none of the given values, or the actual array contains more values than the given ones.
@@ -349,7 +349,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -374,7 +374,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -401,7 +401,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the given values.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group contains some
    *           or none of the given values, or the actual group contains more than once these values.
@@ -427,6 +427,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    */
   public SELF containsSequence(short... sequence) {
@@ -449,6 +450,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.19.0
    */
@@ -473,6 +475,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given sequence.
    * @since 3.16.0
    */
@@ -496,6 +499,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    */
   public SELF containsSubsequence(short... subsequence) {
@@ -518,6 +522,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.19.0
    */
@@ -542,6 +547,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return myself assertion object.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the given array is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array does not contain the given subsequence.
    * @since 3.16.0
    */
@@ -755,7 +761,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    */
@@ -779,7 +785,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.19.0
@@ -805,7 +811,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not start with the given sequence.
    * @since 3.16.0
@@ -830,7 +836,6 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    */
@@ -854,7 +859,6 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.19.0
@@ -880,7 +884,6 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param sequence the sequence of values to look for.
    * @return myself assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
-   * @throws IllegalArgumentException if the given argument is an empty array.
    * @throws AssertionError if the actual array is {@code null}.
    * @throws AssertionError if the actual array does not end with the given sequence.
    * @since 3.16.0
@@ -936,6 +939,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -961,6 +965,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -988,6 +993,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values with same order, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones
    *           or values are the same but the order is not.
@@ -1015,6 +1021,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 2.6.0 / 3.6.0
@@ -1041,6 +1048,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.19.0
@@ -1068,6 +1076,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @return {@code this} assertion object.
    * @throws NullPointerException if the given argument is {@code null}.
    * @throws AssertionError if the actual group is {@code null}.
+   * @throws AssertionError if the given argument is an empty array and the actual array is not empty.
    * @throws AssertionError if the actual group does not contain the given values, i.e. the actual group
    *           contains some or none of the given values, or the actual group contains more values than the given ones.
    * @since 3.16.0
@@ -1097,7 +1106,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 2.9.0 / 3.9.0
@@ -1127,7 +1136,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.19.0
@@ -1158,7 +1167,7 @@ public abstract class AbstractShortArrayAssert<SELF extends AbstractShortArrayAs
    * @param values the values whose at least one which is expected to be in the array under test.
    * @return {@code this} assertion object.
    * @throws NullPointerException if the array of values is {@code null}.
-   * @throws IllegalArgumentException if the array of values is empty and the array under test is not empty.
+   * @throws AssertionError if the array of values is empty and the array under test is not empty.
    * @throws AssertionError if the array under test is {@code null}.
    * @throws AssertionError if the array under test does not contain any of the given {@code values}.
    * @since 3.16.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractShortAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractShortAssert.java
index 0b64b03bc..1533fe46d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractShortAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractShortAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractSoftAssertions.java
index 35a104e31..5f2436849 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractSpliteratorAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractSpliteratorAssert.java
index b14931c48..2e0a56e06 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractSpliteratorAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractSpliteratorAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java
index 164f27270..a6a144f41 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -53,7 +53,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    * assertThat(&quot;abc&quot;).isLessThan(&quot;bcd&quot;)
    *                  .isLessThan(&quot;b&quot;)
    *                  .isLessThan(&quot;abca&quot;)
-   *                  .usingComparator(CASE_INSENSITIVE)
+   *                  .usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                  .isLessThan(&quot;BCD&quot;);
    *
    * // assertions fail
@@ -84,7 +84,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    *                  .isLessThanOrEqualTo(&quot;abc&quot;)
    *                  .isLessThanOrEqualTo(&quot;b&quot;)
    *                  .isLessThanOrEqualTo(&quot;abca&quot;)
-   *                  .usingComparator(CASE_INSENSITIVE)
+   *                  .usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                  .isLessThanOrEqualTo(&quot;ABC&quot;);
    *
    * // assertions fail
@@ -113,7 +113,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    * assertThat(&quot;xyz&quot;).isGreaterThan(&quot;abc&quot;)
    *                  .isGreaterThan(&quot;xy&quot;)
    *                  .isGreaterThan(&quot;ABC&quot;);
-   * assertThat(&quot;XYZ&quot;).usingComparator(CASE_INSENSITIVE)
+   * assertThat(&quot;XYZ&quot;).usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                  .isGreaterThan(&quot;abc&quot;);
    *
    * // assertions fail
@@ -144,7 +144,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    *                  .isGreaterThanOrEqualTo(&quot;xyz&quot;)
    *                  .isGreaterThanOrEqualTo(&quot;xy&quot;)
    *                  .isGreaterThanOrEqualTo(&quot;ABC&quot;);
-   * assertThat(&quot;XYZ&quot;).usingComparator(CASE_INSENSITIVE)
+   * assertThat(&quot;XYZ&quot;).usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                  .isGreaterThanOrEqualTo(&quot;abc&quot;);
    *
    * // assertions fail
@@ -175,7 +175,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    *                 .isBetween(&quot;aa&quot;, &quot;ab&quot;)
    *                 .isBetween(&quot;ab&quot;, &quot;ab&quot;)
    *                 .isBetween(&quot;a&quot;, &quot;c&quot;)
-   *                 .usingComparator(CASE_INSENSITIVE)
+   *                 .usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                 .isBetween("AA", "AC");
    *
    * // assertions fail
@@ -206,7 +206,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    * <pre><code class='java'> // assertions succeed
    * assertThat(&quot;ab&quot;).isStrictlyBetween(&quot;aa&quot;, &quot;ac&quot;)
    *                 .isStrictlyBetween(&quot;a&quot;, &quot;c&quot;)
-   *                 .usingComparator(CASE_INSENSITIVE)
+   *                 .usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                 .isStrictlyBetween("AA", "AC");
    *
    * // assertions fail
@@ -314,7 +314,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    * <p>
    * Examples :
    * <pre><code class='java'> // assertions succeed
-   * assertThat(&quot;abc&quot;).usingComparator(CASE_INSENSITIVE)
+   * assertThat(&quot;abc&quot;).usingComparator(String.CASE_INSENSITIVE_ORDER)
    *                  .isEqualTo(&quot;Abc&quot;)
    *                  .isEqualTo(&quot;ABC&quot;);
    *
@@ -339,7 +339,7 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
    * <p>
    * Examples :
    * <pre><code class='java'> // assertions succeed
-   * assertThat(&quot;abc&quot;).usingComparator(CASE_INSENSITIVE, &quot;String case insensitive comparator&quot;)
+   * assertThat(&quot;abc&quot;).usingComparator(String.CASE_INSENSITIVE_ORDER, &quot;String case insensitive comparator&quot;)
    *                  .isEqualTo(&quot;Abc&quot;)
    *                  .isEqualTo(&quot;ABC&quot;);
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractTemporalAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractTemporalAssert.java
index 7945024f5..fac6679c2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractTemporalAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractTemporalAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java
index 7ff37cb26..f4ba2b9a4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractUniversalComparableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractUniversalComparableAssert.java
index 48c2539c3..1ca8af28b 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractUniversalComparableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractUniversalComparableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractUriAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractUriAssert.java
index 4fc0b27eb..52ac881df 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractUriAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractUriAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -64,7 +64,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://helloworld.org/france")).hasNoPath();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a path.
+   * @throws AssertionError if {@code actual} has a path.
    */
   public SELF hasNoPath() {
     uris.assertHasPath(info, actual, null);
@@ -103,7 +103,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://helloworld.org:8080")).hasNoPort();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a port.
+   * @throws AssertionError if {@code actual} has a port.
    */
   public SELF hasNoPort() {
     uris.assertHasPort(info, actual, -1);
@@ -143,7 +143,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://helloworld.org:8080/index.html")).hasNoHost();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if actual has a host.
+   * @throws AssertionError if {@code actual} has a host.
    * @since 3.22.0
    */
   public SELF hasNoHost() {
@@ -203,7 +203,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://helloworld.org:8080/index.html#print")).hasNoFragment();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a fragment.
+   * @throws AssertionError if {@code actual} has a fragment.
    */
   public SELF hasNoFragment() {
     uris.assertHasFragment(info, actual, null);
@@ -241,7 +241,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://www.helloworld.org/index.html?type=test")).hasNoQuery();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a query.
+   * @throws AssertionError if {@code actual} has a query.
    */
   public SELF hasNoQuery() {
     uris.assertHasQuery(info, actual, null);
@@ -300,7 +300,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://test:pass@www.helloworld.org/index.html")).hasNoUserInfo();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has some userinfo.
+   * @throws AssertionError if {@code actual} has some userinfo.
    */
   public SELF hasNoUserInfo() {
     uris.assertHasUserInfo(info, actual, null);
@@ -373,7 +373,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * assertThat(new URI("http://www.helloworld.org/index.html?sad=much")).hasNoParameters();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a parameter.
+   * @throws AssertionError if {@code actual} has a parameter.
    * @throws IllegalArgumentException if the query string contains an invalid escape sequence.
    *
    * @since 2.5.0 / 3.5.0
@@ -398,7 +398,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    *
    * @param name the name of the parameter expected to be absent.
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has the expected parameter.
+   * @throws AssertionError if {@code actual} has the expected parameter.
    * @throws IllegalArgumentException if the query string contains an invalid escape sequence.
    */
   public SELF hasNoParameter(String name) {
@@ -425,7 +425,7 @@ public abstract class AbstractUriAssert<SELF extends AbstractUriAssert<SELF>> ex
    * @param name the name of the parameter expected to be absent.
    * @param value the value of the parameter expected to be absent.
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has the expected parameter.
+   * @throws AssertionError if {@code actual} has the expected parameter.
    * @throws IllegalArgumentException if the query string contains an invalid escape sequence.
    */
   public SELF hasNoParameter(String name, String value) {
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractUrlAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractUrlAssert.java
index da6783891..848e61d39 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractUrlAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractUrlAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -88,7 +88,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * assertThat(new URL("http://helloworld.org/france")).hasNoPath();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a path.
+   * @throws AssertionError if {@code actual} has a path.
    */
   public SELF hasNoPath() {
     urls.assertHasPath(info, actual, "");
@@ -126,7 +126,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * assertThat(new URL("http://helloworld.org:8080")).hasNoPort();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a port.
+   * @throws AssertionError if {@code actual} has a port.
    */
   public SELF hasNoPort() {
     urls.assertHasPort(info, actual, -1);
@@ -226,7 +226,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * assertThat(new URL("http://www.helloworld.org/index.html?type=test")).hasNoQuery();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a query.
+   * @throws AssertionError if {@code actual} has a query.
    */
   public SELF hasNoQuery() {
     urls.assertHasQuery(info, actual, null);
@@ -264,7 +264,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * assertThat(new URL("http://www.helloworld.org/news.html#sport")).hasNoAnchor();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a anchor.
+   * @throws AssertionError if {@code actual} has a anchor.
    */
   public SELF hasNoAnchor() {
     urls.assertHasAnchor(info, actual, null);
@@ -304,7 +304,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * assertThat(new URL("http://test:pass@www.helloworld.org/index.html")).hasNoUserInfo();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has some userinfo.
+   * @throws AssertionError if {@code actual} has some userinfo.
    */
   public SELF hasNoUserInfo() {
     urls.assertHasUserInfo(info, actual, null);
@@ -373,7 +373,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * assertThat(new URL("http://www.helloworld.org/index.html?sad=much")).hasNoParameters();</code></pre>
    *
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has a parameter.
+   * @throws AssertionError if {@code actual} has a parameter.
    * @throws IllegalArgumentException if the query string contains an invalid escape sequence.
    *
    * @since 2.5.0 / 3.5.0
@@ -398,7 +398,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    *
    * @param name the name of the parameter expected to be absent.
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has the expected parameter.
+   * @throws AssertionError if {@code actual} has the expected parameter.
    * @throws IllegalArgumentException if the query string contains an invalid escape sequence.
    *
    * @since 2.5.0 / 3.5.0
@@ -427,7 +427,7 @@ public abstract class AbstractUrlAssert<SELF extends AbstractUrlAssert<SELF>> ex
    * @param name the name of the parameter expected to be absent.
    * @param value the value of the parameter expected to be absent.
    * @return {@code this} assertion object.
-   * @throws AssertionError if the actual has the expected parameter.
+   * @throws AssertionError if {@code actual} has the expected parameter.
    * @throws IllegalArgumentException if the query string contains an invalid escape sequence.
    *
    * @since 2.5.0 / 3.5.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractZonedDateTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractZonedDateTimeAssert.java
index c7a4ddd5b..56936a1c9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractZonedDateTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractZonedDateTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AfterAssertionErrorCollected.java b/assertj-core/src/main/java/org/assertj/core/api/AfterAssertionErrorCollected.java
index 658befd94..cecd2c251 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AfterAssertionErrorCollected.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AfterAssertionErrorCollected.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Array2DAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Array2DAssert.java
index a9cea1331..a723b8ec7 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Array2DAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Array2DAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ArraySortedAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ArraySortedAssert.java
index 17a8c8137..92edd0519 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ArraySortedAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ArraySortedAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Assert.java b/assertj-core/src/main/java/org/assertj/core/api/Assert.java
index 76fb27244..7421f5d22 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Assert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Assert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -448,7 +448,7 @@ public interface Assert<SELF extends Assert<SELF, ACTUAL>, ACTUAL> extends Descr
    *
    * @param other the object to check type against.
    * @return this assertion object.
-   * @throws AssertionError if the actual has not the same type has the given object.
+   * @throws AssertionError if {@code actual} has not the same type as the given object.
    * @throws NullPointerException if the actual value is null.
    * @throws NullPointerException if the given object is null.
    */
@@ -543,7 +543,7 @@ public interface Assert<SELF extends Assert<SELF, ACTUAL>, ACTUAL> extends Descr
    *
    * @param other the object to check type against.
    * @return this assertion object.
-   * @throws AssertionError if the actual has the same type has the given object.
+   * @throws AssertionError if {@code actual} has the same type as the given object.
    * @throws NullPointerException if the actual value is null.
    * @throws NullPointerException if the given object is null.
    */
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertDelegateTarget.java b/assertj-core/src/main/java/org/assertj/core/api/AssertDelegateTarget.java
index 846e16f62..0900b458b 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertDelegateTarget.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertDelegateTarget.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertFactory.java b/assertj-core/src/main/java/org/assertj/core/api/AssertFactory.java
index 9fff32195..f438c4fae 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertJProxySetup.java b/assertj-core/src/main/java/org/assertj/core/api/AssertJProxySetup.java
index 3f7723627..4ebaffb94 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertJProxySetup.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertJProxySetup.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertProvider.java b/assertj-core/src/main/java/org/assertj/core/api/AssertProvider.java
index 5a14c1d62..d7ddf1ce8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertionErrorCollector.java b/assertj-core/src/main/java/org/assertj/core/api/AssertionErrorCollector.java
index bca4497ec..298dcf50e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertionErrorCollector.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertionErrorCollector.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertionInfo.java b/assertj-core/src/main/java/org/assertj/core/api/AssertionInfo.java
index 6606ea503..4c0bb9df2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertionInfo.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertionInfo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Assertions.java b/assertj-core/src/main/java/org/assertj/core/api/Assertions.java
index b08f1df97..9b0bcff16 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Assertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Assertions.java
@@ -8,11 +8,10 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
-import static java.lang.String.format;
 import static org.assertj.core.configuration.ConfigurationProvider.CONFIGURATION_PROVIDER;
 import static org.assertj.core.data.Percentage.withPercentage;
 
@@ -76,7 +75,6 @@ import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
 import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
-import org.assertj.core.api.ThrowableAssert.ThrowingCallableWithValue;
 import org.assertj.core.api.filter.FilterOperator;
 import org.assertj.core.api.filter.Filters;
 import org.assertj.core.api.filter.InFilter;
@@ -98,7 +96,6 @@ import org.assertj.core.data.TemporalUnitWithinOffset;
 import org.assertj.core.description.Description;
 import org.assertj.core.groups.Properties;
 import org.assertj.core.groups.Tuple;
-import org.assertj.core.internal.Failures;
 import org.assertj.core.presentation.BinaryRepresentation;
 import org.assertj.core.presentation.HexadecimalRepresentation;
 import org.assertj.core.presentation.Representation;
@@ -1212,26 +1209,6 @@ public class Assertions implements InstanceOfAssertFactories {
     return assertThat(catchThrowable(shouldRaiseThrowable)).hasBeenThrown();
   }
 
-  /**
-   * Similar to {@link #assertThatThrownBy(ThrowingCallable)}, but when the called code returns a value instead of
-   * throwing, the assertion error shows the returned value to help understand what went wrong.
-   *
-   * @param shouldRaiseThrowable The {@link ThrowingCallableWithValue} or lambda with the code that should raise the throwable.
-   * @return the created {@link ThrowableAssert}.
-   * @since 3.25.0
-   */
-  @CanIgnoreReturnValue
-  public static AbstractThrowableAssert<?, ? extends Throwable> assertThatThrownBy(
-                                                                                   ThrowingCallableWithValue shouldRaiseThrowable) {
-    Object value;
-    try {
-      value = shouldRaiseThrowable.call();
-    } catch (Throwable throwable) {
-      return assertThat(throwable);
-    }
-    throw Failures.instance().failure(format("Expecting code to raise a throwable, but it returned [%s] instead", value));
-  }
-
   /**
    * Allows to capture and then assert on a {@link Throwable} like {@code assertThatThrownBy(ThrowingCallable)} but this method
    * let you set the assertion description the same way you do with {@link AbstractAssert#as(String, Object...) as(String, Object...)}.
@@ -1270,26 +1247,6 @@ public class Assertions implements InstanceOfAssertFactories {
     return assertThat(catchThrowable(shouldRaiseThrowable)).as(description, args).hasBeenThrown();
   }
 
-  /**
-   * Similar to {@link #assertThatThrownBy(ThrowingCallable, String, Object...)}, but when the called code returns a value
-   * instead of throwing, the assertion error shows the returned value to help understand what went wrong.
-   *
-   * @param shouldRaiseThrowable The {@link ThrowingCallableWithValue} or lambda with the code that should raise the throwable.
-   * @return the created {@link ThrowableAssert}.
-   * @since 3.25.0
-   */
-  @CanIgnoreReturnValue
-  public static AbstractThrowableAssert<?, ? extends Throwable> assertThatThrownBy(ThrowingCallableWithValue shouldRaiseThrowable,
-                                                                                   String description, Object... args) {
-    Object value;
-    try {
-      value = shouldRaiseThrowable.call();
-    } catch (Throwable throwable) {
-      return assertThat(throwable).as(description, args);
-    }
-    throw Failures.instance().failure(format("Expecting code to raise a throwable, but it returned [%s] instead", value));
-  }
-
   /**
    * Allows to capture and then assert on a {@link Throwable} (easier done with lambdas).
    * <p>
@@ -2620,6 +2577,21 @@ public class Assertions implements InstanceOfAssertFactories {
     return AllOf.allOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfies(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> allOf(ThrowingConsumer<? super T>... consumers) {
+    return actual -> assertThat(actual).satisfies(consumers);
+  }
+
   /**
    * Only delegate to {@link AnyOf#anyOf(Condition...)} so that Assertions offers a full feature entry point to all
    * AssertJ features (but you can use {@link AnyOf} if you prefer).
@@ -2650,6 +2622,21 @@ public class Assertions implements InstanceOfAssertFactories {
     return AnyOf.anyOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfiesAnyOf(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> anyOf(ThrowingConsumer<? super T>... consumers) {
+    return actual -> assertThat(actual).satisfiesAnyOf(consumers);
+  }
+
   /**
    * Creates a new <code>{@link DoesNotHave}</code>.
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertionsForClassTypes.java b/assertj-core/src/main/java/org/assertj/core/api/AssertionsForClassTypes.java
index 101fe01bc..2b2425194 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertionsForClassTypes.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertionsForClassTypes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssertionsForInterfaceTypes.java b/assertj-core/src/main/java/org/assertj/core/api/AssertionsForInterfaceTypes.java
index 979be062e..b0b417d12 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssertionsForInterfaceTypes.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssertionsForInterfaceTypes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AssumptionExceptionFactory.java b/assertj-core/src/main/java/org/assertj/core/api/AssumptionExceptionFactory.java
index 045fb6b75..81e4de0bc 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AssumptionExceptionFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AssumptionExceptionFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Assumptions.java b/assertj-core/src/main/java/org/assertj/core/api/Assumptions.java
index 3ff4e784f..13ed08294 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Assumptions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Assumptions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicBooleanAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicBooleanAssert.java
index 015d0c33e..bd450c521 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicBooleanAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicBooleanAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerArrayAssert.java
index 42d4c3d72..15d10f086 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerAssert.java
index 902fd237c..947bd5c4f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerFieldUpdaterAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerFieldUpdaterAssert.java
index 51b915f18..342e9c9cd 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerFieldUpdaterAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicIntegerFieldUpdaterAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicLongArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicLongArrayAssert.java
index ce97fc8a7..2067dc573 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicLongArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicLongArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicLongAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicLongAssert.java
index bd61623f5..a7423f4c0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicLongAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicLongAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicLongFieldUpdaterAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicLongFieldUpdaterAssert.java
index abac39e7b..7d45d90d0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicLongFieldUpdaterAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicLongFieldUpdaterAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicMarkableReferenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicMarkableReferenceAssert.java
index e67aa6a01..eb869c6fb 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicMarkableReferenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicMarkableReferenceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java
index 1c746d192..7e32ae422 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceAssert.java
index 41fcaab96..bdcefe0be 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceFieldUpdaterAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceFieldUpdaterAssert.java
index 960181675..88be080e9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceFieldUpdaterAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicReferenceFieldUpdaterAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AtomicStampedReferenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AtomicStampedReferenceAssert.java
index d3aa21322..c5106ae35 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AtomicStampedReferenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AtomicStampedReferenceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableBDDSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableBDDSoftAssertions.java
index 93580b483..b3411439d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableBDDSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableBDDSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertions.java
index 9045c316a..7d6148012 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertionsProvider.java b/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertionsProvider.java
index aaf3c62fb..df505dbc1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertionsProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AutoCloseableSoftAssertionsProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java
index c09a11d69..ee84813bf 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java
@@ -8,12 +8,10 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
-import static java.lang.String.format;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -74,7 +72,6 @@ import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
 import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
-import org.assertj.core.api.ThrowableAssert.ThrowingCallableWithValue;
 import org.assertj.core.api.filter.FilterOperator;
 import org.assertj.core.api.filter.InFilter;
 import org.assertj.core.api.filter.NotFilter;
@@ -92,7 +89,6 @@ import org.assertj.core.data.TemporalUnitOffset;
 import org.assertj.core.description.Description;
 import org.assertj.core.groups.Properties;
 import org.assertj.core.groups.Tuple;
-import org.assertj.core.internal.Failures;
 import org.assertj.core.presentation.BinaryRepresentation;
 import org.assertj.core.presentation.HexadecimalRepresentation;
 import org.assertj.core.presentation.Representation;
@@ -1334,25 +1330,6 @@ public class BDDAssertions extends Assertions {
     return assertThat(catchThrowable(shouldRaiseThrowable)).hasBeenThrown();
   }
 
-  /**
-   * Similar to {@link #thenThrownBy(ThrowingCallable)}, but when the called code returns a value instead of
-   * throwing, the assertion error shows the returned value to help understand what went wrong.
-   *
-   * @param shouldRaiseThrowable The {@link ThrowingCallableWithValue} or lambda with the code that should raise the throwable.
-   * @return the created {@link ThrowableAssert}.
-   * @since 3.25.0
-   */
-  @CanIgnoreReturnValue
-  public static AbstractThrowableAssert<?, ? extends Throwable> thenThrownBy(ThrowingCallableWithValue shouldRaiseThrowable) {
-    Object value;
-    try {
-      value = shouldRaiseThrowable.call();
-    } catch (Throwable throwable) {
-      return assertThat(throwable);
-    }
-    throw Failures.instance().failure(format("Expecting code to raise a throwable, but it returned [%s] instead", value));
-  }
-
   /**
    * Allows to capture and then assert on a {@link Throwable} like {@code thenThrownBy(ThrowingCallable)} but this method
    * let you set the assertion description the same way you do with {@link AbstractAssert#as(String, Object...) as(String, Object...)}.
@@ -1390,26 +1367,6 @@ public class BDDAssertions extends Assertions {
     return assertThat(catchThrowable(shouldRaiseThrowable)).as(description, args).hasBeenThrown();
   }
 
-  /**
-   * Similar to {@link #thenThrownBy(ThrowingCallable, String, Object...)}, but when the called code returns a value instead of
-   * throwing, the assertion error shows the returned value to help understand what went wrong.
-   *
-   * @param shouldRaiseThrowable The {@link ThrowingCallableWithValue} or lambda with the code that should raise the throwable.
-   * @return the created {@link ThrowableAssert}.
-   * @since 3.25.0
-   */
-  @CanIgnoreReturnValue
-  public static AbstractThrowableAssert<?, ? extends Throwable> thenThrownBy(ThrowingCallableWithValue shouldRaiseThrowable,
-                                                                             String description, Object... args) {
-    Object value;
-    try {
-      value = shouldRaiseThrowable.call();
-    } catch (Throwable throwable) {
-      return assertThat(throwable).as(description, args);
-    }
-    throw Failures.instance().failure(format("Expecting code to raise a throwable, but it returned [%s] instead", value));
-  }
-
   /**
    * Allows to capture and then assert on a {@link Throwable} more easily when used with Java 8 lambdas.
    *
@@ -3149,6 +3106,21 @@ public class BDDAssertions extends Assertions {
     return Assertions.allOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfies(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> allOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.allOf(consumers);
+  }
+
   /**
    * Only delegate to {@link AnyOf#anyOf(Condition...)} so that Assertions offers a full feature entry point to all
    * AssertJ features (but you can use {@link AnyOf} if you prefer).
@@ -3183,6 +3155,21 @@ public class BDDAssertions extends Assertions {
     return Assertions.anyOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfiesAnyOf(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> anyOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.anyOf(consumers);
+  }
+
   /**
    * Creates a new <code>{@link DoesNotHave}</code>.
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BDDAssumptions.java b/assertj-core/src/main/java/org/assertj/core/api/BDDAssumptions.java
index b26447ea2..60d036760 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BDDAssumptions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BDDAssumptions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -2405,7 +2405,7 @@ public final class BDDAssumptions extends Assumptions {
    *   // ...
    *}</code></pre>
    *
-   * @param <OBJECT> the type of the object holding the updatable field which gets updated by the the actual value.
+   * @param <OBJECT> the type of the object holding the updatable field which gets updated by the actual value.
    * @param actual the actual {@link AtomicIntegerFieldUpdater} value to be validated.
    * @return the {@link AtomicIntegerFieldUpdaterAssert} assertion object to be used for assumptions.
    * @since 3.14.0
@@ -2532,7 +2532,7 @@ public final class BDDAssumptions extends Assumptions {
    *   // ...
    *}</code></pre>
    *
-   * @param <OBJECT> the type of the object holding the updatable field which gets updated by the the actual value.
+   * @param <OBJECT> the type of the object holding the updatable field which gets updated by the actual value.
    * @param actual the actual {@link AtomicLongFieldUpdater} value to be validated.
    * @return the {@link AtomicLongFieldUpdaterAssert} assertion object to be used for assumptions.
    * @since 3.14.0
@@ -2632,8 +2632,8 @@ public final class BDDAssumptions extends Assumptions {
    *   // ...
    *}</code></pre>
    *
-   * @param <FIELD> the type of the field which gets updated by the the actual updater.
-   * @param <OBJECT> the type of the object holding the updatable field which gets updated by the the actual updater.
+   * @param <FIELD> the type of the field which gets updated by the actual updater.
+   * @param <OBJECT> the type of the object holding the updatable field which gets updated by the actual updater.
    * @param actual the actual {@link AtomicReferenceFieldUpdater} value to be validated.
    * @return the {@link AtomicReferenceFieldUpdaterAssert} assertion object to be used for assumptions.
    * @since 3.14.0
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertions.java
index d8d4eebd2..e668b04ca 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertionsProvider.java b/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertionsProvider.java
index 2121f8021..cc921f5b6 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertionsProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BDDSoftAssertionsProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BigDecimalAssert.java b/assertj-core/src/main/java/org/assertj/core/api/BigDecimalAssert.java
index 1165cf2d3..ed52c0577 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BigDecimalAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BigDecimalAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BigDecimalScaleAssert.java b/assertj-core/src/main/java/org/assertj/core/api/BigDecimalScaleAssert.java
index e2f0f35d3..a909ab66f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BigDecimalScaleAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BigDecimalScaleAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BigIntegerAssert.java b/assertj-core/src/main/java/org/assertj/core/api/BigIntegerAssert.java
index 1b433c13b..c8923211c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BigIntegerAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BigIntegerAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Boolean2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Boolean2DArrayAssert.java
index 0c8f3b937..83487b29f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Boolean2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Boolean2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BooleanArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/BooleanArrayAssert.java
index 18ad47760..7e431bdc2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BooleanArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BooleanArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BooleanAssert.java b/assertj-core/src/main/java/org/assertj/core/api/BooleanAssert.java
index 1d0fe961d..6d3fc1d74 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BooleanAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BooleanAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Byte2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Byte2DArrayAssert.java
index 88828d172..badb6e0fe 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Byte2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Byte2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ByteArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ByteArrayAssert.java
index 72aa168c1..ecf152ec9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ByteArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ByteArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ByteAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ByteAssert.java
index 5b9a3d65e..7ae9ac331 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ByteAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ByteAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Char2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Char2DArrayAssert.java
index 0b5d1441c..4ad88585b 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Char2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Char2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -190,7 +190,7 @@ public class Char2DArrayAssert extends Abstract2DArrayAssert<Char2DArrayAssert,
   }
 
   /**
-   * Verifies that the actual {@code char[][]} has the the given dimensions.
+   * Verifies that the actual {@code char[][]} has the given dimensions.
    * <p>
    * Example:
    * <pre><code class='java'> // assertion will pass
diff --git a/assertj-core/src/main/java/org/assertj/core/api/CharArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/CharArrayAssert.java
index 0bce9e60f..c2c92c645 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/CharArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/CharArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/CharSequenceAssert.java b/assertj-core/src/main/java/org/assertj/core/api/CharSequenceAssert.java
index 6f464f0f8..90a350805 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/CharSequenceAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/CharSequenceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/CharacterAssert.java b/assertj-core/src/main/java/org/assertj/core/api/CharacterAssert.java
index 0fd1e14e3..616d8a580 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/CharacterAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/CharacterAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ClassAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ClassAssert.java
index a81d022ca..80e3cb407 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ClassAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ClassAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableIterableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableIterableAssert.java
index 7604b497c..ee0419b4d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableIterableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableIterableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableListAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableListAssert.java
index 0f4fc1579..41d843458 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableListAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ClassBasedNavigableListAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java b/assertj-core/src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java
index 1767cdc93..3c32ec15f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/CollectionAssert.java b/assertj-core/src/main/java/org/assertj/core/api/CollectionAssert.java
index 780a7b78a..7a9b83bc4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/CollectionAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/CollectionAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ComparableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ComparableAssert.java
index 1a6e2c11a..09b7c2de8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ComparableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ComparableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ComparatorFactory.java b/assertj-core/src/main/java/org/assertj/core/api/ComparatorFactory.java
index 5a11f0100..fced9f4d4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ComparatorFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ComparatorFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/CompletableFutureAssert.java b/assertj-core/src/main/java/org/assertj/core/api/CompletableFutureAssert.java
index f24bc4074..7ed302d41 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/CompletableFutureAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/CompletableFutureAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Condition.java b/assertj-core/src/main/java/org/assertj/core/api/Condition.java
index cfd742227..c61d4de2e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Condition.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Condition.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/DateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/DateAssert.java
index ac501beca..13cae9a4b 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/DateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/DateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/DefaultAssertionErrorCollector.java b/assertj-core/src/main/java/org/assertj/core/api/DefaultAssertionErrorCollector.java
index 80d70405f..7091a74da 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/DefaultAssertionErrorCollector.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/DefaultAssertionErrorCollector.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Descriptable.java b/assertj-core/src/main/java/org/assertj/core/api/Descriptable.java
index fa3429058..917683626 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Descriptable.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Descriptable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Double2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Double2DArrayAssert.java
index 79e50a870..0bd893738 100755
--- a/assertj-core/src/main/java/org/assertj/core/api/Double2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Double2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/DoubleArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/DoubleArrayAssert.java
index ea9ec8fbc..78dc3c240 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/DoubleArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/DoubleArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/DoubleAssert.java b/assertj-core/src/main/java/org/assertj/core/api/DoubleAssert.java
index cbf5da12f..1f11fa65a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/DoubleAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/DoubleAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/DoublePredicateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/DoublePredicateAssert.java
index 4c4036b7d..a86a487e0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/DoublePredicateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/DoublePredicateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/DurationAssert.java b/assertj-core/src/main/java/org/assertj/core/api/DurationAssert.java
index 4e0626bc7..04c6cd39d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/DurationAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/DurationAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/EnumerableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/EnumerableAssert.java
index 995fd8795..f85a28d7c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/EnumerableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/EnumerableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ErrorCollector.java b/assertj-core/src/main/java/org/assertj/core/api/ErrorCollector.java
index e585b6caf..8f339da2d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ErrorCollector.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ErrorCollector.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ExtensionPoints.java b/assertj-core/src/main/java/org/assertj/core/api/ExtensionPoints.java
index b7829eeb3..fbeb539a4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ExtensionPoints.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ExtensionPoints.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableIterableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableIterableAssert.java
index baac27964..cd2af1904 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableIterableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableIterableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableListAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableListAssert.java
index 8148c2ad0..9b93e0f8c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableListAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FactoryBasedNavigableListAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Fail.java b/assertj-core/src/main/java/org/assertj/core/api/Fail.java
index f42df8b2c..5c7510b58 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Fail.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Fail.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FileAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FileAssert.java
index aec95b17a..62240724e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FileAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FileAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FileSizeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FileSizeAssert.java
index df1bbf124..f6bef4341 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FileSizeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FileSizeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Float2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Float2DArrayAssert.java
index 329ce9010..3295c2326 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Float2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Float2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FloatArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FloatArrayAssert.java
index 796ce2817..c51b8939a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FloatArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FloatArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FloatAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FloatAssert.java
index bd97c4e83..0cf8f2604 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FloatAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FloatAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FloatingPointNumberAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FloatingPointNumberAssert.java
index 654b43c91..13ccc8fd9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FloatingPointNumberAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FloatingPointNumberAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/FutureAssert.java b/assertj-core/src/main/java/org/assertj/core/api/FutureAssert.java
index fc661ad81..4dc444d26 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/FutureAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/FutureAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/GenericComparableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/GenericComparableAssert.java
index 10a203f51..d1651a34e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/GenericComparableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/GenericComparableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/HamcrestCondition.java b/assertj-core/src/main/java/org/assertj/core/api/HamcrestCondition.java
index e9edd4b68..28f4313e0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/HamcrestCondition.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/HamcrestCondition.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IndexedObjectEnumerableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IndexedObjectEnumerableAssert.java
index 5acfbc698..d3bd69d1e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IndexedObjectEnumerableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IndexedObjectEnumerableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/InputStreamAssert.java b/assertj-core/src/main/java/org/assertj/core/api/InputStreamAssert.java
index 522b75c98..487f8abf2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/InputStreamAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/InputStreamAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java b/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java
index 19e61bf37..22e484398 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactory.java b/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactory.java
index 4e71ae088..5fa996f16 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/InstanceOfAssertFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/InstantAssert.java b/assertj-core/src/main/java/org/assertj/core/api/InstantAssert.java
index 4f982a8e2..298d7dfce 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/InstantAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/InstantAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Int2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Int2DArrayAssert.java
index 72112318b..5c4675731 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Int2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Int2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IntArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IntArrayAssert.java
index 66e291176..6daa4b798 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IntArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IntArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IntPredicateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IntPredicateAssert.java
index 5a12516bf..56244b355 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IntPredicateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IntPredicateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IntegerAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IntegerAssert.java
index ff364b192..bf25e5717 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IntegerAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IntegerAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IterableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IterableAssert.java
index f99095511..877534357 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IterableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IterableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IterableSizeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IterableSizeAssert.java
index 4d4cbd380..2a16581d7 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IterableSizeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IterableSizeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/IteratorAssert.java b/assertj-core/src/main/java/org/assertj/core/api/IteratorAssert.java
index f9ae4d227..e25e1636f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/IteratorAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/IteratorAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/JUnitBDDSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/JUnitBDDSoftAssertions.java
index e8f1fc78c..34027b0e1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/JUnitBDDSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/JUnitBDDSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterBDDSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterBDDSoftAssertions.java
index f6100da2b..043d43ec4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterBDDSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterBDDSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterSoftAssertions.java
index 55c7bd5cd..1c3792309 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/JUnitJupiterSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/JUnitSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/JUnitSoftAssertions.java
index 8a6b6b286..e4b4f04ab 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/JUnitSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/JUnitSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6Assertions.java b/assertj-core/src/main/java/org/assertj/core/api/Java6Assertions.java
index 34ce04035..34c5d54c3 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6Assertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6Assertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6BDDAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/Java6BDDAssertions.java
index 1ad69f142..2f9d68298 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6BDDAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6BDDAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertions.java
index 7cf1a991f..1039770a8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertionsProvider.java b/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertionsProvider.java
index 26aa42c2e..f196604e9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertionsProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6BDDSoftAssertionsProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitBDDSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitBDDSoftAssertions.java
index 8b9e27876..d0d28cbdb 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitBDDSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitBDDSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitSoftAssertions.java
index b8a90823d..82a030577 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6JUnitSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6SoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/Java6SoftAssertions.java
index 4d3ecefd1..5521212ae 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6SoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6SoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Java6StandardSoftAssertionsProvider.java b/assertj-core/src/main/java/org/assertj/core/api/Java6StandardSoftAssertionsProvider.java
index 82a02ec04..4175feb50 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Java6StandardSoftAssertionsProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Java6StandardSoftAssertionsProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ListAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ListAssert.java
index 914b2e04b..cdac23d90 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ListAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ListAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LocalDateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LocalDateAssert.java
index 8e0f8b803..4e9aa4f26 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LocalDateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LocalDateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LocalDateTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LocalDateTimeAssert.java
index 8bc486541..7f891f795 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LocalDateTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LocalDateTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LocalTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LocalTimeAssert.java
index b52c27a7e..5da092351 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LocalTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LocalTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Long2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Long2DArrayAssert.java
index 560ff0681..a495058c8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Long2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Long2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LongAdderAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LongAdderAssert.java
index a2d1b037a..13e67fb33 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LongAdderAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LongAdderAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LongArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LongArrayAssert.java
index d87830047..04a840004 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LongArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LongArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LongAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LongAssert.java
index 64af85060..46e404d73 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LongAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LongAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/LongPredicateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/LongPredicateAssert.java
index 83c8afe1f..6b24b94f2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/LongPredicateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/LongPredicateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/MapAssert.java b/assertj-core/src/main/java/org/assertj/core/api/MapAssert.java
index 9682fd1cb..aa3ad7ff9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/MapAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/MapAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/MapSizeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/MapSizeAssert.java
index adef31bce..c29d67060 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/MapSizeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/MapSizeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/MatcherAssert.java b/assertj-core/src/main/java/org/assertj/core/api/MatcherAssert.java
index 3149dad17..ff5884688 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/MatcherAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/MatcherAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/NotThrownAssert.java b/assertj-core/src/main/java/org/assertj/core/api/NotThrownAssert.java
index 92367a694..47c95aa09 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/NotThrownAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/NotThrownAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/NumberAssert.java b/assertj-core/src/main/java/org/assertj/core/api/NumberAssert.java
index f34cfe1ec..3e708a1da 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/NumberAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/NumberAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Object2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Object2DArrayAssert.java
index d6a805264..19da91972 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Object2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Object2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -192,7 +192,7 @@ public class Object2DArrayAssert<ELEMENT> extends
   }
 
   /**
-   * Verifies that the actual {@code ELEMENT[][]} has the the given dimensions.
+   * Verifies that the actual {@code ELEMENT[][]} has the given dimensions.
    * <p>
    * Example:
    * <pre><code class='java'> // assertion will pass
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ObjectArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ObjectArrayAssert.java
index f8a752efb..2c70ee5ec 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ObjectArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ObjectArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ObjectAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ObjectAssert.java
index e35a980e5..c9fd9685b 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ObjectAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ObjectAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ObjectAssertFactory.java b/assertj-core/src/main/java/org/assertj/core/api/ObjectAssertFactory.java
index fb4a03c01..ee0e1bc3d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ObjectAssertFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ObjectAssertFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java
index cfa4b1844..06f624ac2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/OffsetDateTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/OffsetDateTimeAssert.java
index 55cf2e8ab..dfbff3bb9 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/OffsetDateTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/OffsetDateTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/OffsetTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/OffsetTimeAssert.java
index 9e52352e1..7cb417434 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/OffsetTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/OffsetTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/OptionalAssert.java b/assertj-core/src/main/java/org/assertj/core/api/OptionalAssert.java
index 6169ae0e0..f92235eb1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/OptionalAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/OptionalAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/OptionalDoubleAssert.java b/assertj-core/src/main/java/org/assertj/core/api/OptionalDoubleAssert.java
index 39caa3afb..cbdf59242 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/OptionalDoubleAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/OptionalDoubleAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/OptionalIntAssert.java b/assertj-core/src/main/java/org/assertj/core/api/OptionalIntAssert.java
index bb61be664..38278a23e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/OptionalIntAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/OptionalIntAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/OptionalLongAssert.java b/assertj-core/src/main/java/org/assertj/core/api/OptionalLongAssert.java
index 3f2511a21..81357215f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/OptionalLongAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/OptionalLongAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/PathAssert.java b/assertj-core/src/main/java/org/assertj/core/api/PathAssert.java
index 4a1b8bc05..0d61e7873 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/PathAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/PathAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/PeriodAssert.java b/assertj-core/src/main/java/org/assertj/core/api/PeriodAssert.java
index 6c3ace0d1..be654e70a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/PeriodAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/PeriodAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/PredicateAssert.java b/assertj-core/src/main/java/org/assertj/core/api/PredicateAssert.java
index fa87dca1e..eb4b4efac 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/PredicateAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/PredicateAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ProxifyMethodChangingTheObjectUnderTest.java b/assertj-core/src/main/java/org/assertj/core/api/ProxifyMethodChangingTheObjectUnderTest.java
index 05dff8ab4..20e264471 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ProxifyMethodChangingTheObjectUnderTest.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ProxifyMethodChangingTheObjectUnderTest.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/RecursiveAssertionAssert.java b/assertj-core/src/main/java/org/assertj/core/api/RecursiveAssertionAssert.java
index 0bc884a10..7fd9ab2ca 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/RecursiveAssertionAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/RecursiveAssertionAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java b/assertj-core/src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java
index 8e38e003e..9bb4cb18a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -494,16 +494,17 @@ public class RecursiveComparisonAssert<SELF extends RecursiveComparisonAssert<SE
   /**
    * Makes the recursive comparison to only compare given actual fields of the specified types and their subfields (no other fields will be compared).
    * <p>
-   * Specifying a field of type will make all its subfields to be compared, for example specifying the {@code Person} type will
+   * Specifying a compared type will make any fields of this type and its subfields to be compared, for example specifying the {@code Person} type will
    * lead to compare {@code Person.name}, {@code Person.address} and all other {@code Person} fields.<br>
    * In case actual's field is null, expected's field type will be checked to match one of the given types (we assume actual and expected fields have the same type).
    * <p>
-   * {@code ", "} can be combined with {@link #comparingOnlyFields(String...)} to compare fields of the given types <b>or</b> names (union of both sets of fields).
+   * {@code comparingOnlyFieldsOfTypes} can be combined with {@link #comparingOnlyFields(String...)} to compare fields of the given types <b>or</b> names (union of both sets of fields).
    * <p>
-   * {@code ", "} can be also combined with ignoring fields or compare only fields by name methods to restrict further the fields actually compared,
+   * {@code comparingOnlyFieldsOfTypes} can be also combined with ignoring fields to restrict further the fields actually compared,
    * the resulting compared fields = {specified compared fields of types} {@code -} {specified ignored fields}.<br>
-   * For example if the specified compared fields of types = {@code {String.class, Integer.class, Double.class}}, when there are fields  String foo, {@code Integer baz} and {@code Double bar}
-   * and the ignored fields = {"bar"} set with {@link RecursiveComparisonAssert#ignoringFields(String...)} that will remove {@code bar} field from comparison, then only {@code {foo, baz}} fields will be compared.
+   * For example, we specify the following compared types: {@code {String.class, Integer.class, Double.class}}, and the
+   * object to compare has fields {@code String foo}, {@code Integer baz} and {@code Double bar},
+   * if we ignore the {"bar"} field with {@link RecursiveComparisonAssert#ignoringFields(String...)} the comparison will only report differences on {@code {foo, baz}} fields..
    * <p>
    * Usage example:
    * <pre><code class='java'> class Person {
@@ -532,12 +533,12 @@ public class RecursiveComparisonAssert<SELF extends RecursiveComparisonAssert<SE
    *
    * // assertion succeeds as it only compared fields height and home.address.number since their types match compared types
    * assertThat(sherlock).usingRecursiveComparison()
-   *                     .", "(Integer.class, Double.class)
+   *                     .comparingOnlyFieldsOfTypes(Integer.class, Double.class)
    *                     .isEqualTo(moriarty);
    *
    * // assertion fails as home.address.street fields differ (Home fields and its subfields were compared)
    * assertThat(sherlock).usingRecursiveComparison()
-   *                     .", "(Home.class)
+   *                     .comparingOnlyFieldsOfTypes(Home.class)
    *                     .isEqualTo(moriarty);</code></pre>
    * <p>
    * Note that the recursive comparison checks whether the fields actually exist and throws an {@link IllegalArgumentException} if some of them don't,
diff --git a/assertj-core/src/main/java/org/assertj/core/api/Short2DArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/Short2DArrayAssert.java
index 0b06347ce..48d660197 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Short2DArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Short2DArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ShortArrayAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ShortArrayAssert.java
index 6a8007248..e3597667a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ShortArrayAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ShortArrayAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ShortAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ShortAssert.java
index 4c91c454a..af457cf01 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ShortAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ShortAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionError.java b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionError.java
index 11885f0a4..4eee37d77 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionError.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionError.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertions.java
index 498f1f90e..112028d15 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsProvider.java b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsProvider.java
index cb5ab641f..c7f8194c6 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsRule.java b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsRule.java
index 731b8853c..377fcdd19 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsRule.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsRule.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsStatement.java b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsStatement.java
index 4e99d2128..733e9f236 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsStatement.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftAssertionsStatement.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftProxies.java b/assertj-core/src/main/java/org/assertj/core/api/SoftProxies.java
index 3e743e38f..ab684ed60 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftProxies.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftProxies.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableAssertAlternative.java b/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableAssertAlternative.java
index 19b7f61ee..5d8cf1f4c 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableAssertAlternative.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableAssertAlternative.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableTypeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableTypeAssert.java
index 2f9eb3e60..de8259821 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableTypeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SoftThrowableTypeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/SpliteratorAssert.java b/assertj-core/src/main/java/org/assertj/core/api/SpliteratorAssert.java
index 89bd5c36e..311d68cc8 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/SpliteratorAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/SpliteratorAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java b/assertj-core/src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java
index a46f62444..6bca1bbb5 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/StringAssert.java b/assertj-core/src/main/java/org/assertj/core/api/StringAssert.java
index 071eeaee8..faf9925eb 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/StringAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/StringAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssert.java
index 569c292ad..9d6b9057f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -33,10 +33,6 @@ public class ThrowableAssert<ACTUAL extends Throwable> extends AbstractThrowable
     void call() throws Throwable;
   }
 
-  public interface ThrowingCallableWithValue {
-    Object call() throws Throwable;
-  }
-
   public ThrowableAssert(ACTUAL actual) {
     super(actual, ThrowableAssert.class);
   }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssertAlternative.java b/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssertAlternative.java
index b5b047941..5907200c4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssertAlternative.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ThrowableAssertAlternative.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ThrowableTypeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ThrowableTypeAssert.java
index e3251598a..792a49c92 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ThrowableTypeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ThrowableTypeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java b/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java
index 721c781e2..874f26b58 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -17,7 +17,8 @@ import java.util.function.Consumer;
 /**
  * {@link Consumer} that deals with checked exceptions by rethrowing them as {@link RuntimeException}.
  * <p>
- * More precisely, {@link RuntimeException} and {@link AssertionError} are rethrown as they are while any other {@link Throwable} are rethrown as {@link RuntimeException}. 
+ * More precisely, {@link RuntimeException} and {@link AssertionError} are rethrown as they are,
+ * while any other {@link Throwable} is wrapped in a {@link RuntimeException} and rethrown.
  *
  * @param <T> consumed type
  */
@@ -36,4 +37,5 @@ public interface ThrowingConsumer<T> extends Consumer<T> {
   }
 
   void acceptThrows(T input) throws Throwable;
+
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/UniversalComparableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/UniversalComparableAssert.java
index 82dc5cf3f..752fb0b50 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/UniversalComparableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/UniversalComparableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/UriAssert.java b/assertj-core/src/main/java/org/assertj/core/api/UriAssert.java
index ba76ab287..616647c49 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/UriAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/UriAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/UrlAssert.java b/assertj-core/src/main/java/org/assertj/core/api/UrlAssert.java
index 06ea04f32..a2aabc0a7 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/UrlAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/UrlAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java
index b0457e3b0..23458bcff 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
@@ -238,6 +238,21 @@ public interface WithAssertions extends InstanceOfAssertFactories {
     return Assertions.allOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfies(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SuppressWarnings("unchecked")
+  default <T> ThrowingConsumer<T> allOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.allOf(consumers);
+  }
+
   /**
    * Creates a new instance of <code>{@link ObjectArrayAssert}</code>.
    *
@@ -1966,6 +1981,21 @@ public interface WithAssertions extends InstanceOfAssertFactories {
     return Assertions.anyOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfiesAnyOf(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SuppressWarnings("unchecked")
+  default <T> ThrowingConsumer<T> anyOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.anyOf(consumers);
+  }
+
   /**
    * Creates a new <code>{@link DoesNotHave}</code>.
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/api/WithAssumptions.java b/assertj-core/src/main/java/org/assertj/core/api/WithAssumptions.java
index 8e33dc42e..33df72914 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/WithAssumptions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/WithAssumptions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/WithThrowable.java b/assertj-core/src/main/java/org/assertj/core/api/WithThrowable.java
index c2ee51ea6..21668dd5d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/WithThrowable.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/WithThrowable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/WritableAssertionInfo.java b/assertj-core/src/main/java/org/assertj/core/api/WritableAssertionInfo.java
index 40984dc24..460b2eeb5 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/WritableAssertionInfo.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/WritableAssertionInfo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ZonedDateTimeAssert.java b/assertj-core/src/main/java/org/assertj/core/api/ZonedDateTimeAssert.java
index 3362f5db5..92109a0b6 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ZonedDateTimeAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ZonedDateTimeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/exception/PathsException.java b/assertj-core/src/main/java/org/assertj/core/api/exception/PathsException.java
index a19871027..7af4a7828 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/exception/PathsException.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/exception/PathsException.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.exception;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/filter/FilterOperator.java b/assertj-core/src/main/java/org/assertj/core/api/filter/FilterOperator.java
index 296960ea3..4dd462d37 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/filter/FilterOperator.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/filter/FilterOperator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.filter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/filter/Filters.java b/assertj-core/src/main/java/org/assertj/core/api/filter/Filters.java
index 57c09f026..48ed7f765 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/filter/Filters.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/filter/Filters.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.filter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/filter/InFilter.java b/assertj-core/src/main/java/org/assertj/core/api/filter/InFilter.java
index a30340737..ba21d1b89 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/filter/InFilter.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/filter/InFilter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.filter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/filter/NotFilter.java b/assertj-core/src/main/java/org/assertj/core/api/filter/NotFilter.java
index cc75f787b..1b379ccd1 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/filter/NotFilter.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/filter/NotFilter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.filter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/filter/NotInFilter.java b/assertj-core/src/main/java/org/assertj/core/api/filter/NotInFilter.java
index d7e215fed..bfb69b90d 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/filter/NotInFilter.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/filter/NotInFilter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.filter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/iterable/Extractor.java b/assertj-core/src/main/java/org/assertj/core/api/iterable/Extractor.java
index 25fddd828..61018c9a0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/iterable/Extractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/iterable/Extractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.iterable;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/iterable/ThrowingExtractor.java b/assertj-core/src/main/java/org/assertj/core/api/iterable/ThrowingExtractor.java
index b36309207..f5735b1d2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/iterable/ThrowingExtractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/iterable/ThrowingExtractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.iterable;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/InjectSoftAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/InjectSoftAssertions.java
index a797ad0c5..a15940ca7 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/InjectSoftAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/InjectSoftAssertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.junit.jupiter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension.java b/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension.java
index 04c844612..2eb7f3c57 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.junit.jupiter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftlyExtension.java b/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftlyExtension.java
index 8b10df88f..de81053ee 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftlyExtension.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/junit/jupiter/SoftlyExtension.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.junit.jupiter;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/AbstractRecursiveOperationConfiguration.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/AbstractRecursiveOperationConfiguration.java
index e9c4c5db2..44ab11d1f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/AbstractRecursiveOperationConfiguration.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/AbstractRecursiveOperationConfiguration.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive;
 
@@ -175,12 +175,13 @@ public abstract class AbstractRecursiveOperationConfiguration {
   }
 
   public boolean matchesAnIgnoredFieldRegex(FieldLocation fieldLocation) {
-    return getIgnoredFieldsRegexes().stream()
-                                    .anyMatch(regex -> regex.matcher(fieldLocation.getPathToUseInRules()).matches());
+    // checks parent fields as if a parent field is ignored all subfields (including this field location) should be too.
+    return getIgnoredFieldsRegexes().stream().anyMatch(fieldLocation::hierarchyMatchesRegex);
   }
 
   public boolean matchesAnIgnoredField(FieldLocation fieldLocation) {
-    return getIgnoredFields().stream().anyMatch(fieldLocation::matches);
+    // checks parent fields as if a parent field is ignored all subfields (including this field location) should be too.
+    return getIgnoredFields().stream().anyMatch(fieldLocation::hierarchyMatches);
   }
 
   private String describeIgnoredFields() {
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/DefaultRecursiveAssertionIntrospectionStrategy.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/DefaultRecursiveAssertionIntrospectionStrategy.java
index 162d78331..1adbeaa7f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/DefaultRecursiveAssertionIntrospectionStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/DefaultRecursiveAssertionIntrospectionStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.assertion;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionConfiguration.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionConfiguration.java
index ce435d8df..ffda55e33 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionConfiguration.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionConfiguration.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.assertion;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver.java
index 4b8e00018..e376eb2a0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.assertion;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionIntrospectionStrategy.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionIntrospectionStrategy.java
index 0f92aafd7..8b40899e5 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionIntrospectionStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionIntrospectionStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.assertion;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionNode.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionNode.java
index 2fe43b614..15a2b38e2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionNode.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionNode.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.assertion;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingFields.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingFields.java
index 0bff80f90..d07004e2e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingFields.java
@@ -8,15 +8,16 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
-import static org.assertj.core.internal.Objects.getFieldsNames;
-
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
+import org.assertj.core.internal.Objects;
 import org.assertj.core.util.introspection.FieldSupport;
 
 /**
@@ -27,9 +28,13 @@ public class ComparingFields implements RecursiveComparisonIntrospectionStrategy
 
   public static final ComparingFields COMPARING_FIELDS = new ComparingFields();
 
+  // use ConcurrentHashMap in case this strategy instance is used in a multi-thread context
+  private final Map<Class<?>, Set<String>> fieldNamesPerClass = new ConcurrentHashMap<>();
+
   @Override
   public Set<String> getChildrenNodeNamesOf(Object node) {
-    return node == null ? new HashSet<>() : getFieldsNames(node.getClass());
+    if (node == null) return new HashSet<>();
+    return fieldNamesPerClass.computeIfAbsent(node.getClass(), Objects::getFieldsNames);
   }
 
   @Override
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingNormalizedFields.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingNormalizedFields.java
index da128c278..4fefd64f3 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingNormalizedFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingNormalizedFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -21,6 +21,7 @@ import java.util.HashSet;
 import java.util.IdentityHashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.assertj.core.internal.Objects;
 import org.assertj.core.util.introspection.IntrospectionError;
@@ -41,6 +42,9 @@ public abstract class ComparingNormalizedFields implements RecursiveComparisonIn
   // original field name <-> normalized field name by node
   private final Map<Object, Map<String, String>> originalFieldNamesByNormalizedFieldNameByNode = new IdentityHashMap<>();
 
+  // use ConcurrentHashMap in case this strategy instance is used in a multi-thread context
+  private final Map<Class<?>, Set<String>> fieldNamesPerClass = new ConcurrentHashMap<>();
+
   /**
    * Returns the <b>normalized</b> names of the children nodes of the given object that will be used in the recursive comparison.
    * <p>
@@ -55,7 +59,10 @@ public abstract class ComparingNormalizedFields implements RecursiveComparisonIn
     Set<String> fieldsNames = Objects.getFieldsNames(node.getClass());
     // we normalize fields so that we can compare actual and expected, for example if actual has a firstName field and expected
     // a first_name field, we won't find firstName in expected unless we normalize it
-    return fieldsNames.stream().map(fieldsName -> normalize(node, fieldsName)).collect(toSet());
+    return fieldNamesPerClass.computeIfAbsent(node.getClass(),
+                                              unused -> fieldsNames.stream()
+                                                                   .map(fieldsName -> normalize(node, fieldsName))
+                                                                   .collect(toSet()));
   }
 
   /**
@@ -124,15 +131,22 @@ public abstract class ComparingNormalizedFields implements RecursiveComparisonIn
     try {
       return COMPARISON.getSimpleValue(fieldName, instance);
     } catch (Exception e) {
-      String originalFieldName = originalFieldNamesByNormalizedFieldNameByNode.get(instance).get(fieldName);
+      String originalFieldName = getOriginalFieldName(fieldName, instance);
       try {
         return COMPARISON.getSimpleValue(originalFieldName, instance);
       } catch (Exception ex) {
-        throw new IntrospectionError(format(NO_FIELD_FOUND, instance, fieldName, originalFieldName, ex));
+        throw new IntrospectionError(format(NO_FIELD_FOUND, instance, fieldName, originalFieldName), ex);
       }
     }
   }
 
+  private String getOriginalFieldName(String fieldName, Object instance) {
+    // call getChildrenNodeNamesOf to populate originalFieldNamesByNormalizedFieldNameByNode, the recursive comparison
+    // should already do this if this is used outside then getChildNodeValue would fail
+    if (!originalFieldNamesByNormalizedFieldNameByNode.containsKey(instance)) getChildrenNodeNamesOf(instance);
+    return originalFieldNamesByNormalizedFieldNameByNode.get(instance).get(fieldName);
+  }
+
   @Override
   public String getDescription() {
     return "comparing normalized fields";
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingProperties.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingProperties.java
index a90a92c0e..3e12c4835 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingProperties.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingProperties.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -21,7 +21,9 @@ import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
+import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.assertj.core.util.introspection.PropertySupport;
 
@@ -36,9 +38,13 @@ public class ComparingProperties implements RecursiveComparisonIntrospectionStra
   private static final String GET_PREFIX = "get";
   private static final String IS_PREFIX = "is";
 
+  // use ConcurrentHashMap in case this strategy instance is used in a multi-thread context
+  private final Map<Class<?>, Set<String>> propertiesNamesPerClass = new ConcurrentHashMap<>();
+
   @Override
   public Set<String> getChildrenNodeNamesOf(Object node) {
-    return node == null ? new HashSet<>() : getPropertiesNamesOf(node.getClass());
+    if (node == null) return new HashSet<>();
+    return propertiesNamesPerClass.computeIfAbsent(node.getClass(), ComparingProperties::getPropertiesNamesOf);
   }
 
   @Override
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingSnakeOrCamelCaseFields.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingSnakeOrCamelCaseFields.java
index 75b6b614d..c3da3c6f4 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingSnakeOrCamelCaseFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparingSnakeOrCamelCaseFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonDifference.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonDifference.java
index 516d80df9..b80e09fb0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonDifference.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonDifference.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonKeyDifference.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonKeyDifference.java
index a9a385d55..e7e41ee61 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonKeyDifference.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/ComparisonKeyDifference.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DefaultRecursiveComparisonIntrospectionStrategy.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DefaultRecursiveComparisonIntrospectionStrategy.java
index 77b13af74..9640a4b4f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DefaultRecursiveComparisonIntrospectionStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DefaultRecursiveComparisonIntrospectionStrategy.java
@@ -8,11 +8,10 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
-import static org.assertj.core.internal.Objects.getFieldsNames;
 import static org.assertj.core.util.introspection.PropertyOrFieldSupport.COMPARISON;
 
 import java.util.HashSet;
@@ -20,6 +19,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.assertj.core.internal.Objects;
 import org.assertj.core.util.introspection.PropertyOrFieldSupport;
 
 /**
@@ -31,16 +31,14 @@ import org.assertj.core.util.introspection.PropertyOrFieldSupport;
 public class DefaultRecursiveComparisonIntrospectionStrategy implements RecursiveComparisonIntrospectionStrategy {
 
   // use ConcurrentHashMap in case this strategy instance is used in a multi-thread context
-  private final Map<Class<?>, Set<String>> fieldsNamesPerClass = new ConcurrentHashMap<>();
+  private final Map<Class<?>, Set<String>> fieldNamesPerClass = new ConcurrentHashMap<>();
 
   @Override
   public Set<String> getChildrenNodeNamesOf(Object node) {
     if (node == null) return new HashSet<>();
-    // Caches the node names after getting them for efficiency, a node can be introspected multiple times if for example
+    // Caches the names after getting them for efficiency, a node can be introspected multiple times for example if
     // it belongs to an unordered collection as all actual elements are compared to all expected elements.
-    Class<?> nodeClass = node.getClass();
-    fieldsNamesPerClass.computeIfAbsent(nodeClass, unused -> getFieldsNames(nodeClass));
-    return fieldsNamesPerClass.get(nodeClass);
+    return fieldNamesPerClass.computeIfAbsent(node.getClass(), Objects::getFieldsNames);
   }
 
   @Override
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java
index 6bde4f1ba..1a275bc13 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValueDeque.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValueDeque.java
index e2f22ab30..75803a4b5 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValueDeque.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/DualValueDeque.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -28,13 +28,13 @@ class DualValueDeque extends LinkedList<DualValue> {
 
   @Override
   public boolean add(DualValue dualKey) {
-    if (shouldIgnore(dualKey)) return false;
+    if (shouldNotEvaluate(dualKey)) return false;
     return super.add(dualKey);
   }
 
   @Override
   public void add(int index, DualValue dualKey) {
-    if (shouldIgnore(dualKey)) return;
+    if (shouldNotEvaluate(dualKey)) return;
     super.add(index, dualKey);
   }
 
@@ -45,22 +45,31 @@ class DualValueDeque extends LinkedList<DualValue> {
 
   @Override
   public void addFirst(DualValue dualKey) {
-    if (shouldIgnore(dualKey)) return;
+    if (shouldNotEvaluate(dualKey)) return;
     super.addFirst(dualKey);
   }
 
   @Override
   public void addLast(DualValue dualKey) {
-    if (shouldIgnore(dualKey)) return;
+    if (shouldNotEvaluate(dualKey)) return;
     super.addLast(dualKey);
   }
 
-  private boolean shouldIgnore(DualValue dualKey) {
-    return recursiveComparisonConfiguration.shouldIgnore(dualKey);
+  /**
+   * Decides whether the value needs to evaluated, note that we need to evaluate all values if we have
+   * compared types registered as a value could have fields of type to compare.
+   * <p>
+   * For example if we want to compare Employee in a Company, we need to evaluate company as it holds a list of Employee.
+   *
+   * @param dualValue the value to check
+   * @return true if we want to register the value for evaluation, false otherwise
+   */
+  private boolean shouldNotEvaluate(DualValue dualValue) {
+    return recursiveComparisonConfiguration.shouldNotEvaluate(dualValue);
   }
 
   private boolean shouldAddDualKey(DualValue dualKey) {
-    return !shouldIgnore(dualKey);
+    return !shouldNotEvaluate(dualKey);
   }
 
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldComparators.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldComparators.java
index ecf0bb7c2..509d25c9f 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldComparators.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldComparators.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldHolder.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldHolder.java
index 4a77e326f..52475f1b2 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldHolder.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldHolder.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldLocation.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldLocation.java
index 3167a2992..7e28ded4e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldLocation.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldLocation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -16,11 +16,13 @@ import static java.util.Collections.emptyList;
 import static java.util.Collections.unmodifiableList;
 import static java.util.Objects.requireNonNull;
 import static java.util.stream.Collectors.joining;
+import static java.util.stream.Collectors.toList;
 import static org.assertj.core.util.Lists.list;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
+import java.util.regex.Pattern;
 
 /**
  * Represents the path to a given field. Immutable
@@ -31,24 +33,105 @@ public final class FieldLocation implements Comparable<FieldLocation> {
 
   private final String pathToUseInRules;
   private final List<String> decomposedPath;
+  private final List<String> pathsHierarchyToUseInRules;
 
   public FieldLocation(List<String> path) {
     decomposedPath = unmodifiableList(requireNonNull(path, "path cannot be null"));
     pathToUseInRules = pathToUseInRules(decomposedPath);
+    pathsHierarchyToUseInRules = pathsHierarchyToUseInRules();
   }
 
   public FieldLocation(String s) {
     this(list(s.split("\\.")));
   }
 
-  public boolean matches(FieldLocation field) {
-    return pathToUseInRules.equals(field.pathToUseInRules);
+  public boolean exactlyMatches(FieldLocation field) {
+    return exactlyMatches(field.pathToUseInRules);
   }
 
-  public boolean matches(String fieldPath) {
+  public boolean exactlyMatches(String fieldPath) {
     return pathToUseInRules.equals(fieldPath);
   }
 
+  /**
+   * Reruns true if it exactly matches this field, false otherwise.
+   *
+   * @param fieldPath field path to check
+   * @return true if it exactly matches this field, false otherwise
+   * @deprecated use {@link #exactlyMatches(String)} instead.
+   */
+  @Deprecated
+  public boolean matches(String fieldPath) {
+    return exactlyMatches(fieldPath);
+  }
+
+  /**
+   * Reruns true if it exactly matches this field, false otherwise.
+   *
+   * @param field field to check
+   * @return true if it exactly matches this field, false otherwise
+   * @deprecated use {@link #exactlyMatches(String)} instead.
+   */
+  @Deprecated
+  public boolean matches(FieldLocation field) {
+    return exactlyMatches(field);
+  }
+
+  /**
+   * Checks whether this fieldLocation or any of its parents matches the given fieldPath.
+   * <p>
+   * Examples:
+   * <pre><code class='java'>
+   * | fieldLocation       | fieldPath    | matches?
+   * -----------------------------------------------
+   * | name.first          | "name"       | true
+   * | name.first.nickname | "name"       | true
+   * | name.first          | "name.first" | true
+   * | name.first.nickname | "name.first" | true
+   * | name                | "name"       | true
+   * | name                | "name.first" | false
+   * | person.name         | "name"       | false
+   * | names               | "name"       | false
+   * | nickname            | "name"       | false
+   * | name                | "nickname"   | false
+   * | first.nickname      | "name"       | false
+   * </code></pre>
+   *
+   * @param fieldPath the field path to test
+   * @return true if this fieldLocation is the given fieldPath or a child of it, false otherwise.
+   */
+  public boolean hierarchyMatches(String fieldPath) {
+    return pathsHierarchyToUseInRules.contains(fieldPath);
+  }
+
+  /**
+   * Checks whether this fieldLocation or any of its parents matches the given regex.
+   * <p>
+   * Examples:
+   * <pre><code class='java'>
+   * | fieldLocation       | regex        | matches?
+   * -----------------------------------------------
+   * | name.first          | "name"       | true
+   * | name.first          | "..me"       | true
+   * | name.first.nickname | "name"       | true
+   * | name.first          | "name.first" | true
+   * | name.first.nickname | "name.first" | true
+   * | name                | "name"       | true
+   * | name                | "name.first" | false
+   * | person.name         | "name"       | false
+   * | names               | "name"       | false
+   * | nickname            | "name"       | false
+   * | name                | "nickname"   | false
+   * | first.nickname      | "name"       | false
+   * </code></pre>
+   *
+   * @param regex the regex to test
+   * @return true this fieldLocation or any of its parent matches the given regex., false otherwise.
+   */
+  public boolean hierarchyMatchesRegex(Pattern regex) {
+    return pathsHierarchyToUseInRules.stream().anyMatch(path -> regex.matcher(path).matches());
+  }
+
   public List<String> getDecomposedPath() {
     return decomposedPath;
   }
@@ -74,12 +157,13 @@ public final class FieldLocation implements Comparable<FieldLocation> {
     if (!(obj instanceof FieldLocation)) return false;
     FieldLocation that = (FieldLocation) obj;
     return Objects.equals(pathToUseInRules, that.pathToUseInRules)
-           && Objects.equals(decomposedPath, that.decomposedPath);
+           && Objects.equals(decomposedPath, that.decomposedPath)
+           && Objects.equals(pathsHierarchyToUseInRules, that.pathsHierarchyToUseInRules);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(pathToUseInRules, decomposedPath);
+    return Objects.hash(pathToUseInRules, decomposedPath, pathsHierarchyToUseInRules);
   }
 
   @Override
@@ -126,7 +210,8 @@ public final class FieldLocation implements Comparable<FieldLocation> {
    * Returns true if this has the given parent (direct or indirect), false otherwise.
    * <p>
    * Examples:
-   * <pre><code class='java'> | field                 | parent       | hasParent? 
+   * <pre><code class='java'>
+   * | field                 | parent       | hasParent?
    * -----------------------------------------------  
    * | "name.first"          | "name"       | true       
    * | "name.first.nickname" | "name"       | true       
@@ -171,4 +256,21 @@ public final class FieldLocation implements Comparable<FieldLocation> {
     return child.hasParent(this);
   }
 
+  private List<String> pathsHierarchyToUseInRules() {
+    List<FieldLocation> fieldAndParentFields = list();
+    FieldLocation currentLocation = this;
+    while (!currentLocation.isRoot()) {
+      fieldAndParentFields.add(currentLocation);
+      currentLocation = currentLocation.parent();
+    }
+    return fieldAndParentFields.stream()
+                               .map(fieldLocation -> fieldLocation.pathToUseInRules)
+                               .collect(toList());
+  }
+
+  private FieldLocation parent() {
+    List<String> parentPath = new ArrayList<>(decomposedPath);
+    parentPath.remove(decomposedPath.size() - 1);
+    return new FieldLocation(parentPath);
+  }
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldMessages.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldMessages.java
index 087e8c543..db9fb01fb 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldMessages.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/FieldMessages.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparator.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparator.java
index 1d2ad19a0..991be3b3e 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -20,11 +20,8 @@ import java.util.List;
 /**
  * {@code Comparator} comparing objects recursively as in {@link org.assertj.core.api.RecursiveComparisonAssert}.
  * <p>
- * This comparator does not enforce any ordering, it just returns zero if
- * the compared objects are equals according the recursive comparison,
- * or a non-zero value otherwise.
- * <p>
- * This comparator honors the {@link RecursiveComparisonConfiguration} passed at construction time.
+ * This comparator does not enforce any ordering and returns zero if the compared objects are equals,
+ * according to the recursive comparison, or a non-zero value otherwise.
  *
  * @since 3.24.0
  */
@@ -34,10 +31,21 @@ public class RecursiveComparator implements Comparator<Object> {
   private final RecursiveComparisonDifferenceCalculator recursiveComparisonDifferenceCalculator;
 
   /**
-   * Returns a new {@code RecursiveComparator} that uses the given {@link RecursiveComparisonConfiguration} when comparing
-   * objects with the recursive comparison.
+   * Returns a new {@code RecursiveComparator} that uses the default {@link RecursiveComparisonConfiguration}
+   * when comparing objects with the recursive comparison.
    *
-   * @param recursiveComparisonConfiguration the used {@code RecursiveComparisonConfiguration}
+   * @since 3.25.0
+   */
+  public RecursiveComparator() {
+    this.recursiveComparisonConfiguration = new RecursiveComparisonConfiguration();
+    this.recursiveComparisonDifferenceCalculator = new RecursiveComparisonDifferenceCalculator();
+  }
+
+  /**
+   * Returns a new {@code RecursiveComparator} that uses the given {@link RecursiveComparisonConfiguration}
+   * when comparing objects with the recursive comparison.
+   *
+   * @param recursiveComparisonConfiguration the {@code RecursiveComparisonConfiguration} instance to be used
    */
   public RecursiveComparator(RecursiveComparisonConfiguration recursiveComparisonConfiguration) {
     this.recursiveComparisonConfiguration = recursiveComparisonConfiguration;
@@ -48,6 +56,11 @@ public class RecursiveComparator implements Comparator<Object> {
     return recursiveComparisonDifferenceCalculator.determineDifferences(actual, expected, recursiveComparisonConfiguration);
   }
 
+  public String getDescription() {
+    return format("RecursiveComparator a comparator based on the recursive comparison with the following configuration:%n%s",
+                  recursiveComparisonConfiguration);
+  }
+
   /**
    * Returns zero if the arguments are recursively equal to each other, or non-zero otherwise (no ordering enforced).
    *
@@ -63,9 +76,4 @@ public class RecursiveComparator implements Comparator<Object> {
     return -1;
   }
 
-  public String getDescription() {
-    return format("RecursiveComparator a comparator based on the recursive comparison with the following configuration:%n%s",
-                  recursiveComparisonConfiguration);
-  }
-
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java
index cdbb79c5b..46a992bed 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -83,8 +83,12 @@ public class RecursiveComparisonConfiguration extends AbstractRecursiveOperation
   private FieldMessages fieldMessages = new FieldMessages();
 
   // track field locations of fields of type to compare, needed to compare child nodes
-  // for example if we want to compare Person type, we must compare Person fields too event thought they are not of type Person
-  private final Set<FieldLocation> fieldLocationOfFieldsOfTypesToCompare = new LinkedHashSet<>();
+  // for example if we want to compare Person type, we must compare Person fields too event though they are not of type Person
+  private final Set<FieldLocation> fieldLocationsToCompareBecauseOfTypesToCompare = new LinkedHashSet<>();
+
+  public void registerFieldLocationToCompareBecauseOfTypesToCompare(FieldLocation fieldLocation) {
+    fieldLocationsToCompareBecauseOfTypesToCompare.add(fieldLocation);
+  }
 
   private RecursiveComparisonIntrospectionStrategy introspectionStrategy = DEFAULT_RECURSIVE_COMPARISON_INTROSPECTION_STRATEGY;
 
@@ -679,20 +683,23 @@ public class RecursiveComparisonConfiguration extends AbstractRecursiveOperation
     return description.toString();
   }
 
+  boolean shouldNotEvaluate(DualValue dualValue) {
+    // if we have some compared types, we can't discard any values since they could have fields we need to compare.
+    if (!comparedTypes.isEmpty()) return false;
+    return shouldIgnore(dualValue);
+  }
+
   boolean shouldIgnore(DualValue dualValue) {
-    return !shouldBeCompared(dualValue)
-           || shouldIgnoreFieldBasedOnFieldLocation(dualValue.fieldLocation)
+    return shouldIgnoreFieldBasedOnFieldLocation(dualValue.fieldLocation)
            || shouldIgnoreFieldBasedOnFieldValue(dualValue);
   }
 
   private boolean shouldBeCompared(DualValue dualValue) {
-    // empty comparedFields and comparedTypes <=> no restriction on compared fields <=> must be compared
+    // no comparedFields and comparedTypes <=> no restriction on compared fields => everything must be compared
     if (comparedFields.isEmpty() && comparedTypes.isEmpty()) return true;
-    return shouldBeComparedBasedOnFieldLocation(dualValue.fieldLocation) || shouldBeComparedBasedOnFieldValue(dualValue);
-  }
-
-  private boolean shouldBeComparedBasedOnFieldLocation(FieldLocation fieldLocation) {
-    return comparedFields.stream().anyMatch(matchesComparedField(fieldLocation));
+    // if we have compared types, we can't ignore any values since they could have fields of types to compare
+    if (!comparedTypes.isEmpty()) return true;
+    return comparedFields.stream().anyMatch(matchesComparedField(dualValue.fieldLocation));
   }
 
   private static Predicate<FieldLocation> matchesComparedField(FieldLocation field) {
@@ -700,13 +707,20 @@ public class RecursiveComparisonConfiguration extends AbstractRecursiveOperation
     // - "name.first" must be compared if "name" is a compared field so will other "name" subfields like "name.last"
     // - "name" must be compared if "name.first" is a compared field otherwise "name" is ignored and "name.first" too
     return comparedField -> field.isRoot() // always compare root!
-                            || field.matches(comparedField) // exact match
+                            || field.exactlyMatches(comparedField)
                             || field.hasParent(comparedField) // ex: field "name.first" and "name" compared field
                             || field.hasChild(comparedField); // ex: field "name" and "name.first" compared field
   }
 
   Set<String> getActualChildrenNodeNamesToCompare(DualValue dualValue) {
     Set<String> actualChildrenNodeNames = getChildrenNodeNamesOf(dualValue.actual);
+    // if we have some compared types, we can't discard any nodes since they could have fields we need to compare.
+    // we could evaluate the whole graphs to figure that but that would be bad performance wise so add everything
+    // and exclude later on any differences that were on fields not to compare
+    if (!comparedTypes.isEmpty()) {
+      registerFieldLocationOfFieldsOfTypesToCompare(dualValue);
+      return actualChildrenNodeNames;
+    }
     // we are doing the same as shouldIgnore(DualValue dualValue) but in two steps for performance reasons:
     // - we filter first ignored nodes by names that don't need building DualValues
     // - then we filter field DualValues with the remaining criteria that need to get the node value
@@ -889,7 +903,7 @@ public class RecursiveComparisonConfiguration extends AbstractRecursiveOperation
   }
 
   private boolean matchesAnIgnoredOverriddenEqualsField(FieldLocation fieldLocation) {
-    return ignoredOverriddenEqualsForFields.stream().anyMatch(fieldLocation::matches)
+    return ignoredOverriddenEqualsForFields.stream().anyMatch(fieldLocation::exactlyMatches)
            || matchesAnIgnoredOverriddenEqualsRegex(fieldLocation);
   }
 
@@ -914,21 +928,18 @@ public class RecursiveComparisonConfiguration extends AbstractRecursiveOperation
     return false;
   }
 
-  private boolean shouldBeComparedBasedOnFieldValue(DualValue dualValue) {
-    // first check if the value has a parent of a type we need to compare, ex: we compare Person types and the value is
-    // corresponds to one of the Person fields. If this is not the case, we check actual type against the types
-    // to compare, we use expected type in case actual was null assuming expected has the same type as actual
-    if (fieldLocationOfFieldsOfTypesToCompare.stream().anyMatch(dualValue.fieldLocation::hasParent)
-        || (dualValue.actual != null && comparedTypes.contains(dualValue.actual.getClass()))
+  private void registerFieldLocationOfFieldsOfTypesToCompare(DualValue dualValue) {
+    if (comparedTypes.isEmpty()) return;
+    // We check actual type against the types to compare or expected type in case actual was null assuming expected
+    // has the same type as actual
+    if ((dualValue.actual != null && comparedTypes.contains(dualValue.actual.getClass()))
         || (dualValue.expected != null && comparedTypes.contains(dualValue.expected.getClass()))) {
-      fieldLocationOfFieldsOfTypesToCompare.add(dualValue.fieldLocation);
-      return true;
+      fieldLocationsToCompareBecauseOfTypesToCompare.add(dualValue.fieldLocation);
     }
-    return false;
   }
 
   private boolean matchesAnIgnoredCollectionOrderInField(FieldLocation fieldLocation) {
-    return ignoredCollectionOrderInFields.stream().anyMatch(fieldLocation::matches);
+    return ignoredCollectionOrderInFields.stream().anyMatch(fieldLocation::exactlyMatches);
   }
 
   private boolean matchesAnIgnoredCollectionOrderInFieldRegex(FieldLocation fieldLocation) {
@@ -1099,6 +1110,29 @@ public class RecursiveComparisonConfiguration extends AbstractRecursiveOperation
         : format("{%s in %s}", unknownNodeNameElement, fieldLocation);
   }
 
+  boolean hierarchyMatchesAnyComparedTypes(DualValue dualValue) {
+    if (isFieldOfTypeToCompare(dualValue)) return true;
+    // dualValue is not a type to compare but could be a child of one
+    return fieldLocationsToCompareBecauseOfTypesToCompare.stream().anyMatch(dualValue.fieldLocation::hasParent);
+  }
+
+  boolean matchesOrIsChildOfFieldMatchingAnyComparedTypes(DualValue dualValue) {
+    return fieldLocationsToCompareBecauseOfTypesToCompare.stream().anyMatch(dualValue.fieldLocation::exactlyMatches);
+  }
+
+  boolean hasComparedTypes() {
+    return !comparedTypes.isEmpty();
+  }
+
+  private boolean isFieldOfTypeToCompare(DualValue dualValue) {
+    Object valueToCheck = dualValue.actual != null ? dualValue.actual : dualValue.expected;
+    return valueToCheck != null && comparedTypes.contains(valueToCheck.getClass());
+  }
+
+  boolean exactlyMatchesAnyComparedFields(DualValue dualValue) {
+    return comparedFields.stream().anyMatch(comparedField -> comparedField.exactlyMatches(dualValue.fieldLocation));
+  }
+
   /**
    * Builder to build {@link RecursiveComparisonConfiguration}.
    */
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonDifferenceCalculator.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonDifferenceCalculator.java
index 023f112e6..c5f0ac957 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonDifferenceCalculator.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonDifferenceCalculator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
@@ -89,6 +89,22 @@ public class RecursiveComparisonDifferenceCalculator {
     }
 
     void addDifference(DualValue dualValue, String description) {
+      // to evaluate differences on fields of compared types, we have to traverse the whole graph of objects to compare
+      // and decide afterward if differences were relevant, for example if we compare only the Employee type, and we
+      // come across a Company having a list of Employee, we should evaluate the Company but ignore any of its
+      // differences unless the ones on Employees.
+      if (recursiveComparisonConfiguration.hasComparedTypes()) {
+        // the comparison includes the union of fields of compared types and compared fields, if the difference is
+        // reported on a field whose type is not in the compared types, we should ignore the difference unless it was
+        // on a field from the set of compared fields.
+        if (!recursiveComparisonConfiguration.exactlyMatchesAnyComparedFields(dualValue)
+            && !recursiveComparisonConfiguration.matchesOrIsChildOfFieldMatchingAnyComparedTypes(dualValue))
+          // was not a field we had to compared
+          return;
+        // check if the value was meant to be ignored, if it is the case simply skip the difference
+        if (recursiveComparisonConfiguration.shouldIgnore(dualValue)) return;
+      }
+
       String customErrorMessage = getCustomErrorMessage(dualValue);
       ComparisonDifference comparisonDifference = new ComparisonDifference(dualValue, description, customErrorMessage);
       differences.add(comparisonDifference);
@@ -118,7 +134,9 @@ public class RecursiveComparisonDifferenceCalculator {
     }
 
     private void initDualValuesToCompare(Object actual, Object expected, FieldLocation nodeLocation) {
+      // before anything are these values to be compared at all?
       DualValue dualValue = new DualValue(nodeLocation, actual, expected);
+      if (recursiveComparisonConfiguration.shouldNotEvaluate(dualValue)) return;
       boolean mustCompareNodesRecursively = mustCompareNodesRecursively(dualValue);
       if (dualValue.hasNoNullValues() && mustCompareNodesRecursively) {
         // disregard the equals method and start comparing fields
@@ -219,6 +237,12 @@ public class RecursiveComparisonDifferenceCalculator {
     while (comparisonState.hasDualValuesToCompare()) {
 
       final DualValue dualValue = comparisonState.pickDualValueToCompare();
+      if (recursiveComparisonConfiguration.hierarchyMatchesAnyComparedTypes(dualValue)) {
+        // keep track of field locations of type to compare, needed to compare child nodes, for example if we want to
+        // only compare the Person type, we must compare the Person fields too even though they are not of type Person
+        recursiveComparisonConfiguration.registerFieldLocationToCompareBecauseOfTypesToCompare(dualValue.fieldLocation);
+      }
+
       // if we have already visited the dual value, no need to compute the comparison differences again, this also avoid cycles
       Optional<List<ComparisonDifference>> comparisonDifferences = comparisonState.visitedDualValues.registeredComparisonDifferencesOf(dualValue);
       if (comparisonDifferences.isPresent()) {
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonIntrospectionStrategy.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonIntrospectionStrategy.java
index 0feb6abfa..01f7af164 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonIntrospectionStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonIntrospectionStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/VisitedDualValues.java b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/VisitedDualValues.java
index 85d1670ec..b9ed01128 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/VisitedDualValues.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/recursive/comparison/VisitedDualValues.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.api.recursive.comparison;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/AllOf.java b/assertj-core/src/main/java/org/assertj/core/condition/AllOf.java
index 7fa86ffb7..3c5b0095e 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/AllOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/AllOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/AnyOf.java b/assertj-core/src/main/java/org/assertj/core/condition/AnyOf.java
index 2c61eec1e..1a3efe23c 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/AnyOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/AnyOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/DoesNotHave.java b/assertj-core/src/main/java/org/assertj/core/condition/DoesNotHave.java
index 2665f7b5d..3590e72a7 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/DoesNotHave.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/DoesNotHave.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/Join.java b/assertj-core/src/main/java/org/assertj/core/condition/Join.java
index 6650a5ac1..92b537d5e 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/Join.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/Join.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/MappedCondition.java b/assertj-core/src/main/java/org/assertj/core/condition/MappedCondition.java
index ac88f97b4..72887c419 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/MappedCondition.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/MappedCondition.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/Negative.java b/assertj-core/src/main/java/org/assertj/core/condition/Negative.java
index bc7f02f98..905d97bd9 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/Negative.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/Negative.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/NestableCondition.java b/assertj-core/src/main/java/org/assertj/core/condition/NestableCondition.java
index 846d983af..566a5c635 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/NestableCondition.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/NestableCondition.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/Not.java b/assertj-core/src/main/java/org/assertj/core/condition/Not.java
index 0d763aa4c..a92862158 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/Not.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/Not.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/condition/VerboseCondition.java b/assertj-core/src/main/java/org/assertj/core/condition/VerboseCondition.java
index 45c4af8b2..978158cd4 100644
--- a/assertj-core/src/main/java/org/assertj/core/condition/VerboseCondition.java
+++ b/assertj-core/src/main/java/org/assertj/core/condition/VerboseCondition.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.condition;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/configuration/Configuration.java b/assertj-core/src/main/java/org/assertj/core/configuration/Configuration.java
index 4c239954b..921f90d69 100644
--- a/assertj-core/src/main/java/org/assertj/core/configuration/Configuration.java
+++ b/assertj-core/src/main/java/org/assertj/core/configuration/Configuration.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.configuration;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/configuration/ConfigurationProvider.java b/assertj-core/src/main/java/org/assertj/core/configuration/ConfigurationProvider.java
index e8b4fd9a8..016eefe1a 100644
--- a/assertj-core/src/main/java/org/assertj/core/configuration/ConfigurationProvider.java
+++ b/assertj-core/src/main/java/org/assertj/core/configuration/ConfigurationProvider.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.configuration;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/configuration/PreferredAssumptionException.java b/assertj-core/src/main/java/org/assertj/core/configuration/PreferredAssumptionException.java
index fe2a8d017..6b93083c2 100644
--- a/assertj-core/src/main/java/org/assertj/core/configuration/PreferredAssumptionException.java
+++ b/assertj-core/src/main/java/org/assertj/core/configuration/PreferredAssumptionException.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.configuration;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/configuration/Services.java b/assertj-core/src/main/java/org/assertj/core/configuration/Services.java
index c6b9129bc..cedbbf36b 100644
--- a/assertj-core/src/main/java/org/assertj/core/configuration/Services.java
+++ b/assertj-core/src/main/java/org/assertj/core/configuration/Services.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.configuration;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/Index.java b/assertj-core/src/main/java/org/assertj/core/data/Index.java
index f749802ac..a07ca41a9 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/Index.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/Index.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/MapEntry.java b/assertj-core/src/main/java/org/assertj/core/data/MapEntry.java
index 190f721e4..7528a3659 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/MapEntry.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/MapEntry.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/Offset.java b/assertj-core/src/main/java/org/assertj/core/data/Offset.java
index bfa080320..9287ceb0b 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/Offset.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/Offset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/Percentage.java b/assertj-core/src/main/java/org/assertj/core/data/Percentage.java
index c6970728c..c483712af 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/Percentage.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/Percentage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/TemporalOffset.java b/assertj-core/src/main/java/org/assertj/core/data/TemporalOffset.java
index 7779f60b8..84e628917 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/TemporalOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/TemporalOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitLessThanOffset.java b/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitLessThanOffset.java
index 744ae328e..705373efc 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitLessThanOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitLessThanOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitOffset.java b/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitOffset.java
index 7d73e8bc8..d220c46db 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitWithinOffset.java b/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitWithinOffset.java
index 94f25f38f..092c4d34e 100644
--- a/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitWithinOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/data/TemporalUnitWithinOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.data;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/description/Description.java b/assertj-core/src/main/java/org/assertj/core/description/Description.java
index 53199588d..a748daa9e 100644
--- a/assertj-core/src/main/java/org/assertj/core/description/Description.java
+++ b/assertj-core/src/main/java/org/assertj/core/description/Description.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.description;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/description/EmptyTextDescription.java b/assertj-core/src/main/java/org/assertj/core/description/EmptyTextDescription.java
index 6715a2c82..b7f82f630 100644
--- a/assertj-core/src/main/java/org/assertj/core/description/EmptyTextDescription.java
+++ b/assertj-core/src/main/java/org/assertj/core/description/EmptyTextDescription.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.description;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/description/JoinDescription.java b/assertj-core/src/main/java/org/assertj/core/description/JoinDescription.java
index 2311054b0..17d43d508 100644
--- a/assertj-core/src/main/java/org/assertj/core/description/JoinDescription.java
+++ b/assertj-core/src/main/java/org/assertj/core/description/JoinDescription.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.description;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/description/LazyTextDescription.java b/assertj-core/src/main/java/org/assertj/core/description/LazyTextDescription.java
index 060179ea0..19f5fbed1 100644
--- a/assertj-core/src/main/java/org/assertj/core/description/LazyTextDescription.java
+++ b/assertj-core/src/main/java/org/assertj/core/description/LazyTextDescription.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.description;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/description/TextDescription.java b/assertj-core/src/main/java/org/assertj/core/description/TextDescription.java
index 99fdd84ac..728dce99d 100644
--- a/assertj-core/src/main/java/org/assertj/core/description/TextDescription.java
+++ b/assertj-core/src/main/java/org/assertj/core/description/TextDescription.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.description;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AbstractShouldHaveTextContent.java b/assertj-core/src/main/java/org/assertj/core/error/AbstractShouldHaveTextContent.java
index 91b7500ac..25b70350a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AbstractShouldHaveTextContent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AbstractShouldHaveTextContent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ActualIsNotEmpty.java b/assertj-core/src/main/java/org/assertj/core/error/ActualIsNotEmpty.java
new file mode 100644
index 000000000..0c6bd1b54
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ActualIsNotEmpty.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2024 the original author or authors.
+ */
+package org.assertj.core.error;
+
+public class ActualIsNotEmpty extends BasicErrorMessageFactory {
+
+  public static ErrorMessageFactory actualIsNotEmpty(Object expected) {
+    return new ActualIsNotEmpty(expected);
+  }
+
+  private ActualIsNotEmpty(Object expected) {
+    super("%nActual:%n  %s%nis not empty while group of values to look for is.", expected);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AnyElementShouldMatch.java b/assertj-core/src/main/java/org/assertj/core/error/AnyElementShouldMatch.java
index d2ff1d4de..387267a36 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AnyElementShouldMatch.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AnyElementShouldMatch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AssertJMultipleFailuresError.java b/assertj-core/src/main/java/org/assertj/core/error/AssertJMultipleFailuresError.java
index 6dfcb31e3..96956e025 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AssertJMultipleFailuresError.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AssertJMultipleFailuresError.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorCreator.java b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorCreator.java
index eaf5baa8a..1a578b5c6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorCreator.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorCreator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorFactory.java b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorFactory.java
index 552006b52..9efeb2343 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregator.java b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregator.java
index b56a53129..eddf90d4c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregator.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregrator.java b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregrator.java
index dc2ca3c48..0642fba6b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregrator.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/AssertionErrorMessagesAggregrator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/BasicErrorMessageFactory.java b/assertj-core/src/main/java/org/assertj/core/error/BasicErrorMessageFactory.java
index c29bbd970..08ecd2278 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/BasicErrorMessageFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/BasicErrorMessageFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ClassModifierShouldBe.java b/assertj-core/src/main/java/org/assertj/core/error/ClassModifierShouldBe.java
index d4bae4ea1..7a8cae6b7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ClassModifierShouldBe.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ClassModifierShouldBe.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ConditionAndGroupGenericParameterTypeShouldBeTheSame.java b/assertj-core/src/main/java/org/assertj/core/error/ConditionAndGroupGenericParameterTypeShouldBeTheSame.java
index 90cfe4b3a..210b4960d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ConditionAndGroupGenericParameterTypeShouldBeTheSame.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ConditionAndGroupGenericParameterTypeShouldBeTheSame.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ConstructorInvoker.java b/assertj-core/src/main/java/org/assertj/core/error/ConstructorInvoker.java
index 764db59ba..c7de47346 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ConstructorInvoker.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ConstructorInvoker.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/DescriptionFormatter.java b/assertj-core/src/main/java/org/assertj/core/error/DescriptionFormatter.java
index 441fe6e94..c919b84f8 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/DescriptionFormatter.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/DescriptionFormatter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBe.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBe.java
index 19403b8b2..1218e4703 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBe.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBe.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtLeast.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtLeast.java
index dc1c67e0e..ab58c53c4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtLeast.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtLeast.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtMost.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtMost.java
index 54bbc1578..2be431155 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtMost.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeAtMost.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeExactly.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeExactly.java
index ef636ea08..c36d03f6a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeExactly.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldBeExactly.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHave.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHave.java
index 4066837d9..46e6b897e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHave.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHave.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtLeast.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtLeast.java
index 365ea4d09..502d301c4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtLeast.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtLeast.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtMost.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtMost.java
index 0b9f84952..fc7eb6c2c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtMost.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveAtMost.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveExactly.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveExactly.java
index b58a19f8c..49f63b870 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveExactly.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldHaveExactly.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldMatch.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldMatch.java
index 53e77b394..4228b04b3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldMatch.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldMatch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotBe.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotBe.java
index ec9656c19..8110a64f5 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotBe.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotBe.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotHave.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotHave.java
index 3506a1e89..6bd839bbe 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotHave.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldNotHave.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldSatisfy.java b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldSatisfy.java
index d1620af5c..cdb73b577 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldSatisfy.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ElementsShouldSatisfy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ErrorMessageFactory.java b/assertj-core/src/main/java/org/assertj/core/error/ErrorMessageFactory.java
index a5390374a..7fdd03f22 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ErrorMessageFactory.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ErrorMessageFactory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/GroupTypeDescription.java b/assertj-core/src/main/java/org/assertj/core/error/GroupTypeDescription.java
index 787be7b22..5926c6097 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/GroupTypeDescription.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/GroupTypeDescription.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/MatcherShouldMatch.java b/assertj-core/src/main/java/org/assertj/core/error/MatcherShouldMatch.java
index d4b5e3d97..031e65a7a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/MatcherShouldMatch.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/MatcherShouldMatch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/MessageFormatter.java b/assertj-core/src/main/java/org/assertj/core/error/MessageFormatter.java
index d6be577a6..9b9f1a146 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/MessageFormatter.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/MessageFormatter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/MultipleAssertionsError.java b/assertj-core/src/main/java/org/assertj/core/error/MultipleAssertionsError.java
index 2f4caef46..d00c4977f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/MultipleAssertionsError.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/MultipleAssertionsError.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldMatch.java b/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldMatch.java
index 3a09b3119..ae3241ce4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldMatch.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldMatch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldSatisfy.java b/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldSatisfy.java
index 90da480c5..df43c3001 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldSatisfy.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/NoElementsShouldSatisfy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToOffset.java b/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToOffset.java
index ee091a4f4..7d0c401d2 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToPercentage.java b/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToPercentage.java
index 0f30f69b2..a64314f2d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToPercentage.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/OptionalDoubleShouldHaveValueCloseToPercentage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBeEmpty.java b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBeEmpty.java
index 828b90933..9519c531e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBeEmpty.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBeEmpty.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBePresent.java b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBePresent.java
index de91a2865..ed2dfbae4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBePresent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldBePresent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContain.java b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContain.java
index 7c034110f..6a15df56f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContain.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContain.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContainInstanceOf.java b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContainInstanceOf.java
index 0c7b2e66d..f169c0a2e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContainInstanceOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/OptionalShouldContainInstanceOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldAccept.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldAccept.java
index da722901b..8d0004a09 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldAccept.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldAccept.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBe.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBe.java
index c8816f5b4..ee6fada05 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBe.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBe.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java
index ad83f64f0..842897cd7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeASCII.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbsolutePath.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbsolutePath.java
index c5fbb9af3..855a0f998 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbsolutePath.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbsolutePath.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbstract.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbstract.java
index 4eaa8767a..dce21118a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbstract.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAbstract.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfter.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfter.java
index 85d4c5862..ab9cee67e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfter.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterOrEqualTo.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterOrEqualTo.java
index 7e469d358..abed4147c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterOrEqualTo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterOrEqualTo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterYear.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterYear.java
index 48d529a0b..c5fbafeb9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterYear.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAfterYear.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java
index 0b0c8a7fc..328e6966f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphabetic.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java
index 3e3bdaab3..d2fc54aaa 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAlphanumeric.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnArray.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnArray.java
index faa61cd9c..6730b703c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnArray.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnArray.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnnotation.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnnotation.java
index a8dbf6ec3..bf92e89b7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnnotation.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAnnotation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableFrom.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableFrom.java
index e21661efe..01db4155e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableFrom.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableFrom.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java
index fd5528f3c..f37d2aa2e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtIndex.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtIndex.java
index 320795edd..a34ac4147 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtIndex.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtIndex.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtSameInstant.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtSameInstant.java
index afca34003..224b6654d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtSameInstant.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeAtSameInstant.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBase64.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBase64.java
index 5a28e1e73..1f9e393b1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBase64.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBase64.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBefore.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBefore.java
index b5076ed7d..90f9f35aa 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBefore.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBefore.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeOrEqualTo.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeOrEqualTo.java
index 0e970ed47..f7922a1b5 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeOrEqualTo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeOrEqualTo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeYear.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeYear.java
index b501ac197..dc954ab2a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeYear.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBeforeYear.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBetween.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBetween.java
index 98b21012c..06ca86146 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBetween.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBetween.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBlank.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBlank.java
index e0d661011..083da69c1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBlank.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeBlank.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCanonicalPath.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCanonicalPath.java
index 67c0050b3..72b6a303e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCanonicalPath.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCanonicalPath.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCloseTo.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCloseTo.java
index 9d89e7ca6..a40c53962 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCloseTo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeCloseTo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeDirectory.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeDirectory.java
index a76b0c1ac..53dcfae65 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeDirectory.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeDirectory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmpty.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmpty.java
index 8924bc26a..1b37979a3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmpty.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmpty.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmptyDirectory.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmptyDirectory.java
index 150bcb36f..5e14a921c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmptyDirectory.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEmptyDirectory.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqual.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqual.java
index f0510b6bf..25a003317 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqual.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingFieldByFieldRecursively.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingFieldByFieldRecursively.java
index 7e79d04aa..d94efbbd9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingFieldByFieldRecursively.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingFieldByFieldRecursively.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingOnlyGivenFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingOnlyGivenFields.java
index 1477af36e..bee7a99f7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingOnlyGivenFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualByComparingOnlyGivenFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringCase.java
index fd98e96c5..65d48e16f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringHours.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringHours.java
index 1290eb2e7..7526f760f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringHours.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringHours.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringMinutes.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringMinutes.java
index 478dae77e..545ce3930 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringMinutes.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringMinutes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNanos.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNanos.java
index 635e7e1f3..ee8210831 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNanos.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNanos.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLineDifferences.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLineDifferences.java
index efa5f36f9..826e837e0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLineDifferences.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLineDifferences.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLines.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLines.java
index cc84e0d79..add689f68 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLines.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringNewLines.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringSeconds.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringSeconds.java
index c7089f009..87d6adcad 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringSeconds.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringSeconds.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringTimezone.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringTimezone.java
index aeb3347c5..af91564a6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringTimezone.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringTimezone.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringWhitespace.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringWhitespace.java
index 4c530fe66..0772ea0bb 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringWhitespace.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringWhitespace.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingPunctuationAndWhitespace.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingPunctuationAndWhitespace.java
index eb5a642aa..bc1030ddd 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingPunctuationAndWhitespace.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingPunctuationAndWhitespace.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingUnicode.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingUnicode.java
index c642018d7..0f5815c95 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingUnicode.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingUnicode.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingWhitespace.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingWhitespace.java
index 0c6f65228..1cd2ee574 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingWhitespace.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingWhitespace.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualToIgnoringFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualToIgnoringFields.java
index 51bbfb4a1..dff031e9b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualToIgnoringFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualToIgnoringFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithTimePrecision.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithTimePrecision.java
index 79e8fffaa..44c32d720 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithTimePrecision.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithTimePrecision.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinOffset.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinOffset.java
index b849197f3..3e4bbc215 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinPercentage.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinPercentage.java
index c32ee6a75..013a9d5f3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinPercentage.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEqualWithinPercentage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEven.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEven.java
index f3a9b3152..a8867e270 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEven.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeEven.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java
index c2f5c3676..6275c9e94 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExactlyInstanceOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExecutable.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExecutable.java
index ec8285bef..bc89fa841 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExecutable.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExecutable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExhausted.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExhausted.java
index 0f90b1c59..1ca3dde2c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExhausted.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeExhausted.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFalse.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFalse.java
index 7c6d4e2d1..6c6fb1ba1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFalse.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFalse.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFile.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFile.java
index 43ea92a2d..025ad6d35 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFile.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFile.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFinite.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFinite.java
index fdaeab8e7..f2c7f7da6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFinite.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeFinite.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreater.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreater.java
index aaf85a67a..93a26f80a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreater.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreater.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreaterOrEqual.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreaterOrEqual.java
index a9fc674b6..b58a1671f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreaterOrEqual.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeGreaterOrEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java
index 3f506ced6..a90971af0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeHexadecimal.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeIn.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeIn.java
index a81e1638b..dd7e037b0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeIn.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeIn.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameDay.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameDay.java
index 76799bcdf..18e49c1a0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameDay.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameDay.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHour.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHour.java
index a10d2a8d4..f8ad22575 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHour.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHour.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHourWindow.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHourWindow.java
index 870147316..85ec3d571 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHourWindow.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameHourWindow.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinute.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinute.java
index 7aa041d8e..22eeda7f5 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinute.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinute.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinuteWindow.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinuteWindow.java
index cfe9b3c78..4fdf1d8e8 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinuteWindow.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMinuteWindow.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMonth.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMonth.java
index a3a5a409a..238d8feb3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMonth.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameMonth.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecond.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecond.java
index 32ef1bf37..47d82da53 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecond.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecond.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecondWindow.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecondWindow.java
index 10e896787..e6a3ee8f1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecondWindow.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameSecondWindow.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameYear.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameYear.java
index 5dd88ec0e..89928fd40 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameYear.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInSameYear.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInTheFuture.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInTheFuture.java
index 8c62a32cd..16474222c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInTheFuture.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInTheFuture.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInThePast.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInThePast.java
index 08dc5194d..65b4a5a50 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInThePast.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInThePast.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInfinite.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInfinite.java
index a93c2452a..6669e594e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInfinite.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInfinite.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstance.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstance.java
index 3247301c8..5c921e55e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstance.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstance.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstanceOfAny.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstanceOfAny.java
index e4c17e97a..eade8e15e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstanceOfAny.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInstanceOfAny.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInterface.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInterface.java
index 9eba8ab26..4e18e924a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInterface.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeInterface.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLess.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLess.java
index c65db6c40..b3bb1818a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLess.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLess.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLessOrEqual.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLessOrEqual.java
index 60a858776..58dc848c6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLessOrEqual.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLessOrEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLowerCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLowerCase.java
index a7ca771a2..14f11c451 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLowerCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeLowerCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMarked.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMarked.java
index f8feff85a..1ac406413 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMarked.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMarked.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMixedCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMixedCase.java
index f0adda8d8..7124608cf 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMixedCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeMixedCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNormalized.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNormalized.java
index da782e0fa..e968e67f3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNormalized.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNormalized.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNullOrEmpty.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNullOrEmpty.java
index dcfc6faad..f49a9acae 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNullOrEmpty.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNullOrEmpty.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNumeric.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNumeric.java
index 4b3df39fc..c01383bf9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNumeric.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeNumeric.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOdd.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOdd.java
index fcc71fb52..27068617e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOdd.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOdd.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOfClassIn.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOfClassIn.java
index 0ab508b78..94a5ed8c2 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOfClassIn.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeOfClassIn.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBePeriod.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePeriod.java
index 02f142d37..197ff7a33 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBePeriod.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePeriod.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrimitive.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrimitive.java
new file mode 100644
index 000000000..6a5f92276
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrimitive.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2024 the original author or authors.
+ */
+package org.assertj.core.error;
+
+/**
+ * Creates an error message indicating that an assertion that verifies that a class is (or not) a primitive data type,
+ * i.e, byte, short, int, long, float, double, char and boolean.
+ *
+ * @author Manuel Gutierrez
+ */
+public class ShouldBePrimitive extends BasicErrorMessageFactory {
+
+  /**
+   * Creates a new instance of <code>{@link ShouldBePrimitive }</code>.
+   *
+   * @param actual the actual value in the failed assertion.
+   * @return the created {@code ErrorMessageFactory}.
+   */
+  public static BasicErrorMessageFactory shouldBePrimitive(Class<?> actual) {
+    return new ShouldBePrimitive(actual);
+  }
+
+  private ShouldBePrimitive(Class<?> actual) {
+    super("%nExpecting %s to be a primitive type", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java
index 24e033945..2a57867e7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBePrintable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeReadable.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeReadable.java
index eebd594bc..5bd480596 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeReadable.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeReadable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRecord.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRecord.java
index c9e0a8b04..3a31b792d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRecord.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRecord.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRegularFile.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRegularFile.java
index 7295bf775..acfe2d2a0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRegularFile.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRegularFile.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRelativePath.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRelativePath.java
index 50f4ab2ae..0db44f20d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRelativePath.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeRelativePath.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSame.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSame.java
index 7d613dc00..44903dd83 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSame.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSame.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSealed.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSealed.java
index ad4572d03..d0bd2800b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSealed.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSealed.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSorted.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSorted.java
index fb372e422..ce17aea4b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSorted.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSorted.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubsetOf.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubsetOf.java
index c7d203e99..db32dc1be 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubsetOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubsetOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubstring.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubstring.java
index fd5c8ac10..2c287c580 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubstring.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSubstring.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSymbolicLink.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSymbolicLink.java
index ede4e3f31..59f88559c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSymbolicLink.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeSymbolicLink.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeToday.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeToday.java
index f712fabd2..7f819e53f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeToday.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeToday.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeTrue.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeTrue.java
index f1a3fe2b0..d25172f7e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeTrue.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeTrue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUnmodifiable.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUnmodifiable.java
index 1a93d6b63..7fd4b4e04 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUnmodifiable.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUnmodifiable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUpperCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUpperCase.java
index d7a513c00..c5cc85ac3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUpperCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeUpperCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java
index ba77fc29a..b83c7a6c9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeVisible.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeWritable.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeWritable.java
index 13c41f752..cc0ce9298 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldBeWritable.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldBeWritable.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContain.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContain.java
index 4c706a07b..8a9accd5a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContain.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContain.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAnyOf.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAnyOf.java
index 98e5b4c97..db45b5f03 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAnyOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAnyOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAtIndex.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAtIndex.java
index 781ab0ec3..106b7d371 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAtIndex.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainAtIndex.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequence.java
index 100a842d7..55c33b462 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequenceOnlyOnce.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequenceOnlyOnce.java
index a7dc61e5f..73b25aa40 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequenceOnlyOnce.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainCharSequenceOnlyOnce.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntries.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntries.java
index 6d1f0dc2d..261894902 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntries.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntries.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntry.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntry.java
index e7b37b320..8c8cde6b4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntry.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainEntry.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactly.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactly.java
index 0632dc8b5..1fdf4c476 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactly.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactly.java
@@ -8,12 +8,13 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
 import static java.lang.String.format;
 import static org.assertj.core.util.IterableUtil.isNullOrEmpty;
+import static org.assertj.core.util.Strings.escapePercent;
 
 import java.util.List;
 
@@ -28,6 +29,7 @@ import org.assertj.core.internal.StandardComparisonStrategy;
  * collection, an array or a {@code String}.
  * 
  * @author Joel Costigliola
+ * @author Yanming Zhou
  */
 public class ShouldContainExactly extends BasicErrorMessageFactory {
 
@@ -45,15 +47,12 @@ public class ShouldContainExactly extends BasicErrorMessageFactory {
   public static ErrorMessageFactory shouldContainExactly(Object actual, Iterable<?> expected,
                                                          Iterable<?> notFound, Iterable<?> notExpected,
                                                          ComparisonStrategy comparisonStrategy) {
-    if (isNullOrEmpty(notExpected) && isNullOrEmpty(notFound)) {
+    if (isNullOrEmpty(notExpected) && isNullOrEmpty(notFound))
       return new ShouldContainExactly(actual, expected, comparisonStrategy);
-    }
-    if (isNullOrEmpty(notExpected)) {
+    if (isNullOrEmpty(notExpected))
       return new ShouldContainExactly(actual, expected, notFound, comparisonStrategy);
-    }
-    if (isNullOrEmpty(notFound)) {
+    if (isNullOrEmpty(notFound))
       return new ShouldContainExactly(actual, expected, comparisonStrategy, notExpected);
-    }
     return new ShouldContainExactly(actual, expected, notFound, notExpected, comparisonStrategy);
   }
 
@@ -165,7 +164,8 @@ public class ShouldContainExactly extends BasicErrorMessageFactory {
     }
     sb.append(":%n");
     for (IndexedDiff diff : indexedDiffs) {
-      sb.append(format("  - element at index %d: expected \"%s\" but was \"%s\"%n", diff.index, diff.expected, diff.actual));
+      sb.append(escapePercent(format("  - element at index %d: expected \"%s\" but was \"%s\"%n",
+                                     diff.index, diff.expected, diff.actual)));
     }
     return sb.toString();
   }
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactlyInAnyOrder.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactlyInAnyOrder.java
index 77f947f31..bbd7a2ec5 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactlyInAnyOrder.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainExactlyInAnyOrder.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKey.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKey.java
index 045ee3180..af3164c6f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKey.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKey.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKeys.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKeys.java
index 72cac31a1..84aeef0e1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKeys.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainKeys.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainNull.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainNull.java
index 6570a48f1..8049094da 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainNull.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainNull.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOneOrMoreWhitespaces.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOneOrMoreWhitespaces.java
index df5f3e2a6..3dceb05e3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOneOrMoreWhitespaces.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOneOrMoreWhitespaces.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnly.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnly.java
index b9d66cf98..a0bdcef86 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnly.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnly.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyDigits.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyDigits.java
index 1116cf79b..c352bd5fa 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyDigits.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyDigits.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyKeys.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyKeys.java
index 37a762d1e..eaa8331ae 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyKeys.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyKeys.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyNulls.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyNulls.java
index e5e782951..465b8af65 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyNulls.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyNulls.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyWhitespaces.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyWhitespaces.java
index 35e4afa92..c4b8b0816 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyWhitespaces.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainOnlyWhitespaces.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainPattern.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainPattern.java
index cb73f335f..3db0f16c9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainPattern.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainPattern.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainRecursively.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainRecursively.java
index b95dd825e..d2a96ed24 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainRecursively.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainRecursively.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequence.java
index 8b7c4e4a2..de37d2c1f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequenceOfCharSequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequenceOfCharSequence.java
index 3b2b4aff7..c76b1ed6a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequenceOfCharSequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSequenceOfCharSequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequence.java
index f8127fd8c..0e9ee0598 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequenceOfCharSequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequenceOfCharSequence.java
index 859b67728..f870e487e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequenceOfCharSequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainSubsequenceOfCharSequence.java
@@ -8,17 +8,22 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
+import static java.lang.String.format;
+import static java.util.stream.Collectors.joining;
+
+import java.util.Map;
+
 import org.assertj.core.internal.ComparisonStrategy;
 import org.assertj.core.internal.StandardComparisonStrategy;
 
 /**
  * Creates an error message indicating that an assertion that verifies that a {@code CharSequence} contains a Subsequence of
  * several {@code CharSequence}s in order failed.
- * 
+ *
  * @author Joel Costigliola
  * @author Mikhail Mazursky
  */
@@ -26,7 +31,7 @@ public class ShouldContainSubsequenceOfCharSequence extends BasicErrorMessageFac
 
   /**
    * Creates a new <code>{@link ShouldContainSubsequenceOfCharSequence}</code>.
-   * 
+   *
    * @param actual the actual value in the failed assertion.
    * @param strings the sequence of values expected to be in {@code actual}.
    * @param firstBadOrderIndex first index failing the subsequence.
@@ -39,7 +44,7 @@ public class ShouldContainSubsequenceOfCharSequence extends BasicErrorMessageFac
 
   /**
    * Creates a new <code>{@link ShouldContainSubsequenceOfCharSequence}</code>.
-   * 
+   *
    * @param actual the actual value in the failed assertion.
    * @param strings the sequence of values expected to be in {@code actual}.
    * @param badOrderIndex index failing the subsequence.
@@ -51,7 +56,8 @@ public class ShouldContainSubsequenceOfCharSequence extends BasicErrorMessageFac
 
     return new ShouldContainSubsequenceOfCharSequence("%nExpecting actual:%n" +
                                                       "  %s%n" +
-                                                      "to contain the following CharSequences in this order:%n" +
+                                                      "to contain the following CharSequences in this order (possibly with other values between them):%n"
+                                                      +
                                                       "  %s%n" +
                                                       "but %s was found before %s%n%s",
                                                       actual, strings, strings[badOrderIndex + 1],
@@ -59,6 +65,65 @@ public class ShouldContainSubsequenceOfCharSequence extends BasicErrorMessageFac
                                                       comparisonStrategy);
   }
 
+  /**
+   * Creates a new <code>{@link ShouldContainSubsequenceOfCharSequence}</code> with detailed error messages about missing subsequences.
+   *
+   * @param actual the actual value in the failed assertion.
+   * @param strings the sequence of values expected to be in {@code actual}.
+   * @param notFoundRepeatedSubsequence a map where each key is a subsequence of {@code strings}
+   *        that was expected to be found in {@code actual} and the corresponding value is
+   *        the number of times it was expected but not found.
+   * @param comparisonStrategy the {@link ComparisonStrategy} used to evaluate assertion.
+   * @return the created {@code ErrorMessageFactory}.
+   */
+  public static ErrorMessageFactory shouldContainSubsequence(CharSequence actual, CharSequence[] strings,
+                                                             Map<CharSequence, Integer> notFoundRepeatedSubsequence,
+                                                             ComparisonStrategy comparisonStrategy) {
+
+    String detailedErrorMessage;
+    if (notFoundRepeatedSubsequence.size() == 1) {
+      Map.Entry<CharSequence, Integer> singleEntry = notFoundRepeatedSubsequence.entrySet().iterator().next();
+      detailedErrorMessage = format("But the %s occurrence of \"%s\" was not found", ordinal(singleEntry.getValue() + 1),
+                                    singleEntry.getKey());
+    } else {
+      detailedErrorMessage = notFoundRepeatedSubsequence.entrySet().stream()
+                                                        .map(entry -> format("- the %s occurrence of \"%s\" was not found",
+                                                                             ordinal(entry.getValue() + 1), entry.getKey()))
+                                                        .collect(joining("%n"));
+      detailedErrorMessage = "But:%n" + detailedErrorMessage;
+    }
+
+    return new ShouldContainSubsequenceOfCharSequence("%nExpecting actual:%n" +
+                                                      "  %s%n" +
+                                                      "to contain the following CharSequences in this order (possibly with other values between them):%n"
+                                                      +
+                                                      "  %s%n" +
+                                                      detailedErrorMessage + "%n%s",
+                                                      actual, strings, comparisonStrategy);
+  }
+
+  /**
+   * Returns the ordinal representation of a given integer.
+   * <p>
+   * This method converts integers to their ordinal form (e.g., 1 to "1st", 2 to "2nd", etc.).
+   * Special cases for numbers ending in 11, 12, and 13 are handled to return "th" instead of
+   * "st", "nd", or "rd".
+   * </p>
+   *
+   * @param i the integer to convert
+   * @return the ordinal representation of {@code i}
+   */
+  private static String ordinal(int i) {
+    int mod100 = i % 100;
+    int mod10 = i % 10;
+
+    if (mod10 == 1 && mod100 != 11) return i + "st";
+    if (mod10 == 2 && mod100 != 12) return i + "nd";
+    if (mod10 == 3 && mod100 != 13) return i + "rd";
+
+    return i + "th";
+  }
+
   private ShouldContainSubsequenceOfCharSequence(String format, CharSequence actual, CharSequence[] strings,
                                                  CharSequence foundButBadOrder,
                                                  CharSequence foundButBadOrder2,
@@ -66,4 +131,8 @@ public class ShouldContainSubsequenceOfCharSequence extends BasicErrorMessageFac
     super(format, actual, strings, foundButBadOrder, foundButBadOrder2, comparisonStrategy);
   }
 
+  private ShouldContainSubsequenceOfCharSequence(String format, CharSequence actual, CharSequence[] strings,
+                                                 ComparisonStrategy comparisonStrategy) {
+    super(format, actual, strings, comparisonStrategy);
+  }
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValue.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValue.java
index 672aafb4c..4775556ac 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValues.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValues.java
index 54bd1f74a..46d73082e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValues.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainValues.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainsOnlyOnce.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainsOnlyOnce.java
index 777b31184..6afa911f7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldContainsOnlyOnce.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldContainsOnlyOnce.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWith.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWith.java
index 51f8ae0aa..7703dd63f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWith.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWith.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithIgnoringCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithIgnoringCase.java
index 7115a67e7..6bc5b599f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithIgnoringCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithIgnoringCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithPath.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithPath.java
index 7b60b5e11..4ee830035 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithPath.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldEndWithPath.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldExist.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldExist.java
index 9ea25be52..ae6b0c317 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldExist.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldExist.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHave.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHave.java
index 7c1e81e42..78c97a557 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHave.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHave.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAllNullFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAllNullFields.java
index f5fb5c2d7..1c78c58a1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAllNullFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAllNullFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAnnotations.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAnnotations.java
index f87c1e6ea..276a32b62 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAnnotations.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAnnotations.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtIndex.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtIndex.java
index eaf2c9bb5..83643c942 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtIndex.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtIndex.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtLeastOneElementOfType.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtLeastOneElementOfType.java
index 965f9d070..79b0904f0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtLeastOneElementOfType.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveAtLeastOneElementOfType.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveBinaryContent.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveBinaryContent.java
index f113a14db..e75b687c0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveBinaryContent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveBinaryContent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCause.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCause.java
index 589417264..129a57a84 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCause.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCause.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance.java
index 69ce4b5b3..94a3cbe14 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java
index d928b1dc7..5707ca0e9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseReference.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseReference.java
index 7911fc602..3fed03408 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseReference.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveCauseReference.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveContent.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveContent.java
index 349d705a0..6249bf9ca 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveContent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveContent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDateField.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDateField.java
index e901323c1..c500ae095 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDateField.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDateField.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDigest.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDigest.java
index c70fa4fdc..497a6f7c6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDigest.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDigest.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDimensions.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDimensions.java
index 0981f519f..e34799da2 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDimensions.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDimensions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDuration.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDuration.java
index 98f3590a4..9f1497255 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDuration.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveDuration.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExactlyTypes.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExactlyTypes.java
index 35c7c0df1..4538187c4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExactlyTypes.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExactlyTypes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExtension.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExtension.java
index 6eee9971e..88c4fda95 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExtension.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveExtension.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFields.java
index 554c6e663..8fd4ba29d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFileSystem.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFileSystem.java
index 731bd4f97..cce4307fe 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFileSystem.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveFileSystem.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveLineCount.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveLineCount.java
index 465f0fe2f..229474adb 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveLineCount.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveLineCount.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessage.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessage.java
index f3df98483..7cbcb8a6f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessage.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageFindingMatchRegex.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageFindingMatchRegex.java
index fbf31b69e..79ea7d21d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageFindingMatchRegex.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageFindingMatchRegex.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageMatchingRegex.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageMatchingRegex.java
index 10b0cf278..7504b0b5c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageMatchingRegex.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMessageMatchingRegex.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMethods.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMethods.java
index 682beec86..70b9b5dcd 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMethods.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveMethods.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveName.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveName.java
index dd4256694..a8201cb11 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveName.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveName.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNext.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNext.java
index 7ab8a8043..bef55e64e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNext.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNext.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoCause.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoCause.java
index 2b6fced50..5bd62366f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoCause.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoCause.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoExtension.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoExtension.java
index f70e99439..720ccce7f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoExtension.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoExtension.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoFields.java
index 0d42c820d..74fc98e56 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoNullFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoNullFields.java
index c94508772..8be1902f2 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoNullFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoNullFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoPackage.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoPackage.java
index 87793c602..fc9436069 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoPackage.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoPackage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoParent.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoParent.java
index ba8a0e0ca..0c60d92ee 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoParent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoParent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuperclass.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuperclass.java
index c9d784ad9..47582dff4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuperclass.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuperclass.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuppressedExceptions.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuppressedExceptions.java
index 40800932a..caf66d060 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuppressedExceptions.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveNoSuppressedExceptions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveOnlyElementsOfType.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveOnlyElementsOfType.java
index 61a467f65..59e36aa72 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveOnlyElementsOfType.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveOnlyElementsOfType.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePackage.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePackage.java
index cab7113ec..eda9fcc6e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePackage.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePackage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveParent.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveParent.java
index 3fd61bee1..094e1620b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveParent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveParent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePeriod.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePeriod.java
index 3bf41c954..f77010c5c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePeriod.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePeriod.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrField.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrField.java
index a594d203d..20c565b82 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrField.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrField.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrFieldWithValue.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrFieldWithValue.java
index cfc37c9da..fc4a49449 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrFieldWithValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHavePropertyOrFieldWithValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRecordComponents.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRecordComponents.java
index d2428bbdd..3275e177f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRecordComponents.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRecordComponents.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveReference.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveReference.java
index 2e8a82619..f64e281c1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveReference.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveReference.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCause.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCause.java
index ecfe78f9a..692b19439 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCause.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCause.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseExactlyInstance.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseExactlyInstance.java
index e0d1a3c05..e053f467d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseExactlyInstance.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseExactlyInstance.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseInstance.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseInstance.java
index 72dffc5c0..e8979cbd4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseInstance.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveRootCauseInstance.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameClass.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameClass.java
index 8dca81f0e..72a7b9ace 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameClass.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameClass.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameContent.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameContent.java
index d2cc3fe56..41146615e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameContent.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameContent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameDimensionsAs.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameDimensionsAs.java
index 9cdeca5c5..45aa89811 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameDimensionsAs.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameDimensionsAs.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameFileSystemAs.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameFileSystemAs.java
index 701ccbfd4..2c3d49771 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameFileSystemAs.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameFileSystemAs.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHashCode.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHashCode.java
index fac01dded..4197b6b9f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHashCode.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHashCode.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHourAs.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHourAs.java
index 6d7bfe701..8cafa4c87 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHourAs.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameHourAs.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameSizeAs.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameSizeAs.java
index ac65295ca..50ac3cb2d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameSizeAs.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameSizeAs.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameTime.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameTime.java
index 7ba7f6f43..78733558f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameTime.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSameTime.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveScale.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveScale.java
index 423ccc80f..3b5399926 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveScale.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveScale.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSize.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSize.java
index dcb2a23fc..086c06107 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSize.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSize.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeBetween.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeBetween.java
index 8bd152325..1b697fde9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeBetween.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeBetween.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThan.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThan.java
index a3f8ec801..9427d4d1d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThan.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThan.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThanOrEqualTo.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThanOrEqualTo.java
index b463d04da..be88e8d4f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThanOrEqualTo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeGreaterThanOrEqualTo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThan.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThan.java
index c413d2ac8..00ee61d36 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThan.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThan.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThanOrEqualTo.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThanOrEqualTo.java
index 8234aa89c..93438b524 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThanOrEqualTo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSizeLessThanOrEqualTo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveStamp.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveStamp.java
index 0392ba4ea..2bc9cd0ac 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveStamp.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveStamp.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuperclass.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuperclass.java
index 6e4ec5ca1..a842192e9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuperclass.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuperclass.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuppressedException.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuppressedException.java
index 877bcae97..f58ec658c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuppressedException.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveSuppressedException.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveTime.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveTime.java
index e34370a0e..a66f257fd 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveTime.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveTime.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveToString.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveToString.java
index 118bdc8d2..b5efa1618 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveToString.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveToString.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveValue.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveValue.java
index 16c00f3e4..099473262 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldHaveValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldMatch.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldMatch.java
index b2e86fe29..dca64d6e7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldMatch.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldMatch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldMatchPattern.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldMatchPattern.java
index b9b43f506..fd6074f2a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldMatchPattern.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldMatchPattern.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotAccept.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotAccept.java
index f3e8c2e0e..22c49df9f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotAccept.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotAccept.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBe.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBe.java
index df1430b46..69221d688 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBe.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBe.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBetween.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBetween.java
index 3e5f7b0c1..5851fee70 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBetween.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBetween.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBlank.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBlank.java
index c63d63c8e..367f1fb18 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBlank.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeBlank.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEmpty.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEmpty.java
index 74af0b3d6..dd520470c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEmpty.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEmpty.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqual.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqual.java
index 550076159..e76e672f3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqual.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualComparingFieldByFieldRecursively.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualComparingFieldByFieldRecursively.java
index 162561274..8f0c4d68e 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualComparingFieldByFieldRecursively.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualComparingFieldByFieldRecursively.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringCase.java
index 5f8ac2e05..adae34ed1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringWhitespace.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringWhitespace.java
index f102ac520..46482ad22 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringWhitespace.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualIgnoringWhitespace.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualNormalizingWhitespace.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualNormalizingWhitespace.java
index 3ee2e9e6d..b26693b69 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualNormalizingWhitespace.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualNormalizingWhitespace.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinOffset.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinOffset.java
index c5b5c751b..92a472843 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinOffset.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinOffset.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinPercentage.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinPercentage.java
index 3703d6ab3..6e655e359 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinPercentage.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeEqualWithinPercentage.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java
index 516bb9b05..c3695f7be 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeExactlyInstanceOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeFinite.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeFinite.java
index 5ef789aee..396f2d53d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeFinite.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeFinite.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeIn.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeIn.java
index 651f49a30..27587420f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeIn.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeIn.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInfinite.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInfinite.java
index 19bc59324..d41e67cdd 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInfinite.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInfinite.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstance.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstance.java
index 1064164a9..77225e2f8 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstance.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstance.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstanceOfAny.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstanceOfAny.java
index 8c95a919a..d1a5564ea 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstanceOfAny.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeInstanceOfAny.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeNull.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeNull.java
index 74387875a..14f63ae89 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeNull.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeNull.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeOfClassIn.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeOfClassIn.java
index 1acdf6163..9ed4b8c45 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeOfClassIn.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeOfClassIn.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBePrimitive.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBePrimitive.java
new file mode 100644
index 000000000..122986010
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBePrimitive.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2024 the original author or authors.
+ */
+package org.assertj.core.error;
+
+/**
+ * Creates an error message indicating that an assertion that verifies that a class is (or not) a primitive data type,
+ * i.e, byte, short, int, long, float, double, char and boolean.
+ *
+ * @author Manuel Gutierrez
+ */
+public class ShouldNotBePrimitive extends BasicErrorMessageFactory {
+
+  /**
+   * Creates a new instance of <code>{@link ShouldNotBePrimitive}</code>.
+   *
+   * @param actual the actual value in the failed assertion.
+   * @return the created {@code ErrorMessageFactory}.
+   */
+  public static BasicErrorMessageFactory shouldNotBePrimitive(Class<?> actual) {
+    return new ShouldNotBePrimitive(actual);
+  }
+
+  private ShouldNotBePrimitive(Class<?> actual) {
+    super("%nExpecting %s not to be a primitive type", actual);
+  }
+}
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeSame.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeSame.java
index b7f39372c..36f5c245d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeSame.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotBeSame.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContain.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContain.java
index d79aba1c2..33e0eb777 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContain.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContain.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAnyWhitespaces.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAnyWhitespaces.java
index 90f2651f9..e63476214 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAnyWhitespaces.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAnyWhitespaces.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAtIndex.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAtIndex.java
index b2de16a34..403d60b99 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAtIndex.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainAtIndex.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainCharSequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainCharSequence.java
index d4871bc54..3ef1e668b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainCharSequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainCharSequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKey.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKey.java
index e535f686d..83578b3c9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKey.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKey.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKeys.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKeys.java
index c58b51cf2..770181279 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKeys.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainKeys.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainNull.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainNull.java
index 5c05445ce..ae37eb57d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainNull.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainNull.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainOnlyWhitespaces.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainOnlyWhitespaces.java
index b128d24df..0d032f6e6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainOnlyWhitespaces.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainOnlyWhitespaces.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainPattern.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainPattern.java
index 570122d24..76032e069 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainPattern.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainPattern.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSequence.java
index 2769fd8e2..32633e4e6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSubsequence.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSubsequence.java
index 932dd89b7..ff576bc68 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSubsequence.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainSubsequence.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainValue.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainValue.java
index 73ee4133e..85e918453 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotContainValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWith.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWith.java
index 64fd869da..9a037e099 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWith.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWith.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWithIgnoringCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWithIgnoringCase.java
index de05d05bb..826811264 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWithIgnoringCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotEndWithIgnoringCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotExist.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotExist.java
index fb6f2b02e..06dc2b258 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotExist.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotExist.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHave.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHave.java
index d82c43d13..a11719ff5 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHave.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHave.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveAnyElementsOfTypes.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveAnyElementsOfTypes.java
index 76a56970e..dc55003a2 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveAnyElementsOfTypes.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveAnyElementsOfTypes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveDuplicates.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveDuplicates.java
index 811f85278..df7a815e3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveDuplicates.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveDuplicates.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameClass.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameClass.java
index ae79cde3a..e3df33c80 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameClass.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameClass.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameHashCode.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameHashCode.java
index 7655e95a0..7a77f8fa9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameHashCode.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveSameHashCode.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrown.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrown.java
index f0d3aaa81..2e2594c02 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrown.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrown.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveToString.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveToString.java
index 7830b1fde..67dc2e147 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveToString.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveToString.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatch.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatch.java
index 63092d083..112d14872 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatch.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatchPattern.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatchPattern.java
index bf55fc96a..2eaaccc73 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatchPattern.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotMatchPattern.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotSatisfyPredicateRecursively.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotSatisfyPredicateRecursively.java
index 3b92ac7e5..478fcd27f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotSatisfyPredicateRecursively.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotSatisfyPredicateRecursively.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWith.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWith.java
index eebe25426..6a8bf4674 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWith.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWith.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWithIgnoringCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWithIgnoringCase.java
index 7a509b848..559305c6c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWithIgnoringCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotStartWithIgnoringCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveElementsOfTypes.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveElementsOfTypes.java
index ac6b1b611..da3604f38 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveElementsOfTypes.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveElementsOfTypes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveFields.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveFields.java
index d02d44cb7..558295b41 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveFields.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldOnlyHaveFields.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfy.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfy.java
index e47c26510..ff68103dd 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfy.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfyOnlyOnce.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfyOnlyOnce.java
index ddd488a21..bc434abcc 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfyOnlyOnce.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldSatisfyOnlyOnce.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWith.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWith.java
index dc0175d34..6d26c25f1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWith.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWith.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithIgnoringCase.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithIgnoringCase.java
index df2983d2f..882852607 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithIgnoringCase.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithIgnoringCase.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithPath.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithPath.java
index 6c0c24fc6..576fb6cf9 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithPath.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldStartWithPath.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/SubarraysShouldHaveSameSize.java b/assertj-core/src/main/java/org/assertj/core/error/SubarraysShouldHaveSameSize.java
index 2e973df80..e4f0c80c3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/SubarraysShouldHaveSameSize.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/SubarraysShouldHaveSameSize.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/UnsatisfiedRequirement.java b/assertj-core/src/main/java/org/assertj/core/error/UnsatisfiedRequirement.java
index ccc30acf3..4b06db9e7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/UnsatisfiedRequirement.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/UnsatisfiedRequirement.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ZippedElementsShouldSatisfy.java b/assertj-core/src/main/java/org/assertj/core/error/ZippedElementsShouldSatisfy.java
index bd23001c7..70e1763db 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/ZippedElementsShouldSatisfy.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/ZippedElementsShouldSatisfy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/array2d/Array2dElementShouldBeDeepEqual.java b/assertj-core/src/main/java/org/assertj/core/error/array2d/Array2dElementShouldBeDeepEqual.java
index 392e51def..fe0648386 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/array2d/Array2dElementShouldBeDeepEqual.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/array2d/Array2dElementShouldBeDeepEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.array2d;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCancelled.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCancelled.java
index 9992a09ab..a4b0e84c6 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCancelled.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCancelled.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompleted.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompleted.java
index bc3f116af..dba8f5d92 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompleted.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompleted.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedExceptionally.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedExceptionally.java
index ebde87504..ba89a79c7 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedExceptionally.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedExceptionally.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedWithin.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedWithin.java
index 33906e678..9c6b1cdb4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedWithin.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeCompletedWithin.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeDone.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeDone.java
index 0825e855f..77c4777d1 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeDone.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldBeDone.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailed.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailed.java
index c09c87e0a..87d40fc71 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailed.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailed.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailedWithin.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailedWithin.java
index 3dae0cfbf..53c0ccfd4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailedWithin.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldHaveFailedWithin.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCancelled.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCancelled.java
index 7309114d7..c027508bb 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCancelled.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCancelled.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompleted.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompleted.java
index 628e07f1b..7c5f6072a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompleted.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompleted.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompletedExceptionally.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompletedExceptionally.java
index 0750b4583..47e1c19a4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompletedExceptionally.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeCompletedExceptionally.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeDone.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeDone.java
index 482d24b87..8e5743e6c 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeDone.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotBeDone.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotHaveFailed.java b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotHaveFailed.java
index 95d7741ad..b4bc5e74f 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotHaveFailed.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/ShouldNotHaveFailed.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/future/Warning.java b/assertj-core/src/main/java/org/assertj/core/error/future/Warning.java
index d635cfe5f..716e9973b 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/future/Warning.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/future/Warning.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.future;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldBeEqualToWithSortedQueryParameters.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldBeEqualToWithSortedQueryParameters.java
index 1725769d7..cd033bc39 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldBeEqualToWithSortedQueryParameters.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldBeEqualToWithSortedQueryParameters.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAnchor.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAnchor.java
index a2fd5c662..94b965dee 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAnchor.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAnchor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAuthority.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAuthority.java
index aa16b5f32..042cffc51 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAuthority.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveAuthority.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveFragment.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveFragment.java
index df80b11b4..36e953c40 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveFragment.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveFragment.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveHost.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveHost.java
index 850f3299d..731d4f310 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveHost.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveHost.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveNoHost.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveNoHost.java
index bbbc997db..78c644af0 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveNoHost.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveNoHost.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveParameter.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveParameter.java
index 7df003bd2..d89c35a05 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveParameter.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveParameter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePath.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePath.java
index 85eed5bb1..ff2c5ebb4 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePath.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePath.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePort.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePort.java
index 84719353d..9dd9a11c3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePort.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHavePort.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveProtocol.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveProtocol.java
index 02d100a72..64d265962 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveProtocol.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveProtocol.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveQuery.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveQuery.java
index d37b682e4..ab9b0864a 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveQuery.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveQuery.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveScheme.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveScheme.java
index fa79c5cf1..2c4cd08b3 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveScheme.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveScheme.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveUserInfo.java b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveUserInfo.java
index 893a1cd19..32dc8279d 100644
--- a/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveUserInfo.java
+++ b/assertj-core/src/main/java/org/assertj/core/error/uri/ShouldHaveUserInfo.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.error.uri;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/extractor/ByNameMultipleExtractor.java b/assertj-core/src/main/java/org/assertj/core/extractor/ByNameMultipleExtractor.java
index e0e05d522..071ccbbdc 100644
--- a/assertj-core/src/main/java/org/assertj/core/extractor/ByNameMultipleExtractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/extractor/ByNameMultipleExtractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.extractor;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/extractor/ByNameSingleExtractor.java b/assertj-core/src/main/java/org/assertj/core/extractor/ByNameSingleExtractor.java
index 386e660d2..2c0f3db47 100644
--- a/assertj-core/src/main/java/org/assertj/core/extractor/ByNameSingleExtractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/extractor/ByNameSingleExtractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.extractor;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/extractor/Extractors.java b/assertj-core/src/main/java/org/assertj/core/extractor/Extractors.java
index 1dcaee043..94b4d3611 100644
--- a/assertj-core/src/main/java/org/assertj/core/extractor/Extractors.java
+++ b/assertj-core/src/main/java/org/assertj/core/extractor/Extractors.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.extractor;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/extractor/ResultOfExtractor.java b/assertj-core/src/main/java/org/assertj/core/extractor/ResultOfExtractor.java
index fb9a836f2..3b18ed8b2 100644
--- a/assertj-core/src/main/java/org/assertj/core/extractor/ResultOfExtractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/extractor/ResultOfExtractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.extractor;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/extractor/ToStringExtractor.java b/assertj-core/src/main/java/org/assertj/core/extractor/ToStringExtractor.java
index fc4c269f1..4376cd68c 100644
--- a/assertj-core/src/main/java/org/assertj/core/extractor/ToStringExtractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/extractor/ToStringExtractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.extractor;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/groups/FieldsOrPropertiesExtractor.java b/assertj-core/src/main/java/org/assertj/core/groups/FieldsOrPropertiesExtractor.java
index abb3fb0d2..e83d7e3c2 100644
--- a/assertj-core/src/main/java/org/assertj/core/groups/FieldsOrPropertiesExtractor.java
+++ b/assertj-core/src/main/java/org/assertj/core/groups/FieldsOrPropertiesExtractor.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.groups;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/groups/Properties.java b/assertj-core/src/main/java/org/assertj/core/groups/Properties.java
index 430459534..b2959b0a5 100644
--- a/assertj-core/src/main/java/org/assertj/core/groups/Properties.java
+++ b/assertj-core/src/main/java/org/assertj/core/groups/Properties.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.groups;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/groups/Tuple.java b/assertj-core/src/main/java/org/assertj/core/groups/Tuple.java
index ccf49a2e2..b9fc24a4a 100644
--- a/assertj-core/src/main/java/org/assertj/core/groups/Tuple.java
+++ b/assertj-core/src/main/java/org/assertj/core/groups/Tuple.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.groups;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/AbstractComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/AbstractComparisonStrategy.java
index 97ad3a86b..62293d60f 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/AbstractComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/AbstractComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Arrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Arrays.java
index 11c760852..c25fc40a6 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Arrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Arrays.java
@@ -8,12 +8,13 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
 import static java.lang.reflect.Array.getLength;
 import static java.util.Objects.requireNonNull;
+import static org.assertj.core.error.ActualIsNotEmpty.actualIsNotEmpty;
 import static org.assertj.core.error.ConditionAndGroupGenericParameterTypeShouldBeTheSame.shouldBeSameGenericBetweenIterableAndCondition;
 import static org.assertj.core.error.ElementsShouldBe.elementsShouldBe;
 import static org.assertj.core.error.ElementsShouldBeAtLeast.elementsShouldBeAtLeast;
@@ -71,6 +72,7 @@ import static org.assertj.core.internal.CommonValidations.hasSameSizeAsCheck;
 import static org.assertj.core.internal.IterableDiff.diff;
 import static org.assertj.core.util.ArrayWrapperList.wrap;
 import static org.assertj.core.util.Arrays.isArray;
+import static org.assertj.core.util.Arrays.isArrayEmpty;
 import static org.assertj.core.util.Arrays.prepend;
 import static org.assertj.core.util.Arrays.sizeOf;
 import static org.assertj.core.util.IterableUtil.isNullOrEmpty;
@@ -196,7 +198,7 @@ public class Arrays {
 
   @VisibleForTesting
   public void assertContains(AssertionInfo info, Failures failures, Object actual, Object values) {
-    if (commonChecks(info, actual, values)) return;
+    if (commonChecks(info, failures, actual, values)) return;
     Set<Object> notFound = new LinkedHashSet<>();
     int valueCount = sizeOf(values);
     for (int i = 0; i < valueCount; i++) {
@@ -243,7 +245,7 @@ public class Arrays {
   }
 
   void assertContainsOnly(AssertionInfo info, Failures failures, Object actual, Object values) {
-    if (commonChecks(info, actual, values)) return;
+    if (commonChecks(info, failures, actual, values)) return;
     List<Object> notExpected = asList(actual);
     List<Object> notFound = asList(values);
 
@@ -274,7 +276,7 @@ public class Arrays {
   }
 
   void assertContainsExactly(AssertionInfo info, Failures failures, Object actual, Object values) {
-    if (commonChecks(info, actual, values)) return;
+    if (commonChecks(info, failures, actual, values)) return;
     assertIsArray(info, actual);
     assertIsArray(info, values);
 
@@ -297,7 +299,7 @@ public class Arrays {
   }
 
   void assertContainsExactlyInAnyOrder(AssertionInfo info, Failures failures, Object actual, Object values) {
-    if (commonChecks(info, actual, values)) return;
+    if (commonChecks(info, failures, actual, values)) return;
     List<Object> notExpected = asList(actual);
     List<Object> notFound = asList(values);
 
@@ -314,7 +316,7 @@ public class Arrays {
   }
 
   void assertContainsOnlyOnce(AssertionInfo info, Failures failures, Object actual, Object values) {
-    if (commonChecks(info, actual, values))
+    if (commonChecks(info, failures, actual, values))
       return;
     Iterable<?> actualDuplicates = comparisonStrategy.duplicatesFrom(asList(actual));
     Set<Object> notFound = new LinkedHashSet<>();
@@ -344,7 +346,7 @@ public class Arrays {
   }
 
   void assertContainsSequence(AssertionInfo info, Failures failures, Object actual, Object sequence) {
-    if (commonChecks(info, actual, sequence)) return;
+    if (commonChecks(info, failures, actual, sequence)) return;
     // look for given sequence, stop check when there are not enough elements remaining in actual to contain sequence
     int lastIndexWhereSequenceCanBeFound = sizeOf(actual) - sizeOf(sequence);
     for (int actualIndex = 0; actualIndex <= lastIndexWhereSequenceCanBeFound; actualIndex++) {
@@ -354,7 +356,7 @@ public class Arrays {
   }
 
   void assertDoesNotContainSequence(AssertionInfo info, Failures failures, Object actual, Object sequence) {
-    if (commonChecks(info, actual, sequence)) return;
+    if (commonChecks(info, failures, actual, sequence)) return;
 
     // look for given sequence, stop check when there are not enough elements remaining in actual to contain sequence
     int lastIndexWhereSequenceCanBeFound = sizeOf(actual) - sizeOf(sequence);
@@ -383,7 +385,7 @@ public class Arrays {
   }
 
   void assertContainsSubsequence(AssertionInfo info, Failures failures, Object actual, Object subsequence) {
-    if (commonChecks(info, actual, subsequence)) return;
+    if (commonChecks(info, failures, actual, subsequence)) return;
 
     int sizeOfActual = sizeOf(actual);
     int sizeOfSubsequence = sizeOf(subsequence);
@@ -422,7 +424,7 @@ public class Arrays {
   }
 
   void assertDoesNotContainSubsequence(AssertionInfo info, Failures failures, Object actual, Object subsequence) {
-    if (commonChecks(info, actual, subsequence)) return;
+    if (commonChecks(info, failures, actual, subsequence)) return;
 
     int sizeOfActual = sizeOf(actual);
     int sizeOfSubsequence = sizeOf(subsequence);
@@ -480,7 +482,7 @@ public class Arrays {
   }
 
   void assertStartsWith(AssertionInfo info, Failures failures, Object actual, Object sequence) {
-    if (commonChecks(info, actual, sequence))
+    if (commonChecks(info, failures, actual, sequence))
       return;
     int sequenceSize = sizeOf(sequence);
     int arraySize = sizeOf(actual);
@@ -491,11 +493,11 @@ public class Arrays {
     }
   }
 
-  private static boolean commonChecks(AssertionInfo info, Object actual, Object sequence) {
+  private static boolean commonChecks(AssertionInfo info, Failures failures, Object actual, Object sequence) {
     checkNulls(info, actual, sequence);
     // if both actual and values are empty arrays, then assertion passes.
     if (isArrayEmpty(actual) && isArrayEmpty(sequence)) return true;
-    failIfEmptySinceActualIsNotEmpty(sequence);
+    failIfEmptySinceActualIsNotEmpty(info, failures, actual, sequence);
     return false;
 
   }
@@ -626,7 +628,7 @@ public class Arrays {
   }
 
   public void assertContainsAnyOf(AssertionInfo info, Failures failures, Object actual, Object values) {
-    if (commonChecks(info, actual, values)) return;
+    if (commonChecks(info, failures, actual, values)) return;
     assertIsArray(info, actual);
     assertIsArray(info, values);
 
@@ -757,10 +759,6 @@ public class Arrays {
     if (values == null) throw arrayOfValuesToLookForIsNull();
   }
 
-  static boolean isArrayEmpty(Object array) {
-    return sizeOf(array) == 0;
-  }
-
   private AssertionError arrayDoesNotEndWithSequence(AssertionInfo info, Failures failures, Object array,
                                                      Object sequence) {
     return failures.failure(info, shouldEndWith(array, sequence, comparisonStrategy));
@@ -770,8 +768,9 @@ public class Arrays {
     Objects.instance().assertNotNull(info, array);
   }
 
-  private static void failIfEmptySinceActualIsNotEmpty(Object values) {
-    if (isArrayEmpty(values)) throw new AssertionError("actual is not empty while group of values to look for is.");
+  private static void failIfEmptySinceActualIsNotEmpty(AssertionInfo info, Failures failures, Object actual,
+                                                       Object values) {
+    if (isArrayEmpty(values)) throw failures.failure(info, actualIsNotEmpty(actual));
   }
 
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Arrays2D.java b/assertj-core/src/main/java/org/assertj/core/internal/Arrays2D.java
index 751f01124..8f3212651 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Arrays2D.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Arrays2D.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/AtomicReferenceArrayElementComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/AtomicReferenceArrayElementComparisonStrategy.java
index a79242ca0..c98b81bec 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/AtomicReferenceArrayElementComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/AtomicReferenceArrayElementComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/BigDecimals.java b/assertj-core/src/main/java/org/assertj/core/internal/BigDecimals.java
index 4dc04cb34..00fd58fba 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/BigDecimals.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/BigDecimals.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/BigIntegers.java b/assertj-core/src/main/java/org/assertj/core/internal/BigIntegers.java
index 5ad794aaf..e8ed2652b 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/BigIntegers.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/BigIntegers.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiff.java b/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiff.java
index 45ff1f45e..8e5af56bb 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiff.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiff.java
@@ -8,10 +8,11 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
+import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
@@ -36,7 +37,7 @@ public class BinaryDiff {
 
   @VisibleForTesting
   public BinaryDiffResult diff(Path actual, byte[] expected) throws IOException {
-    try (InputStream actualStream = Files.newInputStream(actual)) {
+    try (InputStream actualStream = new BufferedInputStream(Files.newInputStream(actual))) {
       return diff(actualStream, expected);
     }
   }
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiffResult.java b/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiffResult.java
index 9b4d39365..0ae397a66 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiffResult.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/BinaryDiffResult.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Boolean2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Boolean2DArrays.java
index 38eb8ebec..5e8902517 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Boolean2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Boolean2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/BooleanArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/BooleanArrays.java
index b61640d78..7b9d18fff 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/BooleanArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/BooleanArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Booleans.java b/assertj-core/src/main/java/org/assertj/core/internal/Booleans.java
index f6f4c5266..55cb73710 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Booleans.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Booleans.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Byte2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Byte2DArrays.java
index f3cbbe67d..1eef21685 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Byte2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Byte2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ByteArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/ByteArrays.java
index 87c8000d5..a50522faf 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ByteArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ByteArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Bytes.java b/assertj-core/src/main/java/org/assertj/core/internal/Bytes.java
index 049668561..cc35aa4d7 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Bytes.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Bytes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Char2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Char2DArrays.java
index eb5281550..3cedf964a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Char2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Char2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/CharArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/CharArrays.java
index 9df6fb646..8fd04f4e2 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/CharArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/CharArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Characters.java b/assertj-core/src/main/java/org/assertj/core/internal/Characters.java
index 8412bd9d5..b1248d40d 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Characters.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Characters.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ChronoLocalDateTimeComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/ChronoLocalDateTimeComparator.java
index 4e69d616f..d548bc133 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ChronoLocalDateTimeComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ChronoLocalDateTimeComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ChronoZonedDateTimeByInstantComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/ChronoZonedDateTimeByInstantComparator.java
index 58b0f2273..e7a0e99a8 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ChronoZonedDateTimeByInstantComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ChronoZonedDateTimeByInstantComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Classes.java b/assertj-core/src/main/java/org/assertj/core/internal/Classes.java
index 55c02c062..6c45b7db4 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Classes.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Classes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
@@ -62,8 +62,8 @@ public class Classes {
     return INSTANCE;
   }
 
-  private Failures failures = Failures.instance();
-  private ComparisonStrategy comparisonStrategy = StandardComparisonStrategy.instance();
+  private final Failures failures = Failures.instance();
+  private final ComparisonStrategy comparisonStrategy = StandardComparisonStrategy.instance();
 
   /**
    * Verifies that the actual {@code Class} is assignable from all the {@code others} classes.
@@ -400,5 +400,4 @@ public class Classes {
   private static void classParameterIsNotNull(Class<?> clazz) {
     requireNonNull(clazz, "The class to compare actual with should not be null");
   }
-
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/CommonErrors.java b/assertj-core/src/main/java/org/assertj/core/internal/CommonErrors.java
index 2838b6008..235eb9a27 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/CommonErrors.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/CommonErrors.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/CommonValidations.java b/assertj-core/src/main/java/org/assertj/core/internal/CommonValidations.java
index 9d7eada00..531fda5bb 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/CommonValidations.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/CommonValidations.java
@@ -8,12 +8,13 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
 import static java.lang.String.format;
 import static java.util.Objects.requireNonNull;
+import static org.assertj.core.error.ActualIsNotEmpty.actualIsNotEmpty;
 import static org.assertj.core.error.ShouldHaveLineCount.shouldHaveLinesCount;
 import static org.assertj.core.error.ShouldHaveSameSizeAs.shouldHaveSameSizeAs;
 import static org.assertj.core.error.ShouldHaveSize.shouldHaveSize;
@@ -28,6 +29,7 @@ import static org.assertj.core.internal.CommonErrors.iterableOfValuesToLookForIs
 import static org.assertj.core.internal.CommonErrors.iterableOfValuesToLookForIsNull;
 import static org.assertj.core.internal.ErrorMessages.nullSequence;
 import static org.assertj.core.internal.ErrorMessages.nullSubsequence;
+import static org.assertj.core.util.Arrays.isArrayEmpty;
 import static org.assertj.core.util.IterableUtil.sizeOf;
 
 import java.lang.reflect.Array;
@@ -44,7 +46,7 @@ import org.assertj.core.data.Percentage;
  */
 public final class CommonValidations {
 
-  private static Failures failures = Failures.instance();
+  private static final Failures FAILURES = Failures.instance();
 
   private CommonValidations() {}
 
@@ -93,8 +95,9 @@ public final class CommonValidations {
     checkIsNotEmpty(iterable);
   }
 
-  public static void failIfEmptySinceActualIsNotEmpty(Object[] values) {
-    if (values.length == 0) throw new AssertionError("actual is not empty while group of values to look for is.");
+  public static void failIfEmptySinceActualIsNotEmpty(AssertionInfo info, Failures failures, Object actual,
+                                                      Object values) {
+    if (isArrayEmpty(values)) throw failures.failure(info, actualIsNotEmpty(actual));
   }
 
   public static void hasSameSizeAsCheck(AssertionInfo info, Object actual, Object other, int sizeOfActual) {
@@ -117,35 +120,36 @@ public final class CommonValidations {
   }
 
   static void checkSameSizes(AssertionInfo info, Object actual, Object other, int sizeOfActual, int sizeOfOther) {
-    if (sizeOfActual != sizeOfOther) throw failures.failure(info, shouldHaveSameSizeAs(actual, other, sizeOfActual, sizeOfOther));
+    if (sizeOfActual != sizeOfOther)
+      throw FAILURES.failure(info, shouldHaveSameSizeAs(actual, other, sizeOfActual, sizeOfOther));
   }
 
   public static void checkSizes(Object actual, int sizeOfActual, int sizeOfOther, AssertionInfo info) {
-    if (sizeOfActual != sizeOfOther) throw failures.failure(info, shouldHaveSize(actual, sizeOfActual, sizeOfOther));
+    if (sizeOfActual != sizeOfOther) throw FAILURES.failure(info, shouldHaveSize(actual, sizeOfActual, sizeOfOther));
   }
 
   public static void checkSizeGreaterThan(Object actual, int boundary, int sizeOfActual,
                                           AssertionInfo info) {
     if (!(sizeOfActual > boundary))
-      throw failures.failure(info, shouldHaveSizeGreaterThan(actual, sizeOfActual, boundary));
+      throw FAILURES.failure(info, shouldHaveSizeGreaterThan(actual, sizeOfActual, boundary));
   }
 
   public static void checkSizeGreaterThanOrEqualTo(Object actual, int boundary, int sizeOfActual,
                                                    AssertionInfo info) {
     if (!(sizeOfActual >= boundary))
-      throw failures.failure(info, shouldHaveSizeGreaterThanOrEqualTo(actual, sizeOfActual, boundary));
+      throw FAILURES.failure(info, shouldHaveSizeGreaterThanOrEqualTo(actual, sizeOfActual, boundary));
   }
 
   public static void checkSizeLessThan(Object actual, int boundary, int sizeOfActual,
                                        AssertionInfo info) {
     if (!(sizeOfActual < boundary))
-      throw failures.failure(info, shouldHaveSizeLessThan(actual, sizeOfActual, boundary));
+      throw FAILURES.failure(info, shouldHaveSizeLessThan(actual, sizeOfActual, boundary));
   }
 
   public static void checkSizeLessThanOrEqualTo(Object actual, int boundary, int sizeOfActual,
                                                 AssertionInfo info) {
     if (!(sizeOfActual <= boundary))
-      throw failures.failure(info, shouldHaveSizeLessThanOrEqualTo(actual, sizeOfActual, boundary));
+      throw FAILURES.failure(info, shouldHaveSizeLessThanOrEqualTo(actual, sizeOfActual, boundary));
   }
 
   public static void checkSizeBetween(Object actual, int lowerBoundary, int higherBoundary,
@@ -155,12 +159,12 @@ public final class CommonValidations {
                                                 higherBoundary, lowerBoundary));
 
     if (!(lowerBoundary <= sizeOfActual && sizeOfActual <= higherBoundary))
-      throw failures.failure(info, shouldHaveSizeBetween(actual, sizeOfActual, lowerBoundary, higherBoundary));
+      throw FAILURES.failure(info, shouldHaveSizeBetween(actual, sizeOfActual, lowerBoundary, higherBoundary));
   }
 
   public static void checkLineCounts(Object actual, int lineCountOfActual, int lineCountOfOther, AssertionInfo info) {
     if (lineCountOfActual != lineCountOfOther)
-      throw failures.failure(info, shouldHaveLinesCount(actual, lineCountOfActual, lineCountOfOther));
+      throw FAILURES.failure(info, shouldHaveLinesCount(actual, lineCountOfActual, lineCountOfOther));
   }
 
   public static void checkTypeIsNotNull(Class<?> expectedType) {
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Comparables.java b/assertj-core/src/main/java/org/assertj/core/internal/Comparables.java
index ccbad12aa..2171698d2 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Comparables.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Comparables.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ComparatorBasedComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/ComparatorBasedComparisonStrategy.java
index 13c171d3f..f62e113d9 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ComparatorBasedComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ComparatorBasedComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/ComparisonStrategy.java
index f5c9bba9f..0beac2842 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Conditions.java b/assertj-core/src/main/java/org/assertj/core/internal/Conditions.java
index d6534b2af..22ba66997 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Conditions.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Conditions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ConfigurableRecursiveFieldByFieldComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/ConfigurableRecursiveFieldByFieldComparator.java
index 5009119ab..a180ba181 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ConfigurableRecursiveFieldByFieldComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ConfigurableRecursiveFieldByFieldComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Dates.java b/assertj-core/src/main/java/org/assertj/core/internal/Dates.java
index fad048b56..de4f767e3 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Dates.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Dates.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/DeepDifference.java b/assertj-core/src/main/java/org/assertj/core/internal/DeepDifference.java
index 56116b61d..352d4785e 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/DeepDifference.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/DeepDifference.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/DescribableComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/DescribableComparator.java
index 98659fc16..5931a9815 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/DescribableComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/DescribableComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Diff.java b/assertj-core/src/main/java/org/assertj/core/internal/Diff.java
index efd54259d..d0bc15670 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Diff.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Diff.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/DigestDiff.java b/assertj-core/src/main/java/org/assertj/core/internal/DigestDiff.java
index b235bb89a..21ff1f404 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/DigestDiff.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/DigestDiff.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Digests.java b/assertj-core/src/main/java/org/assertj/core/internal/Digests.java
index 39b7ccb11..3161f4c24 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Digests.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Digests.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Double2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Double2DArrays.java
index af0444775..87a924e21 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Double2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Double2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/DoubleArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/DoubleArrays.java
index ad69a65c5..261047288 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/DoubleArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/DoubleArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Doubles.java b/assertj-core/src/main/java/org/assertj/core/internal/Doubles.java
index 8458bdec4..fc562a071 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Doubles.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Doubles.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ElementsSatisfyingConsumer.java b/assertj-core/src/main/java/org/assertj/core/internal/ElementsSatisfyingConsumer.java
index 947d829c9..5ddfc96fc 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ElementsSatisfyingConsumer.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ElementsSatisfyingConsumer.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ErrorMessages.java b/assertj-core/src/main/java/org/assertj/core/internal/ErrorMessages.java
index 837eb8e87..ad0dd9df1 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ErrorMessages.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ErrorMessages.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ExtendedByTypesComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/ExtendedByTypesComparator.java
index 61ac12dfe..8ba380053 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ExtendedByTypesComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ExtendedByTypesComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Failures.java b/assertj-core/src/main/java/org/assertj/core/internal/Failures.java
index fafabf0ca..5ebe775c5 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Failures.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Failures.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/FieldByFieldComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/FieldByFieldComparator.java
index 17e2c0c8d..04dfe4732 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/FieldByFieldComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/FieldByFieldComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Files.java b/assertj-core/src/main/java/org/assertj/core/internal/Files.java
index 6508cf22e..b61a7fa04 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Files.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Files.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Float2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Float2DArrays.java
index fa8ff53c2..6eec6e6d9 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Float2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Float2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/FloatArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/FloatArrays.java
index a9805ad9d..5500d9cf7 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/FloatArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/FloatArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Floats.java b/assertj-core/src/main/java/org/assertj/core/internal/Floats.java
index 942244811..9f2d3ea04 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Floats.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Floats.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Futures.java b/assertj-core/src/main/java/org/assertj/core/internal/Futures.java
index 60837cb24..d52a6316d 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Futures.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Futures.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/IgnoringFieldsComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/IgnoringFieldsComparator.java
index 8cd8ab482..594a54f02 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/IgnoringFieldsComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/IgnoringFieldsComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/IndexedDiff.java b/assertj-core/src/main/java/org/assertj/core/internal/IndexedDiff.java
index de67d3fe8..87f94693f 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/IndexedDiff.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/IndexedDiff.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/InputStreams.java b/assertj-core/src/main/java/org/assertj/core/internal/InputStreams.java
index 7e6f309ef..0a9ccf41e 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/InputStreams.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/InputStreams.java
@@ -8,17 +8,15 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
 import static java.lang.String.format;
 import static java.util.Objects.requireNonNull;
-import static org.assertj.core.error.ShouldBeEmpty.shouldBeEmpty;
 import static org.assertj.core.error.ShouldHaveBinaryContent.shouldHaveBinaryContent;
 import static org.assertj.core.error.ShouldHaveDigest.shouldHaveDigest;
 import static org.assertj.core.error.ShouldHaveSameContent.shouldHaveSameContent;
-import static org.assertj.core.error.ShouldNotBeEmpty.shouldNotBeEmpty;
 import static org.assertj.core.internal.Digests.digestDiff;
 
 import java.io.IOException;
@@ -82,41 +80,6 @@ public class InputStreams {
     }
   }
 
-  /**
-   * Asserts that the given InputStreams is empty.
-   *
-   * @param info contains information about the assertion.
-   * @param actual the "actual" InputStream.
-   * @throws AssertionError if {@code actual} is not empty.
-   * @throws InputStreamsException if an I/O error occurs.
-   */
-  public void assertIsEmpty(AssertionInfo info, InputStream actual) {
-    assertNotNull(info, actual);
-    try {
-      if (actual.read() == -1) return;
-      throw failures.failure(info, shouldBeEmpty(actual));
-    } catch (IOException e) {
-      throw new InputStreamsException("Unable to read contents of InputStreams actual", e);
-    }
-  }
-
-  /**
-   * Asserts that the given InputStreams is not empty.
-   *
-   * @param info contains information about the assertion.
-   * @param actual the "actual" InputStream.
-   * @throws AssertionError if {@code actual} is not empty.
-   * @throws InputStreamsException if an I/O error occurs.
-   */
-  public void assertIsNotEmpty(AssertionInfo info, InputStream actual) {
-    assertNotNull(info, actual);
-    try {
-      if (actual.read() == -1) throw failures.failure(info, shouldNotBeEmpty());
-    } catch (IOException e) {
-      throw new InputStreamsException("Unable to read contents of InputStreams actual", e);
-    }
-  }
-
   /**
    * Asserts that the given InputStream has the same content as the given String.
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/InputStreamsException.java b/assertj-core/src/main/java/org/assertj/core/internal/InputStreamsException.java
index affc411fc..4f74256d5 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/InputStreamsException.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/InputStreamsException.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Int2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Int2DArrays.java
index d691d73e2..32bc1853a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Int2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Int2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/IntArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/IntArrays.java
index a33d37260..c9333de09 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/IntArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/IntArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Integers.java b/assertj-core/src/main/java/org/assertj/core/internal/Integers.java
index 2ee0cf2af..d13a465de 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Integers.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Integers.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/IterableDiff.java b/assertj-core/src/main/java/org/assertj/core/internal/IterableDiff.java
index f06033573..e01281667 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/IterableDiff.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/IterableDiff.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/IterableElementComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/IterableElementComparisonStrategy.java
index c5f2ef561..1e6535515 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/IterableElementComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/IterableElementComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Iterables.java b/assertj-core/src/main/java/org/assertj/core/internal/Iterables.java
index 543abcce3..1230fbe98 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Iterables.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Iterables.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
@@ -345,7 +345,7 @@ public class Iterables {
    */
   public void assertContains(AssertionInfo info, Iterable<?> actual, Object[] values) {
     final Collection<?> actualAsCollection = ensureActualCanBeReadMultipleTimes(actual);
-    if (commonCheckThatIterableAssertionSucceeds(info, actualAsCollection, values)) return;
+    if (commonCheckThatIterableAssertionSucceeds(info, failures, actualAsCollection, values)) return;
     // check for elements in values that are missing in actual.
     assertIterableContainsGivenValues(actual.getClass(), actualAsCollection, values, info);
   }
@@ -429,7 +429,7 @@ public class Iterables {
    *           {@code Iterable} contains values that are not in the given array.
    */
   public void assertContainsOnlyOnce(AssertionInfo info, Iterable<?> actual, Object[] values) {
-    if (commonCheckThatIterableAssertionSucceeds(info, actual, values)) return;
+    if (commonCheckThatIterableAssertionSucceeds(info, failures, actual, values)) return;
     // check for elements in values that are missing in actual.
     Set<Object> notFound = new LinkedHashSet<>();
     Set<Object> notOnlyOnce = new LinkedHashSet<>();
@@ -486,7 +486,7 @@ public class Iterables {
     // exhausted. Of course if 'actual' really is infinite then this could take a while :-D
     final Iterator<?> actualIterator = actual.iterator();
     if (!actualIterator.hasNext() && sequence.length == 0) return;
-    failIfEmptySinceActualIsNotEmpty(sequence);
+    failIfEmptySinceActualIsNotEmpty(info, failures, actual, sequence);
     // we only store sequence.length entries from actual in the LIFO, no need for more.
     Lifo lifo = new Lifo(sequence.length);
     while (actualIterator.hasNext()) {
@@ -557,7 +557,7 @@ public class Iterables {
    * @throws AssertionError if the given {@code Iterable} does not contain the given subsequence of objects.
    */
   public void assertContainsSubsequence(AssertionInfo info, Iterable<?> actual, Object[] subsequence) {
-    if (commonCheckThatIterableAssertionSucceeds(info, actual, subsequence)) return;
+    if (commonCheckThatIterableAssertionSucceeds(info, failures, actual, subsequence)) return;
     if (sizeOf(actual) < subsequence.length) {
       throw failures.failure(info, actualDoesNotHaveEnoughElementsToContainSubsequence(actual, subsequence));
     }
@@ -736,7 +736,7 @@ public class Iterables {
    * @throws AssertionError if the given {@code Iterable} does not start with the given sequence of objects.
    */
   public void assertStartsWith(AssertionInfo info, Iterable<?> actual, Object[] sequence) {
-    if (commonCheckThatIterableAssertionSucceeds(info, actual, sequence)) return;
+    if (commonCheckThatIterableAssertionSucceeds(info, failures, actual, sequence)) return;
     int i = 0;
     for (Object actualCurrentElement : actual) {
       if (i >= sequence.length) break;
@@ -800,11 +800,12 @@ public class Iterables {
     }
   }
 
-  private boolean commonCheckThatIterableAssertionSucceeds(AssertionInfo info, Iterable<?> actual, Object[] sequence) {
+  private boolean commonCheckThatIterableAssertionSucceeds(AssertionInfo info, Failures failures, Iterable<?> actual,
+                                                           Object[] sequence) {
     checkNotNullIterables(info, actual, sequence);
     // if both actual and values are empty, then assertion passes.
     if (!actual.iterator().hasNext() && sequence.length == 0) return true;
-    failIfEmptySinceActualIsNotEmpty(sequence);
+    failIfEmptySinceActualIsNotEmpty(info, failures, actual, sequence);
     return false;
   }
 
@@ -1381,7 +1382,7 @@ public class Iterables {
    * @throws AssertionError if the given {@code Iterable} does not contain any of given {@code values}.
    */
   public void assertContainsAnyOf(AssertionInfo info, Iterable<?> actual, Object[] values) {
-    if (commonCheckThatIterableAssertionSucceeds(info, actual, values))
+    if (commonCheckThatIterableAssertionSucceeds(info, failures, actual, values))
       return;
 
     Iterable<Object> valuesToSearchFor = newArrayList(values);
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Iterators.java b/assertj-core/src/main/java/org/assertj/core/internal/Iterators.java
index f5ee296b4..cdd03f979 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Iterators.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Iterators.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Lists.java b/assertj-core/src/main/java/org/assertj/core/internal/Lists.java
index 78e5ff5f9..38b63b605 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Lists.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Lists.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Long2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Long2DArrays.java
index eac93be21..c4cf805a1 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Long2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Long2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/LongArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/LongArrays.java
index 6cdf860ef..74e5e2fec 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/LongArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/LongArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Longs.java b/assertj-core/src/main/java/org/assertj/core/internal/Longs.java
index 7556f64b9..ca0a15014 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Longs.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Longs.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Maps.java b/assertj-core/src/main/java/org/assertj/core/internal/Maps.java
index e5b1c4c8c..efb17c7ec 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Maps.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Maps.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/NioFilesWrapper.java b/assertj-core/src/main/java/org/assertj/core/internal/NioFilesWrapper.java
index 27fcf3a8c..369f5269a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/NioFilesWrapper.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/NioFilesWrapper.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Numbers.java b/assertj-core/src/main/java/org/assertj/core/internal/Numbers.java
index c5a01db3f..c36f5e706 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Numbers.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Numbers.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Object2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Object2DArrays.java
index 2d8d429ab..057339745 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Object2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Object2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrayElementComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrayElementComparisonStrategy.java
index a2c650571..866155d06 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrayElementComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrayElementComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrays.java
index c22a9f3aa..7c0024fcb 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ObjectArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Objects.java b/assertj-core/src/main/java/org/assertj/core/internal/Objects.java
index e8903e60c..20b5a5dad 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Objects.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Objects.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/OffsetDateTimeByInstantComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/OffsetDateTimeByInstantComparator.java
index cab4b3b10..bdc852b2c 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/OffsetDateTimeByInstantComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/OffsetDateTimeByInstantComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/OnFieldsComparator.java b/assertj-core/src/main/java/org/assertj/core/internal/OnFieldsComparator.java
index c1eaa9769..0be369220 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/OnFieldsComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/OnFieldsComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Paths.java b/assertj-core/src/main/java/org/assertj/core/internal/Paths.java
index c4174ec27..86ebdecfe 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Paths.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Paths.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Predicates.java b/assertj-core/src/main/java/org/assertj/core/internal/Predicates.java
index a2159767e..9dcabac6a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Predicates.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Predicates.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/RealNumbers.java b/assertj-core/src/main/java/org/assertj/core/internal/RealNumbers.java
index 77c06d304..098cb12ae 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/RealNumbers.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/RealNumbers.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Short2DArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/Short2DArrays.java
index 90b93074a..49535d8de 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Short2DArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Short2DArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/ShortArrays.java b/assertj-core/src/main/java/org/assertj/core/internal/ShortArrays.java
index 1c26bd4c0..5eaf752cb 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/ShortArrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/ShortArrays.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Shorts.java b/assertj-core/src/main/java/org/assertj/core/internal/Shorts.java
index 2e8eaab24..6050a7afb 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Shorts.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Shorts.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Spliterators.java b/assertj-core/src/main/java/org/assertj/core/internal/Spliterators.java
index ef00bf4b3..f77ff618e 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Spliterators.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Spliterators.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/StandardComparisonStrategy.java b/assertj-core/src/main/java/org/assertj/core/internal/StandardComparisonStrategy.java
index 29f646066..84f29f11e 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/StandardComparisonStrategy.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/StandardComparisonStrategy.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Strings.java b/assertj-core/src/main/java/org/assertj/core/internal/Strings.java
index e7e5f9527..5e40a0677 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Strings.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Strings.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
@@ -18,7 +18,11 @@ import static java.lang.String.format;
 import static java.util.Arrays.stream;
 import static java.util.Locale.ROOT;
 import static java.util.Objects.requireNonNull;
+import static java.util.function.Function.identity;
+import static java.util.stream.Collectors.counting;
+import static java.util.stream.Collectors.groupingBy;
 import static java.util.stream.Collectors.toCollection;
+import static java.util.stream.Collectors.toMap;
 import static org.assertj.core.error.ShouldBeBase64.shouldBeBase64;
 import static org.assertj.core.error.ShouldBeEmpty.shouldBeEmpty;
 import static org.assertj.core.error.ShouldBeEqual.shouldBeEqual;
@@ -80,11 +84,17 @@ import java.io.LineNumberReader;
 import java.io.StringReader;
 import java.text.Normalizer;
 import java.util.Base64;
+import java.util.Collections;
 import java.util.Comparator;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
+import java.util.Map;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 import org.assertj.core.api.AssertionInfo;
 import org.assertj.core.util.VisibleForTesting;
@@ -98,6 +108,16 @@ import org.assertj.core.util.VisibleForTesting;
  */
 public class Strings {
 
+  private static final Set<Character> NON_BREAKING_SPACES;
+
+  static {
+    Set<Character> nonBreakingSpaces = new HashSet<>();
+    nonBreakingSpaces.add('\u00A0');
+    nonBreakingSpaces.add('\u2007');
+    nonBreakingSpaces.add('\u202F');
+    NON_BREAKING_SPACES = Collections.unmodifiableSet(nonBreakingSpaces);
+  }
+
   private static final String EMPTY_STRING = "";
   private static final Strings INSTANCE = new Strings();
   private static final String PUNCTUATION_REGEX = "\\p{Punct}";
@@ -255,7 +275,8 @@ public class Strings {
   public void assertContainsIgnoringCase(AssertionInfo info, CharSequence actual, CharSequence sequence) {
     checkCharSequenceIsNotNull(sequence);
     assertNotNull(info, actual);
-    if (!containsIgnoreCase(actual, sequence)) throw failures.failure(info, shouldContainIgnoringCase(actual, sequence));
+    if (!containsIgnoreCase(actual, sequence))
+      throw failures.failure(info, shouldContainIgnoringCase(actual, sequence));
   }
 
   private boolean containsIgnoreCase(CharSequence actual, CharSequence sequence) {
@@ -299,11 +320,13 @@ public class Strings {
   }
 
   public void assertEqualsIgnoringCase(AssertionInfo info, CharSequence actual, CharSequence expected) {
-    if (!areEqualIgnoringCase(actual, expected)) throw failures.failure(info, shouldBeEqual(actual, expected), actual, expected);
+    if (!areEqualIgnoringCase(actual, expected))
+      throw failures.failure(info, shouldBeEqual(actual, expected), actual, expected);
   }
 
   public void assertNotEqualsIgnoringCase(AssertionInfo info, CharSequence actual, CharSequence expected) {
-    if (areEqualIgnoringCase(actual, expected)) throw failures.failure(info, shouldNotBeEqualIgnoringCase(actual, expected));
+    if (areEqualIgnoringCase(actual, expected))
+      throw failures.failure(info, shouldNotBeEqualIgnoringCase(actual, expected));
   }
 
   private static boolean areEqualIgnoringCase(CharSequence actual, CharSequence expected) {
@@ -313,15 +336,15 @@ public class Strings {
   }
 
   public void assertIsEqualToNormalizingNewlines(AssertionInfo info, CharSequence actual, CharSequence expected) {
-    String actualNormalized = normalizeNewlines(actual);
-    String expectedNormalized = normalizeNewlines(expected);
-    if (!actualNormalized.equals(expectedNormalized))
-      throw failures.failure(info, shouldBeEqualIgnoringNewLineDifferences(actual, expected), actualNormalized,
-                             expectedNormalized);
+    String normalizedActual = normalizeNewlines(actual);
+    String normalizedExpected = normalizeNewlines(expected);
+    if (!java.util.Objects.equals(normalizedActual, normalizedExpected))
+      throw failures.failure(info, shouldBeEqualIgnoringNewLineDifferences(actual, expected), normalizedActual,
+                             normalizedExpected);
   }
 
-  private static String normalizeNewlines(CharSequence actual) {
-    return actual.toString().replace("\r\n", "\n");
+  private static String normalizeNewlines(CharSequence charSequence) {
+    return charSequence != null ? charSequence.toString().replace("\r\n", "\n") : null;
   }
 
   public void assertEqualsIgnoringWhitespace(AssertionInfo info, CharSequence actual, CharSequence expected) {
@@ -374,7 +397,7 @@ public class Strings {
     boolean lastWasSpace = true;
     for (int i = 0; i < toNormalize.length(); i++) {
       char c = toNormalize.charAt(i);
-      if (isWhitespace(c)) {
+      if (isWhitespace(c) || NON_BREAKING_SPACES.contains(c)) {
         if (!lastWasSpace) result.append(' ');
         lastWasSpace = true;
       } else {
@@ -582,16 +605,8 @@ public class Strings {
   public void assertContainsSubsequence(AssertionInfo info, CharSequence actual, CharSequence[] subsequence) {
     doCommonCheckForCharSequence(info, actual, subsequence);
 
-    Set<CharSequence> notFound = stream(subsequence).filter(value -> !stringContains(actual, value))
-                                                    .collect(toCollection(LinkedHashSet::new));
-
-    if (!notFound.isEmpty()) {
-      // don't bother looking for a subsequence, some of the subsequence elements were not found !
-      if (notFound.size() == 1 && subsequence.length == 1) {
-        throw failures.failure(info, shouldContain(actual, subsequence[0], comparisonStrategy));
-      }
-      throw failures.failure(info, shouldContain(actual, subsequence, notFound, comparisonStrategy));
-    }
+    Map<CharSequence, Integer> notFound = getNotFoundSubsequence(actual, subsequence);
+    handleNotFound(info, actual, subsequence, notFound);
 
     // we have found all the given values but were they in the expected order ?
     if (subsequence.length == 1) return; // no order check needed for a one element subsequence
@@ -610,6 +625,84 @@ public class Strings {
     }
   }
 
+  /**
+   * Handles the scenario where certain subsequences were not found in the actual CharSequence.
+   * Depending on the exact mismatch details, it throws appropriate assertion failures.
+   *
+   * @param info        Assertion metadata.
+   * @param actual      The actual CharSequence being checked.
+   * @param subsequence The expected subsequence to be found in the actual CharSequence.
+   * @param notFound    A map containing subsequences that were not found (or not found enough times) and their respective counts.
+   */
+  private void handleNotFound(AssertionInfo info, CharSequence actual,
+                              CharSequence[] subsequence, Map<CharSequence, Integer> notFound) {
+
+    // If there are no missing subsequences, there's nothing to handle, so return.
+    if (notFound.isEmpty()) return;
+
+    // Special case: If there's only one missing subsequence, and we were only looking for one,
+    // throw a specific failure for that.
+    if (notFound.size() == 1 && subsequence.length == 1) {
+      throw failures.failure(info, shouldContain(actual, subsequence[0], comparisonStrategy));
+    }
+
+    // Check if all the missing subsequences are due to not finding duplicates.
+    // If every value in 'notFound' map is greater than 0, this indicates that the corresponding
+    // subsequences were found, but not as many times as expected.
+    boolean anyDuplicateSubsequenceFound = notFound.values().stream().allMatch(count -> count > 0);
+
+    // If the above is true, throw a failure specifying the subsequence mismatch details.
+    if (anyDuplicateSubsequenceFound) {
+      throw failures.failure(info, shouldContainSubsequence(actual, subsequence, notFound, comparisonStrategy));
+    }
+
+    // Otherwise, filter the 'notFound' map to get the keys (subsequences) that were not found at all (value is 0).
+    Set<CharSequence> notFoundKeysWithZeroValue = notFound.entrySet().stream()
+                                                          .filter(entry -> entry.getValue() == 0)
+                                                          .map(Map.Entry::getKey)
+                                                          .collect(Collectors.toSet());
+    // Throw a failure specifying the completely missing subsequences.
+    throw failures.failure(info, shouldContain(actual, subsequence, notFoundKeysWithZeroValue, comparisonStrategy));
+  }
+
+  /**
+   * Computes and returns a map of subsequence elements that were not found (or not found enough times) in actual.
+   *
+   * @param actual      The actual CharSequence being checked.
+   * @param subsequence The expected subsequence to be found in the actual CharSequence.
+   * @return A map where the key represents the missing subsequence and the value represents the number of times it appears in 'actual'.
+   */
+  private Map<CharSequence, Integer> getNotFoundSubsequence(CharSequence actual, CharSequence[] subsequence) {
+    // Create a map to store how many times each element appears in the 'actual' sequence.
+    // We use a HashMap for efficient look-ups and modifications.
+    Map<CharSequence, Integer> actualCounts = new HashMap<>();
+
+    // Create a map to store how many times each element appears in the 'subsequence' array.
+    // We use the Java Streams API to group the elements by their identity and then count their occurrences.
+    Map<CharSequence, Long> subseqCounts = stream(subsequence).collect(groupingBy(identity(), counting()));
+
+    // For each element in the 'subsequence', compute its occurrences in the 'actual' sequence.
+    // If the element is not yet in the actualCounts map (v is null), then count its occurrences in 'actual'.
+    // If the element is already in the actualCounts map (v is not null), then keep its current count.
+    for (CharSequence value : subsequence) {
+      actualCounts.compute(value, (k, v) -> v == null ? countOccurrences(k, actual) : v);
+    }
+    // Return a map that contains only the elements from the 'subsequence' that appear more times in 'subsequence' than
+    // in 'actual'. The map's keys are the elements and the values are the number of times they appear in 'actual'.
+    return subseqCounts.entrySet().stream()
+                       .filter(entry -> entry.getValue() > actualCounts.getOrDefault(entry.getKey(), 0))
+                       .collect(toMap(// The key of the output map entry is the same as the subsequence entry key.
+                                      Map.Entry::getKey,
+                                      // The value of the output map entry is the number of times the key appears in
+                                      // 'actual'.
+                                      entry -> actualCounts.get(entry.getKey()),
+                                      // If there are duplicate keys when collecting (which shouldn't happen in this
+                                      // case), prefer the existing key.
+                                      (existing, replacement) -> existing,
+                                      // Use a LinkedHashMap to maintain the insertion order.
+                                      LinkedHashMap::new));
+  }
+
   private String removeUpTo(String string, CharSequence toRemove) {
     // we have already checked that toRemove was not null in doCommonCheckForCharSequence and this point string is not neither
     int index = indexOf(string, toRemove);
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Throwables.java b/assertj-core/src/main/java/org/assertj/core/internal/Throwables.java
index fd6dc4792..abd8aa35a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Throwables.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Throwables.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/TypeComparators.java b/assertj-core/src/main/java/org/assertj/core/internal/TypeComparators.java
index 5bae03381..ce9158d20 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/TypeComparators.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/TypeComparators.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/TypeHolder.java b/assertj-core/src/main/java/org/assertj/core/internal/TypeHolder.java
index 352256e44..0732d858a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/TypeHolder.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/TypeHolder.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/TypeMessages.java b/assertj-core/src/main/java/org/assertj/core/internal/TypeMessages.java
index 2dc227936..7125f6a1a 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/TypeMessages.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/TypeMessages.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java b/assertj-core/src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java
index abe560953..093903bfc 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Uris.java b/assertj-core/src/main/java/org/assertj/core/internal/Uris.java
index 76b81cc01..505450c48 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Uris.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Uris.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/Urls.java b/assertj-core/src/main/java/org/assertj/core/internal/Urls.java
index 3e7897c2a..1ec7c54b2 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/Urls.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/Urls.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/internal/WholeNumbers.java b/assertj-core/src/main/java/org/assertj/core/internal/WholeNumbers.java
index c0bd637e8..371d41367 100644
--- a/assertj-core/src/main/java/org/assertj/core/internal/WholeNumbers.java
+++ b/assertj-core/src/main/java/org/assertj/core/internal/WholeNumbers.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.internal;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/matcher/AssertionMatcher.java b/assertj-core/src/main/java/org/assertj/core/matcher/AssertionMatcher.java
index 04a0729b1..d7f2a21ec 100644
--- a/assertj-core/src/main/java/org/assertj/core/matcher/AssertionMatcher.java
+++ b/assertj-core/src/main/java/org/assertj/core/matcher/AssertionMatcher.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.matcher;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/BinaryRepresentation.java b/assertj-core/src/main/java/org/assertj/core/presentation/BinaryRepresentation.java
index a59b0257f..69f0e476a 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/BinaryRepresentation.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/BinaryRepresentation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/BoundedQueue.java b/assertj-core/src/main/java/org/assertj/core/presentation/BoundedQueue.java
index 80cab1b5b..1a91a4968 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/BoundedQueue.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/BoundedQueue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/CompositeRepresentation.java b/assertj-core/src/main/java/org/assertj/core/presentation/CompositeRepresentation.java
index 7c2af9b9a..69e25f5ab 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/CompositeRepresentation.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/CompositeRepresentation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/HeadTailAccumulator.java b/assertj-core/src/main/java/org/assertj/core/presentation/HeadTailAccumulator.java
index a3b002b80..d2c7b40df 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/HeadTailAccumulator.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/HeadTailAccumulator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/HexadecimalRepresentation.java b/assertj-core/src/main/java/org/assertj/core/presentation/HexadecimalRepresentation.java
index fbc55d578..86f771118 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/HexadecimalRepresentation.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/HexadecimalRepresentation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/NumberGrouping.java b/assertj-core/src/main/java/org/assertj/core/presentation/NumberGrouping.java
index 311d4f3bf..2d7836be1 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/NumberGrouping.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/NumberGrouping.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/PredicateDescription.java b/assertj-core/src/main/java/org/assertj/core/presentation/PredicateDescription.java
index 815dc9249..daf42160b 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/PredicateDescription.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/PredicateDescription.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/PrimitiveArrayList.java b/assertj-core/src/main/java/org/assertj/core/presentation/PrimitiveArrayList.java
index eda53ef63..d3809cb40 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/PrimitiveArrayList.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/PrimitiveArrayList.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/Representation.java b/assertj-core/src/main/java/org/assertj/core/presentation/Representation.java
index c876af310..39ac1434d 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/Representation.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/Representation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/RotatingQueue.java b/assertj-core/src/main/java/org/assertj/core/presentation/RotatingQueue.java
index a5a375e17..a371e55d5 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/RotatingQueue.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/RotatingQueue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/StandardRepresentation.java b/assertj-core/src/main/java/org/assertj/core/presentation/StandardRepresentation.java
index 57de0b412..012dc2842 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/StandardRepresentation.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/StandardRepresentation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/TransformingList.java b/assertj-core/src/main/java/org/assertj/core/presentation/TransformingList.java
index 3b2eabb47..794fd3e77 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/TransformingList.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/TransformingList.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/presentation/UnicodeRepresentation.java b/assertj-core/src/main/java/org/assertj/core/presentation/UnicodeRepresentation.java
index 1ee113b2d..332244c4c 100644
--- a/assertj-core/src/main/java/org/assertj/core/presentation/UnicodeRepresentation.java
+++ b/assertj-core/src/main/java/org/assertj/core/presentation/UnicodeRepresentation.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.presentation;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/AbstractComparableNumberComparator.java b/assertj-core/src/main/java/org/assertj/core/util/AbstractComparableNumberComparator.java
index bde53c724..daa3481c1 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/AbstractComparableNumberComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/AbstractComparableNumberComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/ArrayWrapperList.java b/assertj-core/src/main/java/org/assertj/core/util/ArrayWrapperList.java
index 23eac63ef..9b562d193 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/ArrayWrapperList.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/ArrayWrapperList.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Arrays.java b/assertj-core/src/main/java/org/assertj/core/util/Arrays.java
index 6c0bb64a3..99152b16d 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Arrays.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Arrays.java
@@ -8,10 +8,11 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
+import static java.lang.String.format;
 import static java.lang.reflect.Array.getLength;
 import static java.util.Arrays.stream;
 import static java.util.Collections.emptyList;
@@ -190,7 +191,7 @@ public class Arrays {
   }
 
   public static IllegalArgumentException notAnArrayOfPrimitives(Object o) {
-    return new IllegalArgumentException(String.format("<%s> is not an array of primitives", o));
+    return new IllegalArgumentException(format("<%s> is not an array of primitives", o));
   }
 
   @SuppressWarnings("unchecked")
@@ -202,9 +203,14 @@ public class Arrays {
   }
 
   public static int sizeOf(Object array) {
+    if (!isArray(array)) throw new IllegalArgumentException(format("expecting %s to be an array", array));
     if (array instanceof Object[]) return ((Object[]) array).length;
     return getLength(array);
   }
 
+  public static boolean isArrayEmpty(Object array) {
+    return sizeOf(array) == 0;
+  }
+
   private Arrays() {}
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/util/BigDecimalComparator.java b/assertj-core/src/main/java/org/assertj/core/util/BigDecimalComparator.java
index 2f61a9bc9..01d0f838f 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/BigDecimalComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/BigDecimalComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/BigIntegerComparator.java b/assertj-core/src/main/java/org/assertj/core/util/BigIntegerComparator.java
index 33f90059d..7542a4946 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/BigIntegerComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/BigIntegerComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/CanIgnoreReturnValue.java b/assertj-core/src/main/java/org/assertj/core/util/CanIgnoreReturnValue.java
index cccdfae2e..662af7233 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/CanIgnoreReturnValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/CanIgnoreReturnValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/CheckReturnValue.java b/assertj-core/src/main/java/org/assertj/core/util/CheckReturnValue.java
index 2b753b50f..4a019fb97 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/CheckReturnValue.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/CheckReturnValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/ClassNameComparator.java b/assertj-core/src/main/java/org/assertj/core/util/ClassNameComparator.java
index d5c3480d1..3c7823f75 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/ClassNameComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/ClassNameComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Closeables.java b/assertj-core/src/main/java/org/assertj/core/util/Closeables.java
index b8aa66e4e..499c4c2a2 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Closeables.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Closeables.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/DateUtil.java b/assertj-core/src/main/java/org/assertj/core/util/DateUtil.java
index b36fe5e5e..6b684b763 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/DateUtil.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/DateUtil.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/DoubleComparator.java b/assertj-core/src/main/java/org/assertj/core/util/DoubleComparator.java
index 782d4d871..eee33228e 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/DoubleComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/DoubleComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/FailureMessages.java b/assertj-core/src/main/java/org/assertj/core/util/FailureMessages.java
index 51685b18e..4ac15deb0 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/FailureMessages.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/FailureMessages.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Files.java b/assertj-core/src/main/java/org/assertj/core/util/Files.java
index 3728f4d65..4ff1076ed 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Files.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Files.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/FloatComparator.java b/assertj-core/src/main/java/org/assertj/core/util/FloatComparator.java
index 842926e2d..b94c460fc 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/FloatComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/FloatComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Hexadecimals.java b/assertj-core/src/main/java/org/assertj/core/util/Hexadecimals.java
index 5127a8ec9..6b4a99a45 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Hexadecimals.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Hexadecimals.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/IterableUtil.java b/assertj-core/src/main/java/org/assertj/core/util/IterableUtil.java
index cbdde71d0..e6f4ef8f2 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/IterableUtil.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/IterableUtil.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Lists.java b/assertj-core/src/main/java/org/assertj/core/util/Lists.java
index d2b75d701..1a3587ec6 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Lists.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Lists.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Maps.java b/assertj-core/src/main/java/org/assertj/core/util/Maps.java
index 3f7e7dbb7..9a3b20b17 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Maps.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Maps.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/NaturalOrderComparator.java b/assertj-core/src/main/java/org/assertj/core/util/NaturalOrderComparator.java
index 1a2b54dad..198e3c0e0 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/NaturalOrderComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/NaturalOrderComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/NullSafeComparator.java b/assertj-core/src/main/java/org/assertj/core/util/NullSafeComparator.java
index 135fa9d88..f7ed624ed 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/NullSafeComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/NullSafeComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Objects.java b/assertj-core/src/main/java/org/assertj/core/util/Objects.java
index e78bef529..8613933a6 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Objects.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Objects.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/PathNaturalOrderComparator.java b/assertj-core/src/main/java/org/assertj/core/util/PathNaturalOrderComparator.java
index ef3a1d0bf..93797fa25 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/PathNaturalOrderComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/PathNaturalOrderComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Paths.java b/assertj-core/src/main/java/org/assertj/core/util/Paths.java
index 2d7181274..fba6a22d1 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Paths.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Paths.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Preconditions.java b/assertj-core/src/main/java/org/assertj/core/util/Preconditions.java
index e73b5865c..5333f5a40 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Preconditions.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Preconditions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Sets.java b/assertj-core/src/main/java/org/assertj/core/util/Sets.java
index 4920037db..9ec97484e 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Sets.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Sets.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Streams.java b/assertj-core/src/main/java/org/assertj/core/util/Streams.java
index 89f3bf7e2..ec7a428f0 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Streams.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Streams.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Strings.java b/assertj-core/src/main/java/org/assertj/core/util/Strings.java
index f6308f9c4..b76d994fa 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Strings.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Strings.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/TextFileWriter.java b/assertj-core/src/main/java/org/assertj/core/util/TextFileWriter.java
index 6a545634d..e723e749a 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/TextFileWriter.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/TextFileWriter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/Throwables.java b/assertj-core/src/main/java/org/assertj/core/util/Throwables.java
index e21aef9a1..58064b139 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/Throwables.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/Throwables.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/TriFunction.java b/assertj-core/src/main/java/org/assertj/core/util/TriFunction.java
index 2a9fc5bfc..c7c54f651 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/TriFunction.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/TriFunction.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/URLs.java b/assertj-core/src/main/java/org/assertj/core/util/URLs.java
index 75a2e2dac..6e21135e7 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/URLs.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/URLs.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/VisibleForTesting.java b/assertj-core/src/main/java/org/assertj/core/util/VisibleForTesting.java
index c0ecce878..04c0a493a 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/VisibleForTesting.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/VisibleForTesting.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/ChangeDelta.java b/assertj-core/src/main/java/org/assertj/core/util/diff/ChangeDelta.java
index 5af99c369..f1bda5716 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/ChangeDelta.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/ChangeDelta.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/Chunk.java b/assertj-core/src/main/java/org/assertj/core/util/diff/Chunk.java
index e88495469..15b2614c1 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/Chunk.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/Chunk.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/DeleteDelta.java b/assertj-core/src/main/java/org/assertj/core/util/diff/DeleteDelta.java
index 399a89e14..0c704e766 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/DeleteDelta.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/DeleteDelta.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/Delta.java b/assertj-core/src/main/java/org/assertj/core/util/diff/Delta.java
index 86e45ff6b..01b9cc269 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/Delta.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/Delta.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/DeltaComparator.java b/assertj-core/src/main/java/org/assertj/core/util/diff/DeltaComparator.java
index 1d9941cf2..b0c3b95cb 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/DeltaComparator.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/DeltaComparator.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/DiffAlgorithm.java b/assertj-core/src/main/java/org/assertj/core/util/diff/DiffAlgorithm.java
index 8a5525185..f5bc26ddf 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/DiffAlgorithm.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/DiffAlgorithm.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/DiffUtils.java b/assertj-core/src/main/java/org/assertj/core/util/diff/DiffUtils.java
index 8ccf1416f..6b576afe6 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/DiffUtils.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/DiffUtils.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/InsertDelta.java b/assertj-core/src/main/java/org/assertj/core/util/diff/InsertDelta.java
index 4bfb87e11..2468230b0 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/InsertDelta.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/InsertDelta.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/Patch.java b/assertj-core/src/main/java/org/assertj/core/util/diff/Patch.java
index dce42bd0b..c677f87b3 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/Patch.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/Patch.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/DiffNode.java b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/DiffNode.java
index d942692de..1660c6796 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/DiffNode.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/DiffNode.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff.myers;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Equalizer.java b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Equalizer.java
index 2935cea3c..ea90eb70a 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Equalizer.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Equalizer.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff.myers;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/MyersDiff.java b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/MyersDiff.java
index 992261db9..704b8d8b5 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/MyersDiff.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/MyersDiff.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff.myers;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/PathNode.java b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/PathNode.java
index 45a53d512..83db081ff 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/PathNode.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/PathNode.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff.myers;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Snake.java b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Snake.java
index dd3814fc3..4ead4cec1 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Snake.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/diff/myers/Snake.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.diff.myers;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/CaseFormatUtils.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/CaseFormatUtils.java
index 417eca059..688df5b26 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/CaseFormatUtils.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/CaseFormatUtils.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/ClassUtils.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/ClassUtils.java
index 4590b5707..d1db94020 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/ClassUtils.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/ClassUtils.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldSupport.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldSupport.java
index 0cf7f0046..643b400eb 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldSupport.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldSupport.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldUtils.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldUtils.java
index c3c924567..07f740105 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldUtils.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/FieldUtils.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/Introspection.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/Introspection.java
index 072b8dfd3..085ab061d 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/Introspection.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/Introspection.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/IntrospectionError.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/IntrospectionError.java
index a95dfd237..b1e062c32 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/IntrospectionError.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/IntrospectionError.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/MemberUtils.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/MemberUtils.java
index b5b6d4547..f14144a9f 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/MemberUtils.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/MemberUtils.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/MethodSupport.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/MethodSupport.java
index 84d3d6e6b..bc4033e50 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/MethodSupport.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/MethodSupport.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java
index 53d6455ec..9ace10309 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertySupport.java b/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertySupport.java
index fbd13eb7f..3c8fc1ff6 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertySupport.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/introspection/PropertySupport.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.introspection;
 
diff --git a/assertj-core/src/main/java/org/assertj/core/util/xml/XmlStringPrettyFormatter.java b/assertj-core/src/main/java/org/assertj/core/util/xml/XmlStringPrettyFormatter.java
index 33c035b33..e7335cc68 100644
--- a/assertj-core/src/main/java/org/assertj/core/util/xml/XmlStringPrettyFormatter.java
+++ b/assertj-core/src/main/java/org/assertj/core/util/xml/XmlStringPrettyFormatter.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.core.util.xml;
 
diff --git a/assertj-core/src/main/java9/module-info.java b/assertj-core/src/main/java9/module-info.java
index f6c4dbdff..4d3d60be3 100644
--- a/assertj-core/src/main/java9/module-info.java
+++ b/assertj-core/src/main/java9/module-info.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 module org.assertj.core {
   // AssertJ Core's package API
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/Assertions.java b/assertj-guava/src/main/java/org/assertj/guava/api/Assertions.java
index 7b91f9b15..14d692dc7 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/Assertions.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/Assertions.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/ByteSourceAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/ByteSourceAssert.java
index e1f1b66c3..0835a2307 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/ByteSourceAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/ByteSourceAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/InstanceOfAssertFactories.java b/assertj-guava/src/main/java/org/assertj/guava/api/InstanceOfAssertFactories.java
index 52f823412..dc415e192 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/InstanceOfAssertFactories.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/InstanceOfAssertFactories.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/MultimapAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/MultimapAssert.java
index 8d9936a7f..6c0cc9dc3 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/MultimapAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/MultimapAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/MultisetAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/MultisetAssert.java
index aad3ed887..a02ff318d 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/MultisetAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/MultisetAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/OptionalAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/OptionalAssert.java
index 7d9a91ae3..a0ca567ad 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/OptionalAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/OptionalAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/RangeAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/RangeAssert.java
index dc5f56cfe..7898b51cc 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/RangeAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/RangeAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/RangeMapAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/RangeMapAssert.java
index b201777c1..d4f137271 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/RangeMapAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/RangeMapAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/RangeSetAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/RangeSetAssert.java
index 13ce63298..0e85c4dc4 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/RangeSetAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/RangeSetAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/api/TableAssert.java b/assertj-guava/src/main/java/org/assertj/guava/api/TableAssert.java
index 6c67f0ad7..d7b732ef1 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/api/TableAssert.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/api/TableAssert.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.api;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/data/MapEntry.java b/assertj-guava/src/main/java/org/assertj/guava/data/MapEntry.java
index 2918cae3b..89792e619 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/data/MapEntry.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/data/MapEntry.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.data;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtLeastTimes.java b/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtLeastTimes.java
index a0f422a3d..fce845b2c 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtLeastTimes.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtLeastTimes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtMostTimes.java b/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtMostTimes.java
index eb4456c1f..c0ab66994 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtMostTimes.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainAtMostTimes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainTimes.java b/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainTimes.java
index b7ca7106a..ee429301d 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainTimes.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/MultisetShouldContainTimes.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBeAbsent.java b/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBeAbsent.java
index 99649b06a..c452d6364 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBeAbsent.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBeAbsent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresent.java b/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresent.java
index 04d91ca67..aad30f84a 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresent.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresentWithValue.java b/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresentWithValue.java
index e210ab647..db1d9927b 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresentWithValue.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/OptionalShouldBePresentWithValue.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEnclose.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEnclose.java
index 67cb295d3..a15811dab 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEnclose.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEnclose.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEncloseAnyOf.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEncloseAnyOf.java
index 3c3991ec7..737aa2002 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEncloseAnyOf.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldEncloseAnyOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersect.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersect.java
index 4f0cadf06..026c8f8aa 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersect.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersect.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersectAnyOf.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersectAnyOf.java
index 3b22c22b7..758ff4a17 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersectAnyOf.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldIntersectAnyOf.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotEnclose.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotEnclose.java
index 5bd8cae90..7b160bf33 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotEnclose.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotEnclose.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotIntersect.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotIntersect.java
index 64a92f575..42c6e3a07 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotIntersect.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeSetShouldNotIntersect.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheLowerBound.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheLowerBound.java
index 6075bf32c..094ff7b9c 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheLowerBound.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheLowerBound.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheUpperBound.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheUpperBound.java
index d37729924..f81fbc069 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheUpperBound.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeClosedInTheUpperBound.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheLowerBound.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheLowerBound.java
index 32db1b11f..4a7a0ec2c 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheLowerBound.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheLowerBound.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheUpperBound.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheUpperBound.java
index 7806c5fb0..62197e9f0 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheUpperBound.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldBeOpenedInTheUpperBound.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveLowerEndpointEqual.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveLowerEndpointEqual.java
index 118050f3f..035996914 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveLowerEndpointEqual.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveLowerEndpointEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveUpperEndpointEqual.java b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveUpperEndpointEqual.java
index 10b510ceb..7c4b18e2d 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveUpperEndpointEqual.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/RangeShouldHaveUpperEndpointEqual.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainKeys.java b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainKeys.java
index ee51b20ca..6a28acd0b 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainKeys.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainKeys.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainValues.java b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainValues.java
index fd8d0f197..91a029d19 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainValues.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldContainValues.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSameContent.java b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSameContent.java
index 07c744cc2..449a74e04 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSameContent.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSameContent.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSize.java b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSize.java
index 0e4de69ce..1d1f9d69b 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSize.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/ShouldHaveSize.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainCell.java b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainCell.java
index 366ae49c9..3a5c307e3 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainCell.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainCell.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainColumns.java b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainColumns.java
index 760e7415a..294120f78 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainColumns.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainColumns.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainRows.java b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainRows.java
index 1e83cdaaa..7940d5023 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainRows.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldContainRows.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveColumnCount.java b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveColumnCount.java
index ac3d6f4a5..9f10019ff 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveColumnCount.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveColumnCount.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveRowCount.java b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveRowCount.java
index 95d8f84ec..33b0f6fac 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveRowCount.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/error/TableShouldHaveRowCount.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.error;
 
diff --git a/assertj-guava/src/main/java/org/assertj/guava/util/ExceptionUtils.java b/assertj-guava/src/main/java/org/assertj/guava/util/ExceptionUtils.java
index e5b00d58c..d3ffee452 100644
--- a/assertj-guava/src/main/java/org/assertj/guava/util/ExceptionUtils.java
+++ b/assertj-guava/src/main/java/org/assertj/guava/util/ExceptionUtils.java
@@ -8,7 +8,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  *
- * Copyright 2012-2023 the original author or authors.
+ * Copyright 2012-2024 the original author or authors.
  */
 package org.assertj.guava.util;
 
