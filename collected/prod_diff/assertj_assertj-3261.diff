diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java
index f4ba2b9a4..237480140 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractThrowableAssert.java
@@ -14,7 +14,9 @@ package org.assertj.core.api;
 
 import static java.lang.String.format;
 import static org.assertj.core.error.ShouldNotHaveThrown.shouldNotHaveThrown;
+import static org.assertj.core.error.ShouldNotHaveThrownExcept.shouldNotHaveThrownExcept;
 
+import java.util.Arrays;
 import java.util.IllegalFormatException;
 import java.util.regex.Pattern;
 
@@ -37,6 +39,7 @@ import org.assertj.core.util.VisibleForTesting;
  * @author Mikhail Mazursky
  * @author Jack Gough
  * @author Mike Gilchrist
+ * @author Paweł Baczyński
  */
 public abstract class AbstractThrowableAssert<SELF extends AbstractThrowableAssert<SELF, ACTUAL>, ACTUAL extends Throwable>
     extends AbstractObjectAssert<SELF, ACTUAL> {
@@ -843,6 +846,45 @@ public abstract class AbstractThrowableAssert<SELF extends AbstractThrowableAsse
     if (actual != null) throw Failures.instance().failure(info, shouldNotHaveThrown(actual));
   }
 
+  /**
+   * Verifies that the {@link org.assertj.core.api.ThrowableAssert.ThrowingCallable} didn't raise a throwable
+   * except matching the provided type(s).
+   * <p>
+   * Example :
+   * <pre><code class='java'>
+   * void foo() {
+   *   throw new IllegalArgumentException();
+   * }
+   *
+   * void bar() {
+   * }
+   *
+   * // assertions succeed:
+   * assertThatCode(() -&gt; foo()).doesNotThrowAnyExceptionExcept(RuntimeException.class);
+   * assertThatCode(() -&gt; foo()).doesNotThrowAnyExceptionExcept(IllegalArgumentException.class);
+   * assertThatCode(() -&gt; foo()).doesNotThrowAnyExceptionExcept(IllegalArgumentException.class, IllegalStateException.class);
+   * assertThatCode(() -&gt; bar()).doesNotThrowAnyExceptionExcept();
+   * assertThatCode(() -&gt; bar()).doesNotThrowAnyExceptionExcept(RuntimeException.class);
+   *
+   * // assertions fails:
+   * assertThatCode(() -&gt; foo()).doesNotThrowAnyExceptionExcept();
+   * assertThatCode(() -&gt; foo()).doesNotThrowAnyExceptionExcept(IllegalStateException.class);
+   * assertThatCode(() -&gt; foo()).doesNotThrowAnyExceptionExcept(NumberFormatException.class);</code></pre>
+   *
+   * @param exceptionTypes types allowed to be thrown.
+   * @throws AssertionError if the actual statement raised a {@code Throwable} with type other than provided one(s).
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public final void doesNotThrowAnyExceptionExcept(Class<? extends Throwable>... exceptionTypes) {
+    if (isNotAnyOf(exceptionTypes)) throw Failures.instance().failure(info, shouldNotHaveThrownExcept(actual, exceptionTypes));
+  }
+
+  private boolean isNotAnyOf(Class<? extends Throwable>[] exceptionTypes) {
+    if (actual == null) return false;
+    return Arrays.stream(exceptionTypes).noneMatch(ex -> ex.isAssignableFrom(actual.getClass()));
+  }
+
   /**
    * A shortcut for <code>extracting(Throwable::getMessage, as(InstanceOfAssertFactories.STRING))</code> which allows 
    * to extract a throwable's message and then execute assertions on it.
diff --git a/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrownExcept.java b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrownExcept.java
new file mode 100644
index 000000000..6d740f983
--- /dev/null
+++ b/assertj-core/src/main/java/org/assertj/core/error/ShouldNotHaveThrownExcept.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static org.assertj.core.util.Throwables.getStackTrace;
+
+public class ShouldNotHaveThrownExcept extends BasicErrorMessageFactory {
+
+  @SafeVarargs
+  public static ErrorMessageFactory shouldNotHaveThrownExcept(Throwable throwable,
+                                                              Class<? extends Throwable>... throwableClasses) {
+    return new ShouldNotHaveThrownExcept(throwable, throwableClasses);
+  }
+
+  private ShouldNotHaveThrownExcept(Throwable throwable, Class<? extends Throwable>[] throwableClasses) {
+    super("%nExpecting code not to raise a throwable except%n  %s%nbut caught%n  %s",
+          throwableClasses, getStackTrace(throwable));
+  }
+}
