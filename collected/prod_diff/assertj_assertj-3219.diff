diff --git a/assertj-core/src/main/java/org/assertj/core/api/Assertions.java b/assertj-core/src/main/java/org/assertj/core/api/Assertions.java
index b08f1df97..4b530b682 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/Assertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/Assertions.java
@@ -2620,6 +2620,21 @@ public class Assertions implements InstanceOfAssertFactories {
     return AllOf.allOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfies(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> allOf(ThrowingConsumer<? super T>... consumers) {
+    return actual -> assertThat(actual).satisfies(consumers);
+  }
+
   /**
    * Only delegate to {@link AnyOf#anyOf(Condition...)} so that Assertions offers a full feature entry point to all
    * AssertJ features (but you can use {@link AnyOf} if you prefer).
@@ -2650,6 +2665,21 @@ public class Assertions implements InstanceOfAssertFactories {
     return AnyOf.anyOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfiesAnyOf(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> anyOf(ThrowingConsumer<? super T>... consumers) {
+    return actual -> assertThat(actual).satisfiesAnyOf(consumers);
+  }
+
   /**
    * Creates a new <code>{@link DoesNotHave}</code>.
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java
index c09a11d69..7bcd717e0 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/BDDAssertions.java
@@ -3149,6 +3149,21 @@ public class BDDAssertions extends Assertions {
     return Assertions.allOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfies(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> allOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.allOf(consumers);
+  }
+
   /**
    * Only delegate to {@link AnyOf#anyOf(Condition...)} so that Assertions offers a full feature entry point to all
    * AssertJ features (but you can use {@link AnyOf} if you prefer).
@@ -3183,6 +3198,21 @@ public class BDDAssertions extends Assertions {
     return Assertions.anyOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfiesAnyOf(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SafeVarargs
+  public static <T> ThrowingConsumer<T> anyOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.anyOf(consumers);
+  }
+
   /**
    * Creates a new <code>{@link DoesNotHave}</code>.
    *
diff --git a/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java b/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java
index 721c781e2..0ca117d9a 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/ThrowingConsumer.java
@@ -17,7 +17,8 @@ import java.util.function.Consumer;
 /**
  * {@link Consumer} that deals with checked exceptions by rethrowing them as {@link RuntimeException}.
  * <p>
- * More precisely, {@link RuntimeException} and {@link AssertionError} are rethrown as they are while any other {@link Throwable} are rethrown as {@link RuntimeException}. 
+ * More precisely, {@link RuntimeException} and {@link AssertionError} are rethrown as they are,
+ * while any other {@link Throwable} is wrapped in a {@link RuntimeException} and rethrown.
  *
  * @param <T> consumed type
  */
@@ -36,4 +37,5 @@ public interface ThrowingConsumer<T> extends Consumer<T> {
   }
 
   void acceptThrows(T input) throws Throwable;
+
 }
diff --git a/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java b/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java
index b0457e3b0..6f0564ebf 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/WithAssertions.java
@@ -238,6 +238,21 @@ public interface WithAssertions extends InstanceOfAssertFactories {
     return Assertions.allOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfies(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SuppressWarnings("unchecked")
+  default <T> ThrowingConsumer<T> allOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.allOf(consumers);
+  }
+
   /**
    * Creates a new instance of <code>{@link ObjectArrayAssert}</code>.
    *
@@ -1966,6 +1981,21 @@ public interface WithAssertions extends InstanceOfAssertFactories {
     return Assertions.anyOf(conditions);
   }
 
+  /**
+   * Create a new <code>{@link ThrowingConsumer}</code> that delegates the evaluation of the
+   * given consumers to {@link AbstractAssert#satisfiesAnyOf(ThrowingConsumer[])}.
+   *
+   * @param <T> the type of object the given consumers accept
+   * @param consumers the consumers to evaluate
+   * @return the {@code ThrowingConsumer} instance
+   *
+   * @since 3.25.0
+   */
+  @SuppressWarnings("unchecked")
+  default <T> ThrowingConsumer<T> anyOf(ThrowingConsumer<? super T>... consumers) {
+    return Assertions.anyOf(consumers);
+  }
+
   /**
    * Creates a new <code>{@link DoesNotHave}</code>.
    *
