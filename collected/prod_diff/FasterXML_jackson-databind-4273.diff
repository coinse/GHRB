diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
index df3a3b4e54..232add68ef 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
@@ -4,6 +4,9 @@ import java.io.IOException;
 import java.lang.reflect.Type;
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.text.NumberFormat;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 
@@ -38,6 +41,11 @@ public class NumberSerializer
 
     protected final boolean _isInt;
 
+    /**
+     * @since 2.17
+     */
+    protected final NumberFormat _format;
+
     /**
      * @since 2.5
      */
@@ -45,6 +53,16 @@ public class NumberSerializer
         super(rawType, false);
         // since this will NOT be constructed for Integer or Long, only case is:
         _isInt = (rawType == BigInteger.class);
+        _format = null;
+    }
+
+    /**
+     * @since 2.17
+     */
+    public NumberSerializer(NumberSerializer src, NumberFormat format) {
+        super(src);
+        _isInt = src._isInt;
+        _format = format;
     }
 
     @Override
@@ -55,6 +73,21 @@ public class NumberSerializer
         if (format != null) {
             switch (format.getShape()) {
             case STRING:
+                if (format.hasPattern()) {
+                    DecimalFormat decimalFormat;
+                    try {
+                        if (format.hasLocale()) {
+                            decimalFormat = new DecimalFormat(format.getPattern(),
+                                    DecimalFormatSymbols.getInstance(format.getLocale()));
+                        } else {
+                            decimalFormat = new DecimalFormat(format.getPattern());
+                        }
+                    } catch (IllegalArgumentException e) {
+                        return prov.reportBadDefinition(handledType(),
+                                String.format("Invalid `DecimalFormat`: \"%s\"", format.getPattern()));
+                    }
+                    return new NumberSerializer(this, decimalFormat);
+                }
                 // [databind#2264]: Need special handling for `BigDecimal`
                 if (((Class<?>) handledType()) == BigDecimal.class) {
                     return bigDecimalAsStringSerializer();
@@ -69,6 +102,10 @@ public class NumberSerializer
     @Override
     public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException
     {
+        if (_format != null) {
+            g.writeString(_format.format(value));
+            return;
+        }
         // should mostly come in as one of these two:
         if (value instanceof BigDecimal) {
             g.writeNumber((BigDecimal) value);
