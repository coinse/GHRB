diff --git a/auth/src/main/java/com/alibaba/nacos/auth/config/AuthConfigs.java b/auth/src/main/java/com/alibaba/nacos/auth/config/AuthConfigs.java
index 594feab5d..e19caa21a 100644
--- a/auth/src/main/java/com/alibaba/nacos/auth/config/AuthConfigs.java
+++ b/auth/src/main/java/com/alibaba/nacos/auth/config/AuthConfigs.java
@@ -107,12 +107,14 @@ public class AuthConfigs extends Subscriber<ServerConfigChangeEvent> {
         try {
             Map<String, Properties> newProperties = new HashMap<>(1);
             Properties properties = PropertiesUtil.getPropertiesWithPrefix(EnvUtil.getEnvironment(), PREFIX);
-            for (String each : properties.stringPropertyNames()) {
-                int typeIndex = each.indexOf('.');
-                String type = each.substring(0, typeIndex);
-                String subKey = each.substring(typeIndex + 1);
-                newProperties.computeIfAbsent(type, key -> new Properties())
-                        .setProperty(subKey, properties.getProperty(each));
+            if (properties != null) {
+                for (String each : properties.stringPropertyNames()) {
+                    int typeIndex = each.indexOf('.');
+                    String type = each.substring(0, typeIndex);
+                    String subKey = each.substring(typeIndex + 1);
+                    newProperties.computeIfAbsent(type, key -> new Properties())
+                            .setProperty(subKey, properties.getProperty(each));
+                }
             }
             authPluginProperties = newProperties;
         } catch (Exception e) {
@@ -177,8 +179,8 @@ public class AuthConfigs extends Subscriber<ServerConfigChangeEvent> {
             cachingEnabled = EnvUtil.getProperty(Constants.Auth.NACOS_CORE_AUTH_CACHING_ENABLED, Boolean.class, true);
             serverIdentityKey = EnvUtil.getProperty(Constants.Auth.NACOS_CORE_AUTH_SERVER_IDENTITY_KEY, "");
             serverIdentityValue = EnvUtil.getProperty(Constants.Auth.NACOS_CORE_AUTH_SERVER_IDENTITY_VALUE, "");
-            enableUserAgentAuthWhite = EnvUtil
-                    .getProperty(Constants.Auth.NACOS_CORE_AUTH_ENABLE_USER_AGENT_AUTH_WHITE, Boolean.class, false);
+            enableUserAgentAuthWhite = EnvUtil.getProperty(Constants.Auth.NACOS_CORE_AUTH_ENABLE_USER_AGENT_AUTH_WHITE,
+                    Boolean.class, false);
             nacosAuthSystemType = EnvUtil.getProperty(Constants.Auth.NACOS_CORE_AUTH_SYSTEM_TYPE, "");
             refreshPluginProperties();
             ModuleStateHolder.getInstance().getModuleState(AuthModuleStateBuilder.AUTH_MODULE)
diff --git a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConfigChangeConfigs.java b/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConfigChangeConfigs.java
index 0d348cba5..70b75083e 100644
--- a/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConfigChangeConfigs.java
+++ b/config/src/main/java/com/alibaba/nacos/config/server/configuration/ConfigChangeConfigs.java
@@ -54,12 +54,14 @@ public class ConfigChangeConfigs extends Subscriber<ServerConfigChangeEvent> {
         try {
             Map<String, Properties> newProperties = new HashMap<>(3);
             Properties properties = PropertiesUtil.getPropertiesWithPrefix(EnvUtil.getEnvironment(), PREFIX);
-            for (String each : properties.stringPropertyNames()) {
-                int typeIndex = each.indexOf('.');
-                String type = each.substring(0, typeIndex);
-                String subKey = each.substring(typeIndex + 1);
-                newProperties.computeIfAbsent(type, key -> new Properties())
-                        .setProperty(subKey, properties.getProperty(each));
+            if (properties != null) {
+                for (String each : properties.stringPropertyNames()) {
+                    int typeIndex = each.indexOf('.');
+                    String type = each.substring(0, typeIndex);
+                    String subKey = each.substring(typeIndex + 1);
+                    newProperties.computeIfAbsent(type, key -> new Properties())
+                            .setProperty(subKey, properties.getProperty(each));
+                }
             }
             configPluginProperties = newProperties;
         } catch (Exception e) {
diff --git a/core/src/main/java/com/alibaba/nacos/core/remote/tls/RpcServerTlsConfig.java b/core/src/main/java/com/alibaba/nacos/core/remote/tls/RpcServerTlsConfig.java
index 8548879db..e0b006846 100644
--- a/core/src/main/java/com/alibaba/nacos/core/remote/tls/RpcServerTlsConfig.java
+++ b/core/src/main/java/com/alibaba/nacos/core/remote/tls/RpcServerTlsConfig.java
@@ -22,8 +22,6 @@ import com.alibaba.nacos.core.utils.Loggers;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import com.alibaba.nacos.sys.utils.PropertiesUtil;
 
-import java.lang.reflect.InvocationTargetException;
-
 /**
  * Grpc config.
  *
@@ -41,11 +39,9 @@ public class RpcServerTlsConfig extends TlsConfig {
     
     public static synchronized RpcServerTlsConfig getInstance() {
         if (null == instance) {
-            try {
-                instance = PropertiesUtil
-                        .handleSpringBinder(EnvUtil.getEnvironment(), PREFIX, RpcServerTlsConfig.class);
-            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | ClassNotFoundException e) {
-                Loggers.REMOTE.warn("TLS config bind failed, use default value", e);
+            instance = PropertiesUtil.handleSpringBinder(EnvUtil.getEnvironment(), PREFIX, RpcServerTlsConfig.class);
+            if (instance == null) {
+                Loggers.REMOTE.debug("TLS configuration is empty, use default value");
                 instance = new RpcServerTlsConfig();
             }
         }
diff --git a/sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java b/sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java
index f6da571dc..7518104a9 100644
--- a/sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java
+++ b/sys/src/main/java/com/alibaba/nacos/sys/utils/PropertiesUtil.java
@@ -16,10 +16,10 @@
 
 package com.alibaba.nacos.sys.utils;
 
+import org.springframework.boot.context.properties.bind.Bindable;
+import org.springframework.boot.context.properties.bind.Binder;
 import org.springframework.core.env.Environment;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.Map;
 import java.util.Properties;
 
@@ -30,13 +30,11 @@ import java.util.Properties;
  */
 public class PropertiesUtil {
     
-    public static Properties getPropertiesWithPrefix(Environment environment, String prefix)
-            throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+    public static Properties getPropertiesWithPrefix(Environment environment, String prefix) {
         return handleSpringBinder(environment, prefix, Properties.class);
     }
     
-    public static Map<String, Object> getPropertiesWithPrefixForMap(Environment environment, String prefix)
-            throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+    public static Map<String, Object> getPropertiesWithPrefixForMap(Environment environment, String prefix) {
         return handleSpringBinder(environment, prefix, Map.class);
     }
     
@@ -49,16 +47,8 @@ public class PropertiesUtil {
      * @param <T>         target class
      * @return binder object
      */
-    @SuppressWarnings("unchecked")
-    public static <T> T handleSpringBinder(Environment environment, String prefix, Class<T> targetClass)
-            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
-        Class<?> binderClass = Class.forName("org.springframework.boot.context.properties.bind.Binder");
-        Method getMethod = binderClass.getDeclaredMethod("get", Environment.class);
-        Method bindMethod = binderClass.getDeclaredMethod("bind", String.class, Class.class);
-        Object binderObject = getMethod.invoke(null, environment);
+    public static <T> T handleSpringBinder(Environment environment, String prefix, Class<T> targetClass) {
         String prefixParam = prefix.endsWith(".") ? prefix.substring(0, prefix.length() - 1) : prefix;
-        Object bindResultObject = bindMethod.invoke(binderObject, prefixParam, targetClass);
-        Method resultGetMethod = bindResultObject.getClass().getDeclaredMethod("get");
-        return (T) resultGetMethod.invoke(bindResultObject);
+        return Binder.get(environment).bind(prefixParam, Bindable.of(targetClass)).orElse(null);
     }
 }
