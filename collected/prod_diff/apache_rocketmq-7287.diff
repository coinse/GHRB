diff --git a/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java b/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
index 315168316..acecc2863 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
@@ -127,7 +127,7 @@ public class BrokerStartup {
             try {
                 String[] addrArray = namesrvAddr.split(";");
                 for (String addr : addrArray) {
-                    NetworkUtil.string2SocketAddress(addr);
+                    NetworkUtil.validateNamesrvAddress(addr);
                 }
             } catch (Exception e) {
                 System.out.printf("The Name Server Address[%s] illegal, please set it as follows, " +
diff --git a/common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java b/common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
index 7dd83e617..94dc0e88a 100644
--- a/common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
+++ b/common/src/main/java/org/apache/rocketmq/common/utils/NetworkUtil.java
@@ -28,6 +28,9 @@ import java.nio.channels.Selector;
 import java.nio.channels.spi.SelectorProvider;
 import java.util.ArrayList;
 import java.util.Enumeration;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.commons.validator.routines.InetAddressValidator;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
@@ -153,6 +156,32 @@ public class NetworkUtil {
         return isa;
     }
 
+    public static void validateNamesrvAddress(final String addr) throws Exception {
+        int split = addr.lastIndexOf(":");
+        String host = addr.substring(0, split);
+        if (!isValidIPAddress(host)) {
+            throw new Exception("Invalid NameServer address:" + addr);
+        }
+    }
+
+    public static boolean isValidIPAddress(String ipAddress) {
+        InetAddressValidator validator = InetAddressValidator.getInstance();
+        if (validator.isValidInet4Address(ipAddress)) {
+            return true;
+        }
+        if (validator.isValidInet6Address(ipAddress)) {
+            return true;
+        }
+
+        return containsDigitOrLetter(ipAddress);
+    }
+
+    public static boolean containsDigitOrLetter(String input) {
+        Pattern pattern = Pattern.compile("^[a-zA-Z0-9]+$");
+        Matcher matcher = pattern.matcher(input);
+        return matcher.find();
+    }
+
     public static String socketAddress2String(final SocketAddress addr) {
         StringBuilder sb = new StringBuilder();
         InetSocketAddress inetSocketAddress = (InetSocketAddress) addr;
