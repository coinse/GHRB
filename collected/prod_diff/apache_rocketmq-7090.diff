diff --git a/broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java b/broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
index 21f20dde3..57b62edbb 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java
@@ -28,9 +28,11 @@ import java.util.concurrent.atomic.AtomicLong;
 
 import com.google.common.base.Strings;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.ConfigManager;
+import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.constant.LoggerName;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
@@ -100,6 +102,55 @@ public class ConsumerOffsetManager extends ConfigManager {
         }
     }
 
+    @Override
+    public boolean load() {
+        String lmqFilePath = this.configLmqFilePath();
+        String normalFilePath = this.configFilePath();
+        String targetFilePath = null;
+        try {
+            targetFilePath = MixAll.loadLatestFile(normalFilePath, lmqFilePath);
+            String jsonString = MixAll.file2String(targetFilePath);
+            if (null == jsonString || jsonString.length() == 0) {
+                return this.loadBak();
+            } else {
+                if (StringUtils.equals(normalFilePath, targetFilePath)) {
+                    this.decode(jsonString);
+                } else {
+                    this.decodeFromLmq(jsonString);
+                }
+                LOG.info("load " + targetFilePath + " success");
+                return true;
+            }
+        } catch (Exception e) {
+            LOG.error("load " + targetFilePath + " failed, and try to load backup file", e);
+            return this.loadBak();
+        }
+    }
+
+    @Override
+    protected boolean loadBak() {
+        String lmqBakFilePath = this.configLmqFilePath() + ".bak";
+        String normalBakFilePath = this.configFilePath() + ".bak";
+        String targetBakFilePath = null;
+        try {
+            targetBakFilePath = MixAll.loadLatestFile(normalBakFilePath, lmqBakFilePath);
+            String jsonString = MixAll.file2String(targetBakFilePath);
+            if (jsonString != null && jsonString.length() > 0) {
+                if (StringUtils.equals(normalBakFilePath, targetBakFilePath)) {
+                    this.decode(jsonString);
+                } else {
+                    this.decodeFromLmq(jsonString);
+                }
+                LOG.info("load " + targetBakFilePath + " OK");
+                return true;
+            }
+        } catch (Exception e) {
+            LOG.error("load " + targetBakFilePath + " Failed", e);
+            return false;
+        }
+        return true;
+    }
+
     public void scanUnsubscribedTopic() {
         Iterator<Entry<String, ConcurrentMap<Integer, Long>>> it = this.offsetTable.entrySet().iterator();
         while (it.hasNext()) {
@@ -290,6 +341,10 @@ public class ConsumerOffsetManager extends ConfigManager {
         return BrokerPathConfigHelper.getConsumerOffsetPath(this.brokerController.getMessageStoreConfig().getStorePathRootDir());
     }
 
+    private String configLmqFilePath() {
+        return BrokerPathConfigHelper.getLmqConsumerOffsetPath(brokerController.getMessageStoreConfig().getStorePathRootDir());
+    }
+
     @Override
     public void decode(String jsonString) {
         if (jsonString != null) {
@@ -301,6 +356,13 @@ public class ConsumerOffsetManager extends ConfigManager {
         }
     }
 
+    public void decodeFromLmq(String jsonString) {
+        LmqConsumerOffsetManager obj = RemotingSerializable.fromJson(jsonString, LmqConsumerOffsetManager.class);
+        if (obj != null) {
+            this.offsetTable = obj.offsetTable;
+        }
+    }
+
     @Override
     public String encode(final boolean prettyFormat) {
         return RemotingSerializable.toJson(this, prettyFormat);
diff --git a/broker/src/main/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManager.java b/broker/src/main/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManager.java
index ce70b1a82..2487e3208 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManager.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManager.java
@@ -20,12 +20,18 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.BrokerPathConfigHelper;
 import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.constant.LoggerName;
+import org.apache.rocketmq.logging.org.slf4j.Logger;
+import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
 
 public class LmqConsumerOffsetManager extends ConsumerOffsetManager {
+    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
+
     private ConcurrentHashMap<String, Long> lmqOffsetTable = new ConcurrentHashMap<>(512);
 
     public LmqConsumerOffsetManager() {
@@ -36,6 +42,60 @@ public class LmqConsumerOffsetManager extends ConsumerOffsetManager {
         super(brokerController);
     }
 
+    @Override
+    public boolean load() {
+        String lmqFilePath = this.configFilePath();
+        String normalFilePath = super.configFilePath();
+        String targetFilePath = null;
+        try {
+            targetFilePath = MixAll.loadLatestFile(normalFilePath, lmqFilePath);
+            String jsonString = MixAll.file2String(targetFilePath);
+            if (null == jsonString || jsonString.length() == 0) {
+                return this.loadBak();
+            } else {
+                if (StringUtils.equals(normalFilePath, targetFilePath)) {
+                    //should load the old lmq offset
+                    String lmqJsonString = MixAll.file2String(lmqFilePath);
+                    this.decode(lmqJsonString);
+                    this.decodeFromLmq(jsonString);
+                } else {
+                    this.decode(jsonString);
+                }
+                LOG.info("load " + targetFilePath + " success");
+                return true;
+            }
+        } catch (Exception e) {
+            LOG.error("load " + targetFilePath + " failed, and try to load backup file", e);
+            return this.loadBak();
+        }
+    }
+
+    @Override
+    public boolean loadBak() {
+        String lmqBakFilePath = this.configFilePath() + ".bak";
+        String normalBakFilePath = super.configFilePath() + ".bak";
+        String targetBakFilePath = null;
+        try {
+            targetBakFilePath = MixAll.loadLatestFile(normalBakFilePath, lmqBakFilePath);
+            String jsonString = MixAll.file2String(targetBakFilePath);
+            if (jsonString != null && jsonString.length() > 0) {
+                if (StringUtils.equals(normalBakFilePath, targetBakFilePath)) {
+                    String lmqJsonString = MixAll.file2String(lmqBakFilePath);
+                    this.decode(lmqJsonString);
+                    this.decodeFromLmq(jsonString);
+                } else {
+                    this.decode(jsonString);
+                }
+                LOG.info("load " + targetBakFilePath + " OK");
+                return true;
+            }
+        } catch (Exception e) {
+            LOG.error("load " + targetBakFilePath + " Failed", e);
+            return false;
+        }
+        return true;
+    }
+
     @Override
     public long queryOffset(final String group, final String topic, final int queueId) {
         if (!MixAll.isLmq(group)) {
diff --git a/common/src/main/java/org/apache/rocketmq/common/ConfigManager.java b/common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
index 6c3bed47c..4d34937bb 100644
--- a/common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
+++ b/common/src/main/java/org/apache/rocketmq/common/ConfigManager.java
@@ -48,7 +48,7 @@ public abstract class ConfigManager {
         }
     }
 
-    private boolean loadBak() {
+    protected boolean loadBak() {
         String fileName = null;
         try {
             fileName = this.configFilePath();
diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java
index c11eb377b..cce588099 100644
--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java
+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java
@@ -32,8 +32,11 @@ import java.net.SocketException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.FileSystems;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.nio.file.attribute.BasicFileAttributes;
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
@@ -520,4 +523,27 @@ public class MixAll {
         }
         return false;
     }
+
+    public static String loadLatestFile(String newConfigPath, String oldConfigPath) {
+        String targetConfigPath =
+            getFileModificationTime(newConfigPath) > getFileModificationTime(oldConfigPath)
+            ? newConfigPath
+            : oldConfigPath;
+        log.info("load target file path {}", targetConfigPath);
+        return targetConfigPath;
+    }
+
+    public static long getFileModificationTime(String filePath) {
+        Path path = FileSystems.getDefault().getPath(filePath);
+
+        try {
+            BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes.class);
+            long modificationTime = attributes.lastModifiedTime().toMillis();
+            log.info("{} modification time is {}", filePath, modificationTime);
+            return modificationTime;
+        } catch (IOException e) {
+            log.warn("get file modification time failed", e);
+        }
+        return -1;
+    }
 }
