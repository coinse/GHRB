diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
index c0553458c..971b74b86 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
@@ -70,67 +70,6 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name="AvoidNestedBlocks"/&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * public void foo() {
- *   int myInteger = 0;
- *   {                      // violation
- *     myInteger = 2;
- *   }
- *   System.out.println("myInteger = " + myInteger);
- *
- *   switch (a) {
- *     case 1:
- *       {                    // violation
- *         System.out.println("Case 1");
- *         break;
- *       }
- *     case 2:
- *       System.out.println("Case 2");     // OK
- *       break;
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check to allow nested blocks in switch case:
- * </p>
- * <pre>
- * &lt;module name=&quot;AvoidNestedBlocks&quot;&gt;
- *   &lt;property name=&quot;allowInSwitchCase&quot; value=&quot;true&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * public void foo() {
- *   int myInteger = 0;
- *   {                      // violation
- *     myInteger = 2;
- *   }
- *   System.out.println("myInteger = " + myInteger);
- *
- *   switch (a)
- *   {
- *     case 1:
- *       {                    // OK
- *         System.out.println("Case 1");
- *         break;
- *       }
- *     case 2:
- *       System.out.println("Case 2");     // OK
- *       break;
- *   }
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
index 86783615b..0695ac44d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
@@ -84,78 +84,6 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name="EmptyBlock"/&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * public class Test {
- *   private void emptyLoop() {
- *     for (int i = 0; i &lt; 10; i++) { // violation
- *     }
- *
- *     try { // violation
- *
- *     } catch (Exception e) {
- *       // ignored
- *     }
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check for the {@code text} policy and only {@code try} blocks:
- * </p>
- * <pre>
- * &lt;module name=&quot;EmptyBlock&quot;&gt;
- *   &lt;property name=&quot;option&quot; value=&quot;text&quot;/&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_TRY&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p> Example: </p>
- * <pre>
- * public class Test {
- *   private void emptyLoop() {
- *     for (int i = 0; i &lt; 10; i++) {
- *       // ignored
- *     }
- *
- *     // violation on next line
- *     try {
- *
- *     } catch (Exception e) {
- *       // ignored
- *     }
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check for default in switch block:
- * </p>
- * <pre>
- * &lt;module name=&quot;EmptyBlock&quot;&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_DEFAULT&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p> Example: </p>
- * <pre>
- * public class Test {
- *   private void test(int a) {
- *     switch (a) {
- *       case 1: someMethod();
- *       default: // OK, as there is no block
- *     }
- *     switch (a) {
- *       case 1: someMethod();
- *       default: {} // violation
- *     }
- *   }
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java
index 55c08d4db..075aade3e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java
@@ -53,164 +53,6 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name=&quot;EmptyCatchBlock&quot;/&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException expected) {
- * } // violation
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException ignore) {
- *   // no handling
- * } // ok, catch block has comment
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException o) {
- * } // violation
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException ex) {
- *   // This is expected
- * } // ok
- * </pre>
- * <p>
- * To configure the check to suppress empty catch block if exception's variable name is
- * {@code expected} or {@code ignore} or there's any comment inside:
- * </p>
- * <pre>
- * &lt;module name=&quot;EmptyCatchBlock&quot;&gt;
- *   &lt;property name=&quot;exceptionVariableName&quot; value=&quot;expected|ignore&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Such empty blocks would be both suppressed:
- * </p>
- * <pre>
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException expected) {
- * } // ok
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException ignore) {
- *   // no handling
- * } // ok
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException o) {
- * } // violation
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException ex) {
- *   // This is expected
- * } // ok
- * </pre>
- * <p>
- * To configure the check to suppress empty catch block if single-line comment inside
- * is &quot;//This is expected&quot;:
- * </p>
- * <pre>
- * &lt;module name=&quot;EmptyCatchBlock&quot;&gt;
- *   &lt;property name=&quot;commentFormat&quot; value=&quot;This is expected&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Such empty block would be suppressed:
- * </p>
- * <pre>
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException expected) {
- * } // violation
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException ignore) {
- *   // no handling
- * } // violation
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException o) {
- * } // violation
- *
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException ex) {
- *   // This is expected
- * } // ok
- * </pre>
- * <p>
- * To configure the check to suppress empty catch block if single-line comment inside
- * is &quot;//This is expected&quot; or exception's
- * variable name is &quot;myException&quot; (any option is matching):
- * </p>
- * <pre>
- * &lt;module name=&quot;EmptyCatchBlock&quot;&gt;
- *   &lt;property name=&quot;commentFormat&quot; value=&quot;This is expected&quot;/&gt;
- *   &lt;property name=&quot;exceptionVariableName&quot; value=&quot;myException&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Such empty blocks would be suppressed:
- * </p>
- * <pre>
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException e) {
- *   //This is expected
- * }
- * ...
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException e) {
- *   //   This is expected
- * }
- * ...
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException e) {
- *   // This is expected
- *   // some another comment
- * }
- * ...
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException e) {
- *   &#47;* This is expected *&#47;
- * }
- * ...
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException e) {
- *   &#47;*
- *   *
- *   * This is expected
- *   * some another comment
- *   *&#47;
- * }
- * ...
- * try {
- *   throw new RuntimeException();
- * } catch (RuntimeException myException) {
- *
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index b8b3baa23..c2a1ed803 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -100,109 +100,6 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name="LeftCurly"/&gt;
- * </pre>
- * <pre>
- * class Test
- * { // Violation - '{' should be on the previous line
- *   private interface TestInterface
- *   { // Violation - '{' should be on the previous line
- *   }
- *
- *   private
- *   class
- *   MyClass { // OK
- *   }
- *
- *   enum Colors {RED, // OK
- *     BLUE,
- *     GREEN;
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check to apply the {@code nl} policy to type blocks:
- * </p>
- * <pre>
- * &lt;module name=&quot;LeftCurly&quot;&gt;
- *   &lt;property name=&quot;option&quot; value=&quot;nl&quot;/&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;CLASS_DEF,INTERFACE_DEF&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <pre>
- * class Test
- * { // OK
- *   private interface TestInterface
- *   { // OK
- *   }
- *
- *   private
- *   class
- *   MyClass { // Violation - '{' should be on a new line
- *   }
- *
- *   enum Colors {RED, // OK
- *     BLUE,
- *     GREEN;
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check to apply the {@code nlow} policy to type blocks:
- * </p>
- * <pre>
- * &lt;module name=&quot;LeftCurly&quot;&gt;
- *   &lt;property name=&quot;option&quot; value=&quot;nlow&quot;/&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;CLASS_DEF,INTERFACE_DEF&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <pre>
- * class Test
- * { // Violation - '{' should be on the previous line
- *   private interface TestInterface { // OK
- *   }
- *
- *   private
- *   class
- *   MyClass { // Violation - '{' should be on a new line
- *   }
- *
- *   enum Colors {RED, // OK
- *     BLUE,
- *     GREEN;
- *   }
- * }
- * </pre>
- * <p>
- * An example of how to configure the check to validate enum definitions:
- * </p>
- * <pre>
- * &lt;module name=&quot;LeftCurly&quot;&gt;
- *   &lt;property name=&quot;ignoreEnums&quot; value=&quot;false&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <pre>
- * class Test
- * { // Violation - '{' should be on the previous line
- *   private interface TestInterface
- *   { // Violation - '{' should be on the previous line
- *   }
- *
- *   private
- *   class
- *   MyClass { // OK
- *   }
- *
- *   enum Colors {RED, // Violation - '{' should have line break after
- *   BLUE,
- *   GREEN;
- *   }
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 42a6d2c50..e90c2ff9a 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -61,193 +61,6 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name="NeedBraces"/&gt;
- * </pre>
- * <p>Example:</p>
- * <pre>
- * if (obj.isValid()) return true; // violation, single-line statements not allowed without braces
- * if (true) {                     // OK
- *     return true;
- * } else                          // violation, single-line statements not allowed without braces
- *     return false;
- * for (int i = 0; i &lt; 5; i++) {   // OK
- *      ++count;
- * }
- * do                              // violation, single-line statements not allowed without braces
- *     ++count;
- * while (false);
- * for (int j = 0; j &lt; 10; j++); // violation, empty loop body not allowed
- * for(int i = 0; i &lt; 10; value.incrementValue()); // violation, empty loop body not allowed
- * while (counter &lt; 10)          // violation, single-line statements not allowed without braces
- *     ++count;
- * while (value.incrementValue() &lt; 5); // violation, empty loop body not allowed
- * switch (num) {
- *   case 1: counter++; break;         // OK
- * }
- * </pre>
- * <p>
- * To configure the check for {@code if} and {@code else} blocks:
- * </p>
- * <pre>
- * &lt;module name=&quot;NeedBraces&quot;&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_IF, LITERAL_ELSE&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>Example:</p>
- * <pre>
- * if (obj.isValid()) return true; // violation, single-line statements not allowed without braces
- * if (true) {                     // OK
- *     return true;
- * } else                          // violation, single-line statements not allowed without braces
- *     return false;
- * for (int i = 0; i &lt; 5; i++) {   // OK
- *      ++count;
- * }
- * do                              // OK
- *     ++count;
- * while (false);
- * for (int j = 0; j &lt; 10; j++);   // OK
- * for(int i = 0; i &lt; 10; value.incrementValue()); // OK
- * while (counter &lt; 10)                            // OK
- *     ++count;
- * while (value.incrementValue() &lt; 5); // OK
- * switch (num) {
- *   case 1: counter++; break;         // OK
- * }
- * </pre>
- * <p>
- * To configure the check to allow single-line statements
- * ({@code if, while, do-while, for}) without braces:
- * </p>
- * <pre>
- * &lt;module name=&quot;NeedBraces&quot;&gt;
- *   &lt;property name=&quot;allowSingleLineStatement&quot; value=&quot;true&quot;/&gt;
- *   &lt;property name=&quot;tokens&quot;
- *          value=&quot;LITERAL_IF, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * if (obj.isValid()) return true;  // OK
- * if (true) {                      // OK
- *     return true;
- * } else                           // OK
- *     return false;
- * for (int i = 0; i &lt; 5; i++) {    // OK
- *     ++count;
- * }
- * do                               // OK
- *    ++count;
- * while (false);
- * for (int j = 0; j &lt; 10; j++);                   // violation, empty loop body not allowed
- * for(int i = 0; i &lt; 10; value.incrementValue()); // violation, empty loop body not allowed
- * while (counter &lt; 10)                 // OK
- *    ++count;
- * while (value.incrementValue() &lt; 5);  // violation, empty loop body not allowed
- * switch (num) {
- *   case 1: counter++; break;          // OK
- * }
- * while (obj.isValid()) return true;   // OK
- * do this.notify(); while (o != null); // OK
- * for (int i = 0; ; ) this.notify();   // OK
- * </pre>
- * <p>
- * To configure the check to allow {@code case, default} single-line statements without braces:
- * </p>
- * <pre>
- * &lt;module name=&quot;NeedBraces&quot;&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_CASE, LITERAL_DEFAULT&quot;/&gt;
- *   &lt;property name=&quot;allowSingleLineStatement&quot; value=&quot;true&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Next statements won't be violated by check:
- * </p>
- * <pre>
- * if (obj.isValid()) return true; // OK
- * if (true) {                     // OK
- *     return true;
- * } else                          // OK
- *     return false;
- * for (int i = 0; i &lt; 5; i++) {   // OK
- *      ++count;
- * }
- * do                              // OK
- *     ++count;
- * while (false);
- * for (int j = 0; j &lt; 10; j++);   // OK
- * for(int i = 0; i &lt; 10; value.incrementValue()); // OK
- * while (counter &lt; 10)                            // OK
- *    ++count;
- * while (value.incrementValue() &lt; 5); // OK
- * switch (num) {
- *   case 1: counter++; break;         // OK
- *   case 6: counter += 10; break;     // OK
- *   default: counter = 100; break;    // OK
- * }
- * </pre>
- * <p>
- * To configure the check to allow loops ({@code while, for}) with empty bodies:
- * </p>
- * <pre>
- * &lt;module name=&quot;NeedBraces&quot;&gt;
- *   &lt;property name=&quot;allowEmptyLoopBody&quot; value=&quot;true&quot;/&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_WHILE, LITERAL_FOR&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * if (obj.isValid()) return true; // OK
- * if (true) {                     // OK
- *     return true;
- * } else                          // OK
- *     return false;
- * for (int i = 0; i &lt; 5; i++) {   // OK
- *      ++count;
- * }
- * do                              // OK
- *     ++count;
- * while (false);
- * for (int j = 0; j &lt; 10; j++);   // OK
- * for(int i = 0; i &lt; 10; value.incrementValue()); // OK
- * while (counter &lt; 10)           // violation, single-line statements not allowed without braces
- *    ++count;
- * while (value.incrementValue() &lt; 5); // OK
- * switch (num) {
- * case 1: counter++; break;           // OK
- * }
- * </pre>
- * <p>
- * To configure the check to lambdas:
- * </p>
- * <pre>
- * &lt;module name=&quot;NeedBraces&quot;&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LAMBDA&quot;/&gt;
- *   &lt;property name=&quot;allowSingleLineStatement&quot; value=&quot;true&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Results in following:
- * </p>
- * <pre>
- * allowedFuture.addCallback(result -&gt; assertEquals("Invalid response",
- *   EnumSet.of(HttpMethod.GET, HttpMethod.OPTIONS), result), // violation, lambda spans 2 lines
- *   ex -&gt; fail(ex.getMessage())); // OK
- *
- * allowedFuture.addCallback(result -&gt; {
- *   return assertEquals("Invalid response",
- *     EnumSet.of(HttpMethod.GET, HttpMethod.OPTIONS), result);
- *   }, // OK
- *   ex -&gt; fail(ex.getMessage()));
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index 6d1eab620..3bcd5a819 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -66,223 +66,6 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name="RightCurly"/&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * public class Test {
- *
- *   public void test() {
- *
- *     if (foo) {
- *       bar();
- *     }           // violation, right curly must be in the same line as the 'else' keyword
- *     else {
- *       bar();
- *     }
- *
- *     if (foo) {
- *       bar();
- *     } else {     // OK
- *       bar();
- *     }
- *
- *     if (foo) { bar(); } int i = 0; // violation
- *                   // ^^^ statement is not allowed on same line after curly right brace
- *
- *     if (foo) { bar(); }            // OK
- *     int i = 0;
- *
- *     try {
- *       bar();
- *     }           // violation, rightCurly must be in the same line as 'catch' keyword
- *     catch (Exception e) {
- *       bar();
- *     }
- *
- *     try {
- *       bar();
- *     } catch (Exception e) { // OK
- *       bar();
- *     }
- *
- *   }                         // OK
- *
- *   public void testSingleLine() { bar(); } // OK, because singleline is allowed
- * }
- * </pre>
- * <p>
- * To configure the check with policy {@code alone} for {@code else} and
- * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
- * METHOD_DEF</a> tokens:
- * </p>
- * <pre>
- * &lt;module name=&quot;RightCurly&quot;&gt;
- *   &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;
- *   &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_ELSE, METHOD_DEF&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * public class Test {
- *
- *   public void test() {
- *
- *     if (foo) {
- *       bar();
- *     } else { bar(); }   // violation, right curly must be alone on line
- *
- *     if (foo) {
- *       bar();
- *     } else {
- *       bar();
- *     }                   // OK
- *
- *     try {
- *       bar();
- *     } catch (Exception e) { // OK because config is set to token METHOD_DEF and LITERAL_ELSE
- *       bar();
- *     }
- *
- *   }                         // OK
- *
- *   public void violate() { bar; } // violation, singleline is not allowed here
- *
- *   public void ok() {
- *     bar();
- *   }                              // OK
- * }
- * </pre>
- * <p>
- * To configure the check with policy {@code alone} for
- * <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">
- * Switch</a> Statements:
- * </p>
- * <pre>
- * &lt;module name=&quot;RightCurly&quot;&gt;
- *  &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;
- *  &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_SWITCH&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <pre>
- * class Test {
- *
- *     public void method0() {
- *         int mode = 0;
- *         switch (mode) {
- *             case 1:
- *                 int x = 1;
- *                 break;
- *             default:
- *                 x = 0;
- *         } // ok, RightCurly is alone
- *     }
- *
- *     public void method0() {
- *         int mode = 0;
- *         switch (mode) {
- *             case 1:
- *                 int x = 1;
- *                 break;
- *             default:
- *                 x = 0; } // violation, RightCurly should be alone on a line
- *     }
- *
- * }
- * </pre>
- * <p>
- * To configure the check with policy {@code alone_or_singleline} for {@code if} and
- * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
- * METHOD_DEF</a>
- * tokens:
- * </p>
- * <pre>
- * &lt;module name=&quot;RightCurly&quot;&gt;
- *  &lt;property name=&quot;option&quot; value=&quot;alone_or_singleline&quot;/&gt;
- *  &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_IF, METHOD_DEF&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * public class Test {
- *
- *   public void test() {
- *
- *     if (foo) {
- *       bar();
- *     } else {        // violation, right curly must be alone on line
- *       bar();
- *     }
- *
- *     if (foo) {
- *       bar();
- *     }               // OK
- *     else {
- *       bar();
- *     }
- *
- *     try {
- *       bar();
- *     } catch (Exception e) {        // OK because config did not set token LITERAL_TRY
- *       bar();
- *     }
- *
- *   }                                // OK
- *
- *   public void violate() { bar(); } // OK , because singleline
- * }
- * </pre>
- * <p>
- * To configure the check with policy {@code alone_or_singleline} for
- * <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">
- * Switch</a>
- * Statements:
- * </p>
- * <pre>
- * &lt;module name=&quot;RightCurly&quot;&gt;
- *  &lt;property name=&quot;option&quot; value=&quot;alone_or_singleline&quot;/&gt;
- *  &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_SWITCH&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <pre>
- * class Test {
- *
- *     public void method0() {
- *         int mode = 0;
- *         switch (mode) {
- *             case 1:
- *                 int x = 1;
- *                 break;
- *             default:
- *                 x = 0;
- *         } // ok
- *     }
- *
- *     public static void method7() {
- *         int mode = 0;
- *         int x;
- *         switch (mode) { case 1: x = 5; } // ok, RightCurly is on the same line as LeftCurly
- *     }
- *
- *     public void method() {
- *         int mode = 0;
- *         int x;
- *         switch (mode) {
- *             case 1:
- *                 x = 1; } // violation, right curly should be alone on line
- *         }
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
index 79dc6430f..17c96e13e 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
@@ -170,193 +170,6 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * </li>
  * </ul>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name=&quot;DesignForExtension&quot;/&gt;
- * </pre>
- * <p>Example:</p>
- * <pre>
- * public abstract class Foo {
- *   private int bar;
- *
- *   public int m1() {return 2;}  // Violation. No javadoc.
- *
- *   public int m2() {return 8;}  // Violation. No javadoc.
- *
- *   private void m3() {m4();}  // OK. Private method.
- *
- *   protected void m4() { }  // OK. No implementation.
- *
- *   public abstract void m5();  // OK. Abstract method.
- *
- *   &#47;**
- *    * This implementation ...
- *    &#64;return some int value.
- *    *&#47;
- *   public int m6() {return 1;}  // OK. Have javadoc on overridable method.
- *
- *   &#47;**
- *    * Some comments ...
- *    *&#47;
- *   public int m7() {return 1;}  // OK. Have javadoc on overridable method.
- *
- *   &#47;**
- *    * This
- *    * implementation ...
- *    *&#47;
- *   public int m8() {return 2;}  // OK. Have javadoc on overridable method.
- *
- *   &#64;Override
- *   public String toString() {  // Violation. No javadoc for @Override method.
- *     return "";
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check to allow methods which have @Override annotations
- * to be designed for extension.
- * </p>
- * <pre>
- * &lt;module name=&quot;DesignForExtension&quot;&gt;
- *   &lt;property name=&quot;ignoredAnnotations&quot; value=&quot;Override&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>Example:</p>
- * <pre>
- * public abstract class Foo {
- *   private int bar;
- *
- *   public int m1() {return 2;}  // Violation. No javadoc.
- *
- *   public int m2() {return 8;}  // Violation. No javadoc.
- *
- *   private void m3() {m4();}  // OK. Private method.
- *
- *   protected void m4() { }  // OK. No implementation.
- *
- *   public abstract void m5();  // OK. Abstract method.
- *
- *   &#47;**
- *    * This implementation ...
- *    &#64;return some int value.
- *    *&#47;
- *   public int m6() {return 1;}  // OK. Have javadoc on overridable method.
- *
- *   &#47;**
- *    * Some comments ...
- *    *&#47;
- *   public int m7() {return 1;}  // OK. Have javadoc on overridable method.
- *
- *   &#47;**
- *    * This
- *    * implementation ...
- *    *&#47;
- *   public int m8() {return 2;}  // OK. Have javadoc on overridable method.
- *
- *   &#64;Override
- *   public String toString() {  // OK. Have javadoc on overridable method.
- *     return "";
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check to allow methods which contain a specified comment text
- * pattern in their javadoc to be designed for extension.
- * </p>
- * <pre>
- * &lt;module name=&quot;DesignForExtension&quot;&gt;
- *   &lt;property name=&quot;requiredJavadocPhrase&quot; value=&quot;This implementation&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>Example:</p>
- * <pre>
- * public abstract class Foo {
- *   private int bar;
- *
- *   public int m1() {return 2;}  // Violation. No javadoc.
- *
- *   public int m2() {return 8;}  // Violation. No javadoc.
- *
- *   private void m3() {m4();}  // OK. Private method.
- *
- *   protected void m4() { }  // OK. No implementation.
- *
- *   public abstract void m5();  // OK. Abstract method.
- *
- *   &#47;**
- *    * This implementation ...
- *    &#64;return some int value.
- *    *&#47;
- *   public int m6() {return 1;}  // OK. Have required javadoc.
- *
- *   &#47;**
- *    * Some comments ...
- *    *&#47;
- *   public int m7() {return 1;}  // Violation. No required javadoc.
- *
- *   &#47;**
- *    * This
- *    * implementation ...
- *    *&#47;
- *   public int m8() {return 2;}  // Violation. No required javadoc.
- *
- *   &#64;Override
- *   public String toString() {  // Violation. No required javadoc.
- *     return "";
- *   }
- * }
- * </pre>
- * <p>
- * To configure the check to allow methods which contain a specified comment text
- * pattern in their javadoc which can span multiple lines
- * to be designed for extension.
- * </p>
- * <pre>
- * &lt;module name=&quot;DesignForExtension&quot;&gt;
- *   &lt;property name=&quot;requiredJavadocPhrase&quot;
- *     value=&quot;This[\s\S]*implementation&quot;/&gt;
- * &lt;/module&gt;
- * </pre>
- * <p>Example:</p>
- * <pre>
- * public abstract class Foo {
- *   private int bar;
- *
- *   public int m1() {return 2;}  // Violation. No javadoc.
- *
- *   public int m2() {return 8;}  // Violation. No javadoc.
- *
- *   private void m3() {m4();}
- *
- *   protected void m4() { }  // OK. No implementation.
- *
- *   public abstract void m5();  // OK. Abstract method.
- *
- *   &#47;**
- *    * This implementation ...
- *    &#64;return some int value.
- *    *&#47;
- *   public int m6() {return 1;}  // OK. Have required javadoc.
- *
- *   &#47;**
- *    * Some comments ...
- *    *&#47;
- *   public int m7() {return 1;}  // Violation. No required javadoc.
- *
- *   &#47;**
- *    * This
- *    * implementation ...
- *    *&#47;
- *   public int m8() {return 2;}  // OK. Have required javadoc.
- *
- *   &#64;Override
- *   public String toString() {  // Violation. No required javadoc.
- *     return "";
- *   }
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index b009be953..b31007c03 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -63,55 +63,6 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  *   </li>
  * </ol>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name=&quot;FinalClass&quot;/&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * final class MyClass {  // OK
- *   private MyClass() { }
- * }
- *
- * class MyClass { // violation, class should be declared final
- *   private MyClass() { }
- * }
- *
- * class MyClass { // OK, since it has a public constructor
- *   int field1;
- *   String field2;
- *   private MyClass(int value) {
- *     this.field1 = value;
- *     this.field2 = " ";
- *   }
- *   public MyClass(String value) {
- *     this.field2 = value;
- *     this.field1 = 0;
- *   }
- * }
- *
- * class TestAnonymousInnerClasses { // OK, class has an anonymous inner class.
- *     public static final TestAnonymousInnerClasses ONE = new TestAnonymousInnerClasses() {
- *
- *     };
- *
- *     private TestAnonymousInnerClasses() {
- *     }
- * }
- * class Class1 {
- *
- *     private class Class2 { // violation, class should be declared final
- *     }
- *
- *     public class Class3 { // ok
- *     }
- *
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
index def6a9371..0cc655d96 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
@@ -52,46 +52,6 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
  * }
  * </pre>
  * <p>
- * To configure the check:
- * </p>
- * <pre>
- * &lt;module name=&quot;HideUtilityClassConstructor&quot;/&gt;
- * </pre>
- * <p>
- * Example:
- * </p>
- * <pre>
- * class Test { // violation, class only has a static method and a constructor
- *
- *   public Test() {
- *   }
- *
- *   public static void fun() {
- *   }
- * }
- *
- * class Foo { // OK
- *
- *   private Foo() {
- *   }
- *
- *   static int n;
- * }
- *
- * class Bar { // OK
- *
- *   protected Bar() {
- *     // prevents calls from subclass
- *     throw new UnsupportedOperationException();
- *   }
- * }
- *
- * class UtilityClass { // violation, class only has a static field
- *
- *   static float f;
- * }
- * </pre>
- * <p>
  * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}
  * </p>
  * <p>
