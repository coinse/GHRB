diff --git a/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java b/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java
index a6a144f41..326df3b41 100644
--- a/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java
+++ b/assertj-core/src/main/java/org/assertj/core/api/AbstractStringAssert.java
@@ -14,14 +14,16 @@ package org.assertj.core.api;
 
 import static java.lang.String.format;
 import static java.util.Objects.requireNonNull;
-import static org.assertj.core.error.ShouldBeNumeric.shouldBeNumeric;
 import static org.assertj.core.error.ShouldBeNumeric.NumericType.BYTE;
 import static org.assertj.core.error.ShouldBeNumeric.NumericType.DOUBLE;
 import static org.assertj.core.error.ShouldBeNumeric.NumericType.FLOAT;
 import static org.assertj.core.error.ShouldBeNumeric.NumericType.INTEGER;
 import static org.assertj.core.error.ShouldBeNumeric.NumericType.LONG;
 import static org.assertj.core.error.ShouldBeNumeric.NumericType.SHORT;
+import static org.assertj.core.error.ShouldBeNumeric.shouldBeNumeric;
 
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.Base64;
 import java.util.Comparator;
 
@@ -459,6 +461,67 @@ public class AbstractStringAssert<SELF extends AbstractStringAssert<SELF>> exten
     }
   }
 
+  /**
+   * Encodes the actual value as byte array using the platform's default charset, the encoded byte array becoming the new value under test.
+   * <p>
+   * Examples:
+   * <pre><code class='java'> assertThat("abc").bytes().isEqualTo(new byte[] {'a', 'b', 'c'});
+   * assertThat("").bytes().isEqualTo(new byte[0]())); </code></pre>
+   *
+   * @throws AssertionError actual string is {@code null}.
+   * @return a new {@link AbstractByteArrayAssert} instance whose value under test is the result of the parse.
+   *
+   * @since 3.25.0
+   */
+  public AbstractByteArrayAssert<?> bytes() {
+    isNotNull();
+    return InstanceOfAssertFactories.BYTE_ARRAY.createAssert(actual.getBytes()).withAssertionState(myself);
+  }
+
+  /**
+   * Encodes the actual value as byte array using a specific {@link Charset}, the encoded byte array becoming the new value under test.
+   * <p>
+   * Examples:
+   * <pre><code class='java'> assertThat("abc").bytes(StandardCharsets.US_ASCII).isEqualTo("abc".getBytes(StandardCharsets.US_ASCII));
+   * assertThat("").bytes(StandardCharsets.US_ASCII).isEqualTo(new byte[0]())); </code></pre>
+   *
+   * @param charset the Charset to be used to encode the string.
+   * @throws NullPointerException if charset parameter is {@code null}.
+   * @throws AssertionError actual string is {@code null}.
+   * @return a new {@link AbstractByteArrayAssert} instance whose value under test is the result of the parse.
+   *
+   * @since 3.25.0
+   */
+  public AbstractByteArrayAssert<?> bytes(Charset charset) {
+    isNotNull();
+    byte[] bytes = actual.getBytes(requireNonNull(charset, "The charset must not be null"));
+    return InstanceOfAssertFactories.BYTE_ARRAY.createAssert(bytes).withAssertionState(myself);
+  }
+
+  /**
+   * Encodes the actual value as byte array using a specific {@link Charset}, the encoded byte array becoming the new value under test.
+   * <p>
+   * Examples:
+   * <pre><code class='java'> assertThat("abc").bytes(StandardCharsets.US_ASCII).isEqualTo("abc".getBytes(StandardCharsets.US_ASCII));
+   * assertThat("").bytes(StandardCharsets.US_ASCII).isEqualTo(new byte[0]())); </code></pre>
+   *
+   * @param charsetName the Charset to be used to encode the string.
+   * @throws NullPointerException if named charset parameter is {@code null}.
+   * @throws AssertionError if the actual string is {@code null} or if the named charset parameter is not supported.
+   * @return a new {@link AbstractByteArrayAssert} instance whose value under test is the result of the parse.
+   *
+   * @since 3.25.0
+   */
+  public AbstractByteArrayAssert<?> bytes(String charsetName) {
+    isNotNull();
+    try {
+      byte[] bytes = actual.getBytes(requireNonNull(charsetName, "The charsetName must not be null"));
+      return InstanceOfAssertFactories.BYTE_ARRAY.createAssert(bytes).withAssertionState(myself);
+    } catch (UnsupportedEncodingException e) {
+      throw failures.failure(String.format("%s is not a supported Charset", charsetName));
+    }
+  }
+
   /**
    * Parses the actual value as short, using radix 10, the parsed short becoming the new value under test.
    * <p>
