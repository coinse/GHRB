diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/CombinableX509TrustManager.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/CombinableX509TrustManager.java
index c2d3518..6e40557 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/CombinableX509TrustManager.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/CombinableX509TrustManager.java
@@ -17,6 +17,7 @@ package nl.altindag.ssl.trustmanager;
 
 import javax.net.ssl.X509ExtendedTrustManager;
 import javax.net.ssl.X509TrustManager;
+import java.security.InvalidAlgorithmParameterException;
 import java.security.cert.CertificateException;
 import java.util.ArrayList;
 import java.util.List;
@@ -41,6 +42,19 @@ interface CombinableX509TrustManager extends X509TrustManager {
                 return;
             } catch (CertificateException e) {
                 certificateExceptions.add(e);
+            } catch (RuntimeException e) {
+                Throwable cause = e.getCause();
+                if (cause instanceof InvalidAlgorithmParameterException) {
+                    // Handling of [InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty]
+                    //
+                    // This is most likely a result of using a TrustManager created from an empty KeyStore.
+                    // The exception will be thrown during the SSL Handshake. It is safe to suppress
+                    // and can be bundle with the other exceptions to proceed validating the counterparty with
+                    // the remaining TrustManagers.
+                    certificateExceptions.add(new CertificateException(cause));
+                } else {
+                    throw e;
+                }
             }
         }
 
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/InflatableX509ExtendedTrustManager.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/InflatableX509ExtendedTrustManager.java
index 18cb025..5801e38 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/InflatableX509ExtendedTrustManager.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/trustmanager/InflatableX509ExtendedTrustManager.java
@@ -84,7 +84,9 @@ public class InflatableX509ExtendedTrustManager extends HotSwappableX509Extended
             if (trustStorePath != null && StringUtils.isNotBlank(trustStoreType)) {
                 if (Files.exists(trustStorePath)) {
                     trustStore = KeyStoreUtils.loadKeyStore(trustStorePath, trustStorePassword, trustStoreType);
-                    setTrustManager(TrustManagerUtils.createTrustManager(trustStore));
+                    if (KeyStoreUtils.containsTrustMaterial(trustStore)) {
+                        setTrustManager(TrustManagerUtils.createTrustManager(trustStore));
+                    }
                 } else {
                     trustStore = KeyStoreUtils.createKeyStore(trustStoreType, trustStorePassword);
                 }
@@ -157,6 +159,10 @@ public class InflatableX509ExtendedTrustManager extends HotSwappableX509Extended
         writeLock.lock();
 
         try {
+            if (certificates == null || certificates.isEmpty()) {
+                return;
+            }
+
             for (Certificate certificate : certificates) {
                 String alias = CertificateUtils.generateAlias(certificate);
                 trustStore.setCertificateEntry(alias, certificate);
diff --git a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java
index 7472e6f..b6496d0 100644
--- a/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java
+++ b/sslcontext-kickstart/src/main/java/nl/altindag/ssl/util/TrustManagerUtils.java
@@ -242,6 +242,15 @@ public final class TrustManagerUtils {
         return new InflatableX509ExtendedTrustManager(trustStorePath, trustStorePassword, trustStoreType, certificateAndAuthTypeTrustPredicate);
     }
 
+    /**
+     * Adds a new to be trusted certificate to the existing TrustManager.
+     * The provided TrustManager should be an instance of {@link InflatableX509ExtendedTrustManager}
+     * and it is allowed that it is wrapped in a {@link CompositeX509ExtendedTrustManager}
+     */
+    public static void addCertificate(X509ExtendedTrustManager trustManager, X509Certificate certificate) {
+        addCertificate(trustManager, Collections.singletonList(certificate));
+    }
+
     /**
      * Adds a new to be trusted certificate to the existing TrustManager.
      * The provided TrustManager should be an instance of {@link InflatableX509ExtendedTrustManager}
