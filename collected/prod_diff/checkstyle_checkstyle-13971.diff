diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
index 05fcef688..7334ca57b 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
@@ -56,7 +56,9 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
  * exclude syntactical contexts like annotations or static initializers from the check.
  * Type is {@code java.lang.String[]}.
  * Validation type is {@code tokenTypesSet}.
- * Default value is {@code ANNOTATION}.
+ * Default value is
+ * <a href="https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION">
+ * ANNOTATION</a>.
  * </li>
  * <li>
  * Property {@code ignoreStringsRegexp} - Specify RegExp for ignored strings (with quotation marks).
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/site/PropertiesMacro.java b/src/main/java/com/puppycrawl/tools/checkstyle/site/PropertiesMacro.java
index 6072572c3..443243347 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/site/PropertiesMacro.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/site/PropertiesMacro.java
@@ -22,11 +22,13 @@ package com.puppycrawl.tools.checkstyle.site;
 import java.io.File;
 import java.lang.reflect.Field;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 import org.apache.maven.doxia.macro.AbstractMacro;
@@ -51,6 +53,30 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
 @Component(role = Macro.class, hint = "properties")
 public class PropertiesMacro extends AbstractMacro {
 
+    /**
+     * Constant value for cases when tokens set is empty.
+     */
+    public static final String EMPTY = "empty";
+
+    /** Set of properties not inherited from the base token configuration. */
+    public static final Set<String> NON_BASE_TOKEN_PROPERTIES = Collections.unmodifiableSet(
+            Arrays.stream(new String[] {
+                "AtclauseOrder - target",
+                "DescendantToken - limitedTokens",
+                "IllegalType - memberModifiers",
+                "MagicNumber - constantWaiverParentToken",
+                "MultipleStringLiterals - ignoreOccurrenceContext",
+            }).collect(Collectors.toSet()));
+
+    /** The precompiled pattern for a comma followed by a space. */
+    private static final Pattern COMMA_SPACE_PATTERN = Pattern.compile(", ");
+
+    /** The precompiled pattern for a Check. */
+    private static final Pattern CHECK_PATTERN = Pattern.compile("Check$");
+
+    /** The string '{}'. */
+    private static final String CURLY_BRACKET = "{}";
+
     /** Represents the relative path to the property types XML. */
     private static final String PROPERTY_TYPES_XML = "property_types.xml";
 
@@ -302,7 +328,7 @@ public class PropertiesMacro extends AbstractMacro {
                         .collect(Collectors.toList());
                 sink.text("subset of tokens");
 
-                writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_TOKEN_TYPES);
+                writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_TOKEN_TYPES, true);
             }
         }
         else if (SiteUtil.JAVADOC_TOKENS.equals(propertyName)) {
@@ -314,7 +340,7 @@ public class PropertiesMacro extends AbstractMacro {
                     .map(JavadocUtil::getTokenName)
                     .collect(Collectors.toList());
             sink.text("subset of javadoc tokens");
-            writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_JAVADOC_TOKEN_TYPES);
+            writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_JAVADOC_TOKEN_TYPES, true);
         }
         else {
             final String type = SiteUtil.getType(field, propertyName, currentModuleName, instance);
@@ -380,9 +406,11 @@ public class PropertiesMacro extends AbstractMacro {
      * @param sink sink to write to.
      * @param tokens the list of tokens to write.
      * @param tokenTypesLink the link to the token types file.
+     * @param printDotAtTheEnd defines if printing period symbols is required.
      * @throws MacroExecutionException if link to the tokenTypesLink file cannot be constructed.
      */
-    private static void writeTokensList(Sink sink, List<String> tokens, String tokenTypesLink)
+    private static void writeTokensList(Sink sink, List<String> tokens, String tokenTypesLink,
+                                        boolean printDotAtTheEnd)
             throws MacroExecutionException {
         for (int index = 0; index < tokens.size(); index++) {
             final String token = tokens.get(index);
@@ -394,14 +422,17 @@ public class PropertiesMacro extends AbstractMacro {
         }
         if (tokens.isEmpty()) {
             sink.rawText(CODE_START);
-            sink.text("empty");
+            sink.text(EMPTY);
             sink.rawText(CODE_END);
         }
-        else {
+        else if (printDotAtTheEnd) {
             sink.rawText(INDENT_LEVEL_18);
             sink.text(SiteUtil.DOT);
             sink.rawText(INDENT_LEVEL_14);
         }
+        else {
+            sink.rawText(INDENT_LEVEL_14);
+        }
     }
 
     /**
@@ -450,7 +481,7 @@ public class PropertiesMacro extends AbstractMacro {
                         .stream()
                         .map(TokenUtil::getTokenName)
                         .collect(Collectors.toList());
-                writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_TOKEN_TYPES);
+                writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_TOKEN_TYPES, true);
             }
         }
         else if (SiteUtil.JAVADOC_TOKENS.equals(propertyName)) {
@@ -461,14 +492,28 @@ public class PropertiesMacro extends AbstractMacro {
                     .stream()
                     .map(JavadocUtil::getTokenName)
                     .collect(Collectors.toList());
-            writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_JAVADOC_TOKEN_TYPES);
+            writeTokensList(sink, configurableTokens, SiteUtil.PATH_TO_JAVADOC_TOKEN_TYPES, true);
         }
         else {
             final String defaultValue = SiteUtil.getDefaultValue(
                     propertyName, field, instance, currentModuleName);
-            sink.rawText(CODE_START);
-            sink.text(defaultValue);
-            sink.rawText(CODE_END);
+
+            final String checkName = CHECK_PATTERN
+                    .matcher(instance.getClass().getSimpleName()).replaceAll("");
+
+            final boolean isSpecialTokenProp = NON_BASE_TOKEN_PROPERTIES.stream()
+                    .anyMatch(tokenProp -> tokenProp.equals(checkName + " - " + propertyName));
+
+            if (isSpecialTokenProp && !CURLY_BRACKET.equals(defaultValue)) {
+                final List<String> defaultValuesList =
+                        Arrays.asList(COMMA_SPACE_PATTERN.split(defaultValue));
+                writeTokensList(sink, defaultValuesList, SiteUtil.PATH_TO_TOKEN_TYPES, false);
+            }
+            else {
+                sink.rawText(CODE_START);
+                sink.text(defaultValue);
+                sink.rawText(CODE_END);
+            }
         }
 
         sink.tableCell_();
