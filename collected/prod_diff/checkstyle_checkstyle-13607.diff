diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheck.java
index a8b0dda54..1523da954 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheck.java
@@ -31,7 +31,6 @@ import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.AnnotationUtil;
-import com.puppycrawl.tools.checkstyle.utils.CheckUtil;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;
 
@@ -142,6 +141,18 @@ public class MissingJavadocMethodCheck extends AbstractCheck {
      */
     public static final String MSG_JAVADOC_MISSING = "javadoc.missing";
 
+    /** Maximum children allowed in setter/getter. */
+    private static final int SETTER_GETTER_MAX_CHILDREN = 7;
+
+    /** Pattern matching names of getter methods. */
+    private static final Pattern GETTER_PATTERN = Pattern.compile("^(is|get)[A-Z].*");
+
+    /** Pattern matching names of setter methods. */
+    private static final Pattern SETTER_PATTERN = Pattern.compile("^set[A-Z].*");
+
+    /** Maximum nodes allowed in a body of setter. */
+    private static final int SETTER_BODY_SIZE = 3;
+
     /** Default value of minimal amount of lines in method to allow no documentation.*/
     private static final int DEFAULT_MIN_LINE_COUNT = -1;
 
@@ -290,7 +301,7 @@ public class MissingJavadocMethodCheck extends AbstractCheck {
      */
     private boolean isMissingJavadocAllowed(final DetailAST ast) {
         return allowMissingPropertyJavadoc
-                && (CheckUtil.isSetterMethod(ast) || CheckUtil.isGetterMethod(ast))
+                && (isSetterMethod(ast) || isGetterMethod(ast))
             || matchesSkipRegex(ast)
             || isContentsAllowMissingJavadoc(ast);
     }
@@ -345,4 +356,76 @@ public class MissingJavadocMethodCheck extends AbstractCheck {
                 && surroundingScope.isIn(scope);
     }
 
+    /**
+     * Returns whether an AST represents a getter method.
+     *
+     * @param ast the AST to check with
+     * @return whether the AST represents a getter method
+     */
+    public static boolean isGetterMethod(final DetailAST ast) {
+        boolean getterMethod = false;
+
+        // Check have a method with exactly 7 children which are all that
+        // is allowed in a proper getter method which does not throw any
+        // exceptions.
+        if (ast.getType() == TokenTypes.METHOD_DEF
+                && ast.getChildCount() == SETTER_GETTER_MAX_CHILDREN) {
+            final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
+            final String name = type.getNextSibling().getText();
+            final boolean matchesGetterFormat = GETTER_PATTERN.matcher(name).matches();
+
+            final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
+            final boolean noParams = params.getChildCount(TokenTypes.PARAMETER_DEF) == 0;
+
+            if (matchesGetterFormat && noParams) {
+                // Now verify that the body consists of:
+                // SLIST -> RETURN
+                // RCURLY
+                final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
+
+                if (slist != null) {
+                    final DetailAST expr = slist.getFirstChild();
+                    getterMethod = expr.getType() == TokenTypes.LITERAL_RETURN;
+                }
+            }
+        }
+        return getterMethod;
+    }
+
+    /**
+     * Returns whether an AST represents a setter method.
+     *
+     * @param ast the AST to check with
+     * @return whether the AST represents a setter method
+     */
+    public static boolean isSetterMethod(final DetailAST ast) {
+        boolean setterMethod = false;
+
+        // Check have a method with exactly 7 children which are all that
+        // is allowed in a proper setter method which does not throw any
+        // exceptions.
+        if (ast.getType() == TokenTypes.METHOD_DEF
+                && ast.getChildCount() == SETTER_GETTER_MAX_CHILDREN) {
+            final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
+            final String name = type.getNextSibling().getText();
+            final boolean matchesSetterFormat = SETTER_PATTERN.matcher(name).matches();
+
+            final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
+            final boolean singleParam = params.getChildCount(TokenTypes.PARAMETER_DEF) == 1;
+
+            if (matchesSetterFormat && singleParam) {
+                // Now verify that the body consists of:
+                // SLIST -> EXPR -> ASSIGN
+                // SEMI
+                // RCURLY
+                final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
+
+                if (slist != null && slist.getChildCount() == SETTER_BODY_SIZE) {
+                    final DetailAST expr = slist.getFirstChild();
+                    setterMethod = expr.getFirstChild().getType() == TokenTypes.ASSIGN;
+                }
+            }
+        }
+        return setterMethod;
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java
index 3e706cd04..a45fff620 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java
@@ -54,21 +54,9 @@ public final class CheckUtil {
     /** Hex radix. */
     private static final int BASE_16 = 16;
 
-    /** Maximum children allowed in setter/getter. */
-    private static final int SETTER_GETTER_MAX_CHILDREN = 7;
-
-    /** Maximum nodes allowed in a body of setter. */
-    private static final int SETTER_BODY_SIZE = 3;
-
     /** Pattern matching underscore characters ('_'). */
     private static final Pattern UNDERSCORE_PATTERN = Pattern.compile("_");
 
-    /** Pattern matching names of setter methods. */
-    private static final Pattern SETTER_PATTERN = Pattern.compile("^set[A-Z].*");
-
-    /** Pattern matching names of getter methods. */
-    private static final Pattern GETTER_PATTERN = Pattern.compile("^(is|get)[A-Z].*");
-
     /** Compiled pattern for all system newlines. */
     private static final Pattern ALL_NEW_LINES = Pattern.compile("\\R");
 
@@ -280,79 +268,6 @@ public final class CheckUtil {
         return typeParams;
     }
 
-    /**
-     * Returns whether an AST represents a setter method.
-     *
-     * @param ast the AST to check with
-     * @return whether the AST represents a setter method
-     */
-    public static boolean isSetterMethod(final DetailAST ast) {
-        boolean setterMethod = false;
-
-        // Check have a method with exactly 7 children which are all that
-        // is allowed in a proper setter method which does not throw any
-        // exceptions.
-        if (ast.getType() == TokenTypes.METHOD_DEF
-                && ast.getChildCount() == SETTER_GETTER_MAX_CHILDREN) {
-            final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
-            final String name = type.getNextSibling().getText();
-            final boolean matchesSetterFormat = SETTER_PATTERN.matcher(name).matches();
-
-            final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
-            final boolean singleParam = params.getChildCount(TokenTypes.PARAMETER_DEF) == 1;
-
-            if (matchesSetterFormat && singleParam) {
-                // Now verify that the body consists of:
-                // SLIST -> EXPR -> ASSIGN
-                // SEMI
-                // RCURLY
-                final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
-
-                if (slist != null && slist.getChildCount() == SETTER_BODY_SIZE) {
-                    final DetailAST expr = slist.getFirstChild();
-                    setterMethod = expr.getFirstChild().getType() == TokenTypes.ASSIGN;
-                }
-            }
-        }
-        return setterMethod;
-    }
-
-    /**
-     * Returns whether an AST represents a getter method.
-     *
-     * @param ast the AST to check with
-     * @return whether the AST represents a getter method
-     */
-    public static boolean isGetterMethod(final DetailAST ast) {
-        boolean getterMethod = false;
-
-        // Check have a method with exactly 7 children which are all that
-        // is allowed in a proper getter method which does not throw any
-        // exceptions.
-        if (ast.getType() == TokenTypes.METHOD_DEF
-                && ast.getChildCount() == SETTER_GETTER_MAX_CHILDREN) {
-            final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
-            final String name = type.getNextSibling().getText();
-            final boolean matchesGetterFormat = GETTER_PATTERN.matcher(name).matches();
-
-            final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
-            final boolean noParams = params.getChildCount(TokenTypes.PARAMETER_DEF) == 0;
-
-            if (matchesGetterFormat && noParams) {
-                // Now verify that the body consists of:
-                // SLIST -> RETURN
-                // RCURLY
-                final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
-
-                if (slist != null) {
-                    final DetailAST expr = slist.getFirstChild();
-                    getterMethod = expr.getType() == TokenTypes.LITERAL_RETURN;
-                }
-            }
-        }
-        return getterMethod;
-    }
-
     /**
      * Checks whether a method is a not void one.
      *
