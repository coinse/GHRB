diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavaAstVisitor.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavaAstVisitor.java
index 9ef7c41ad..7e39fd4ca 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavaAstVisitor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavaAstVisitor.java
@@ -1235,7 +1235,7 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
     public DetailAstImpl visitEnhancedFor(JavaLanguageParser.EnhancedForContext ctx) {
         final DetailAstImpl leftParen = create(ctx.LPAREN());
         final DetailAstImpl enhancedForControl =
-                 visit(ctx.enhancedForControl());
+                 visit(ctx.getChild(1));
         final DetailAstImpl forEachClause = createImaginary(TokenTypes.FOR_EACH_CLAUSE);
         forEachClause.addChild(enhancedForControl);
         addLastSibling(leftParen, forEachClause);
@@ -1293,6 +1293,16 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
         return variableDef;
     }
 
+    @Override
+    public DetailAstImpl visitEnhancedForControlWithRecordPattern(
+            JavaLanguageParser.EnhancedForControlWithRecordPatternContext ctx) {
+        final DetailAstImpl recordPattern =
+                 visit(ctx.pattern());
+        addLastSibling(recordPattern, create(ctx.COLON()));
+        addLastSibling(recordPattern, visit(ctx.expression()));
+        return recordPattern;
+    }
+
     @Override
     public DetailAstImpl visitParExpression(JavaLanguageParser.ParExpressionContext ctx) {
         return flattenedTree(ctx);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
index 9eaac2f09..83742ba02 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
@@ -367,8 +367,14 @@ public final class ModifiedControlVariableCheck extends AbstractCheck {
      * @param paramDef a for-each clause variable
      */
     private void leaveForEach(DetailAST paramDef) {
-        final DetailAST paramName = paramDef.findFirstToken(TokenTypes.IDENT);
-        getCurrentVariables().push(paramName.getText());
+        // When using record decomposition in enhanced for loops,
+        // we are not able to declare a 'control variable'.
+        final boolean isRecordPattern = paramDef == null;
+
+        if (!isRecordPattern) {
+            final DetailAST paramName = paramDef.findFirstToken(TokenTypes.IDENT);
+            getCurrentVariables().push(paramName.getText());
+        }
     }
 
     /**
@@ -379,9 +385,10 @@ public final class ModifiedControlVariableCheck extends AbstractCheck {
     private void leaveForDef(DetailAST ast) {
         final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);
         if (forInitAST == null) {
-            if (!skipEnhancedForLoopVariable) {
+            final Deque<String> currentVariables = getCurrentVariables();
+            if (!skipEnhancedForLoopVariable && !currentVariables.isEmpty()) {
                 // this is for-each loop, just pop variables
-                getCurrentVariables().pop();
+                currentVariables.pop();
             }
         }
         else {
