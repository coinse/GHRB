diff --git a/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java b/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
index 315168316..dddba54a3 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java
@@ -21,11 +21,13 @@ import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.Properties;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.DefaultParser;
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.MQVersion;
@@ -108,6 +110,8 @@ public class BrokerStartup {
 
         if (properties != null) {
             properties2SystemEnv(properties);
+            // check properties have incorrect property name.
+            checkPropertiesForConfig(properties, brokerConfig, nettyServerConfig, nettyClientConfig, messageStoreConfig);
             MixAll.properties2Object(properties, brokerConfig);
             MixAll.properties2Object(properties, nettyServerConfig);
             MixAll.properties2Object(properties, nettyClientConfig);
@@ -213,6 +217,22 @@ public class BrokerStartup {
         return controller;
     }
 
+    /**
+     * check config file have incorrect property name.
+     * logging a warn message to remind user if file have incorrect property.
+     * @param properties
+     */
+    private static void checkPropertiesForConfig(Properties properties, Object... configs) {
+        Set<String> invalidProperties = MixAll.invalidProperties(properties, configs);
+        if (CollectionUtils.isEmpty(invalidProperties)) {
+            return;
+        }
+        Logger console = LoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);
+        console.warn("config file in [{}] contains invalid property name: {}",
+            BrokerPathConfigHelper.getBrokerConfigPath(),
+            invalidProperties);
+    }
+
     public static Runnable buildShutdownHook(BrokerController brokerController) {
         return new Runnable() {
             private volatile boolean hasShutdown = false;
diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java
index c11eb377b..6f6dc3c3c 100644
--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java
+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.common;
 
+import com.google.common.collect.Sets;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -36,6 +37,7 @@ import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Enumeration;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -520,4 +522,25 @@ public class MixAll {
         }
         return false;
     }
+
+    public static Set<String> invalidProperties(Properties properties, Object... objects) {
+        if (objects == null || objects.length == 0) {
+            return null;
+        }
+        Set<String> propertyNames = properties.stringPropertyNames();
+
+        Set<String> fieldNames = new HashSet<>();
+        for (Object obj : objects) {
+            Method[] methods = obj.getClass().getMethods();
+            for (Method method : methods) {
+                String mn = method.getName();
+                if (mn.startsWith("get")) {
+                    // get getter's field name and to camel name.
+                    fieldNames.add(mn.substring(3, 4).toLowerCase() +  mn.substring(4));
+                }
+            }
+        }
+
+        return Sets.difference(propertyNames, fieldNames);
+    }
 }
