diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 80aa1288..7671e87b 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -387,6 +387,7 @@ public final class Gson {
     this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);
     factories.add(jsonAdapterFactory);
     factories.add(TypeAdapters.ENUM_FACTORY);
+    factories.add(TypeAdapters.RAW_ENUM_FACTORY);
     factories.add(
         new ReflectiveTypeAdapterFactory(
             constructorConstructor,
diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
index fc6b1a27..ed85c248 100644
--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
@@ -145,11 +145,14 @@ public final class $Gson$Types {
       Type componentType = ((GenericArrayType) type).getGenericComponentType();
       return Array.newInstance(getRawType(componentType), 0).getClass();
 
-    } else if (type instanceof TypeVariable) {
-      // we could use the variable's bounds, but that won't work if there are multiple.
-      // having a raw type that's more general than necessary is okay
-      return Object.class;
-
+    } else if (type instanceof TypeVariable<?>) {
+      TypeVariable<?> typeVariable = (TypeVariable<?>) type;
+      // approximate the raw type with the bound of type type variable, if there are
+      // multiple bounds, all we can do is picking the first one
+      Type[] bounds = typeVariable.getBounds();
+      // Javadoc specifies some bound is always returned, Object if not specified
+      assert bounds.length > 0;
+      return getRawType(bounds[0]);
     } else if (type instanceof WildcardType) {
       Type[] bounds = ((WildcardType) type).getUpperBounds();
       // Currently the JLS only permits one bound for wildcards so using first bound is safe
diff --git a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
index 20d16062..dbc5fc47 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java
@@ -44,7 +44,7 @@ public final class ObjectTypeAdapter extends TypeAdapter<Object> {
   private final Gson gson;
   private final ToNumberStrategy toNumberStrategy;
 
-  private ObjectTypeAdapter(Gson gson, ToNumberStrategy toNumberStrategy) {
+  ObjectTypeAdapter(Gson gson, ToNumberStrategy toNumberStrategy) {
     this.gson = gson;
     this.toNumberStrategy = toNumberStrategy;
   }
diff --git a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
index 5d4bd1b5..c7308dd7 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
@@ -24,6 +24,7 @@ import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSyntaxException;
+import com.google.gson.ToNumberPolicy;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
 import com.google.gson.annotations.SerializedName;
@@ -1030,6 +1031,22 @@ public final class TypeAdapters {
         }
       };
 
+  public static final TypeAdapterFactory RAW_ENUM_FACTORY =
+      new TypeAdapterFactory() {
+        @Override
+        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+          Class<? super T> rawType = typeToken.getRawType();
+          if (rawType == Enum.class) {
+            @SuppressWarnings("unchecked")
+            TypeAdapter<T> adapter =
+                (TypeAdapter<T>) new ObjectTypeAdapter(gson, ToNumberPolicy.DOUBLE);
+            return adapter;
+          } else {
+            return null;
+          }
+        }
+      };
+
   public static <TT> TypeAdapterFactory newFactory(
       final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter) {
     return new TypeAdapterFactory() {
