diff --git a/assertj-core/src/test/java/org/assertj/core/api/Assertions_allOf_with_ThrowingConsumer_Test.java b/assertj-core/src/test/java/org/assertj/core/api/Assertions_allOf_with_ThrowingConsumer_Test.java
new file mode 100644
index 000000000..d883e5f4a
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/Assertions_allOf_with_ThrowingConsumer_Test.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import static org.assertj.core.api.Assertions.allOf;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.NullAndEmptySource;
+import org.junit.jupiter.params.provider.ValueSource;
+import org.opentest4j.MultipleFailuresError;
+
+class Assertions_allOf_with_ThrowingConsumer_Test {
+
+  @Test
+  void should_pass_if_all_consumers_pass() {
+    // GIVEN
+    ThrowingConsumer<String> underTest = allOf(e -> assertThat(e).isNotNull(),
+                                               e -> assertThat(e).isNotBlank());
+    // WHEN/THEN
+    underTest.accept("value");
+  }
+
+  @ParameterizedTest
+  @NullAndEmptySource
+  @ValueSource(strings = "value")
+  void should_fail_if_any_consumer_fails(String value) {
+    // GIVEN
+    ThrowingConsumer<String> underTest = allOf(e -> assertThat(e).isBlank(),
+                                               e -> assertThat(e).isNotBlank());
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> underTest.accept(value));
+    // THEN
+    then(assertionError).isInstanceOf(MultipleFailuresError.class);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/Assertions_anyOf_with_ThrowingConsumer_Test.java b/assertj-core/src/test/java/org/assertj/core/api/Assertions_anyOf_with_ThrowingConsumer_Test.java
new file mode 100644
index 000000000..589b7e108
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/Assertions_anyOf_with_ThrowingConsumer_Test.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import static org.assertj.core.api.Assertions.anyOf;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.NullAndEmptySource;
+import org.junit.jupiter.params.provider.ValueSource;
+import org.opentest4j.MultipleFailuresError;
+
+class Assertions_anyOf_with_ThrowingConsumer_Test {
+
+  @ParameterizedTest
+  @NullAndEmptySource
+  @ValueSource(strings = "value")
+  void should_pass_if_any_consumer_passes(String value) {
+    // GIVEN
+    ThrowingConsumer<String> underTest = anyOf(e -> assertThat(e).isBlank(),
+                                               e -> assertThat(e).isNotBlank());
+    // WHEN/THEN
+    underTest.accept(value);
+  }
+
+  @Test
+  void should_fail_if_all_consumers_fail() {
+    // GIVEN
+    ThrowingConsumer<String> underTest = anyOf(e -> assertThat(e).isNotNull(),
+                                               e -> assertThat(e).isNotBlank());
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> underTest.accept(null));
+    // THEN
+    then(assertionError).isInstanceOf(MultipleFailuresError.class);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/Assertions_sync_with_BDDAssertions_WithAssertions_and_soft_assertions_variants_Test.java b/assertj-core/src/test/java/org/assertj/core/api/Assertions_sync_with_BDDAssertions_WithAssertions_and_soft_assertions_variants_Test.java
index 2648f25b3..da7f1d1d6 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/Assertions_sync_with_BDDAssertions_WithAssertions_and_soft_assertions_variants_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/Assertions_sync_with_BDDAssertions_WithAssertions_and_soft_assertions_variants_Test.java
@@ -145,11 +145,15 @@ class Assertions_sync_with_BDDAssertions_WithAssertions_and_soft_assertions_vari
   }
 
   private static Set<Method> non_assertThat_methodsOf(Method[] declaredMethods) {
-    return stream(declaredMethods).filter(method -> !method.getName().startsWith("assert")).collect(toSet());
+    return stream(declaredMethods).filter(method -> !method.getName().startsWith("assert"))
+                                  .filter(method -> !method.isSynthetic())
+                                  .collect(toSet());
   }
 
   private static Set<Method> non_then_methodsOf(Method[] declaredMethods) {
-    return stream(declaredMethods).filter(method -> !method.getName().startsWith("then")).collect(toSet());
+    return stream(declaredMethods).filter(method -> !method.getName().startsWith("then"))
+                                  .filter(method -> !method.isSynthetic())
+                                  .collect(toSet());
   }
 
   private static Set<Method> removeMethods(Set<Method> methods, List<String> methodsToRemove) {
