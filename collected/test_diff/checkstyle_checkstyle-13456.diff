diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java
index 4a28f59f0..bf7ad2c20 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java
@@ -1807,4 +1807,79 @@ public class XdocsPagesTest {
                 .isFalse();
     }
 
+    @Test
+    public void testAllExampleMacrosHaveParagraphWithIdBeforeThem() throws Exception {
+        for (Path path : XdocUtil.getXdocsTemplatesFilePaths()) {
+            final String fileName = path.getFileName().toString();
+            final String input = Files.readString(path);
+            final Document document = XmlUtil.getRawXml(fileName, input, input);
+            final NodeList sources = document.getElementsByTagName("macro");
+
+            for (int position = 0; position < sources.getLength(); position++) {
+                final Node macro = sources.item(position);
+                final String macroName = macro.getAttributes()
+                        .getNamedItem("name").getTextContent();
+
+                if (!"example".equals(macroName)) {
+                    continue;
+                }
+
+                final Node precedingParagraph = getPrecedingParagraph(macro);
+                assertWithMessage(fileName
+                        + ": paragraph before example macro should have an id attribute")
+                        .that(precedingParagraph.hasAttributes())
+                        .isTrue();
+
+                final Node idAttribute = precedingParagraph.getAttributes().getNamedItem("id");
+                assertWithMessage(fileName
+                        + ": paragraph before example macro should have an id attribute")
+                        .that(idAttribute)
+                        .isNotNull();
+
+                validatePrecedingParagraphId(macro, fileName, idAttribute);
+            }
+        }
+    }
+
+    private static void validatePrecedingParagraphId(
+            Node macro, String fileName, Node idAttribute) {
+        String exampleName = "";
+        String exampleType = "";
+        final NodeList params = macro.getChildNodes();
+        for (int paramPosition = 0; paramPosition < params.getLength(); paramPosition++) {
+            final Node item = params.item(paramPosition);
+
+            if (!"param".equals(item.getNodeName())) {
+                continue;
+            }
+
+            final String paramName = item.getAttributes()
+                    .getNamedItem("name").getTextContent();
+            final String paramValue = item.getAttributes()
+                    .getNamedItem("value").getTextContent();
+            if ("path".equals(paramName)) {
+                exampleName = paramValue.substring(paramValue.lastIndexOf('/') + 1,
+                        paramValue.lastIndexOf('.'));
+            }
+            else if ("type".equals(paramName)) {
+                exampleType = paramValue;
+            }
+        }
+
+        final String id = idAttribute.getTextContent();
+        final String expectedId = String.format(Locale.ROOT, "%s-%s", exampleName,
+                exampleType);
+        assertWithMessage(fileName
+                + ": paragraph before example macro should have the expected id value")
+                .that(id)
+                .isEqualTo(expectedId);
+    }
+
+    private static Node getPrecedingParagraph(Node macro) {
+        Node precedingNode = macro.getPreviousSibling();
+        while (!"p".equals(precedingNode.getNodeName())) {
+            precedingNode = precedingNode.getPreviousSibling();
+        }
+        return precedingNode;
+    }
 }
