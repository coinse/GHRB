diff --git a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredIndexFileTest.java b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredIndexFileTest.java
index 7ef49578d..262d6645b 100644
--- a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredIndexFileTest.java
+++ b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/TieredIndexFileTest.java
@@ -19,9 +19,8 @@ package org.apache.rocketmq.tieredstore.file;
 import com.sun.jna.Platform;
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.time.Duration;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
-import org.apache.commons.lang3.SystemUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.tieredstore.TieredStoreTestUtil;
@@ -31,9 +30,7 @@ import org.apache.rocketmq.tieredstore.util.TieredStoreUtil;
 import org.awaitility.Awaitility;
 import org.junit.After;
 import org.junit.Assert;
-import org.junit.Assume;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class TieredIndexFileTest {
@@ -45,11 +42,12 @@ public class TieredIndexFileTest {
     @Before
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
+        storeConfig.setBrokerName("IndexFileBroker");
         storeConfig.setStorePathRootDir(storePath);
-        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.memory.MemoryFileSegment");
-        storeConfig.setTieredStoreIndexFileMaxHashSlotNum(2);
-        storeConfig.setTieredStoreIndexFileMaxIndexNum(3);
-        mq = new MessageQueue("TieredIndexFileTest", storeConfig.getBrokerName(), 1);
+        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.posix.PosixFileSegment");
+        storeConfig.setTieredStoreIndexFileMaxHashSlotNum(5);
+        storeConfig.setTieredStoreIndexFileMaxIndexNum(20);
+        mq = new MessageQueue("IndexFileTest", storeConfig.getBrokerName(), 1);
         TieredStoreUtil.getMetadataStore(storeConfig);
         TieredStoreExecutor.init();
     }
@@ -61,77 +59,33 @@ public class TieredIndexFileTest {
         TieredStoreExecutor.shutdown();
     }
 
-    @Ignore
     @Test
     public void testAppendAndQuery() throws IOException, ClassNotFoundException, NoSuchMethodException {
         if (Platform.isWindows()) {
             return;
         }
 
-        // skip this test on windows
-        Assume.assumeFalse(SystemUtils.IS_OS_WINDOWS);
-
         TieredFileAllocator fileQueueFactory = new TieredFileAllocator(storeConfig);
         TieredIndexFile indexFile = new TieredIndexFile(fileQueueFactory, storePath);
+
         indexFile.append(mq, 0, "key3", 3, 300, 1000);
         indexFile.append(mq, 0, "key2", 2, 200, 1100);
         indexFile.append(mq, 0, "key1", 1, 100, 1200);
 
-        Awaitility.waitAtMost(5, TimeUnit.SECONDS)
-            .until(() -> {
-                List<Pair<Long, ByteBuffer>> indexList = indexFile.queryAsync(mq.getTopic(), "key1", 1000, 1200).join();
-                if (indexList.size() != 1) {
-                    return false;
-                }
-
-                ByteBuffer indexBuffer = indexList.get(0).getValue();
-                Assert.assertEquals(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE * 2, indexBuffer.remaining());
-
-                Assert.assertEquals(1, indexBuffer.getLong(4 + 4 + 4));
-                Assert.assertEquals(100, indexBuffer.getInt(4 + 4 + 4 + 8));
-                Assert.assertEquals(200, indexBuffer.getInt(4 + 4 + 4 + 8 + 4));
-
-                Assert.assertEquals(3, indexBuffer.getLong(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE + 4 + 4 + 4));
-                Assert.assertEquals(300, indexBuffer.getInt(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE + 4 + 4 + 4 + 8));
-                Assert.assertEquals(0, indexBuffer.getInt(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE + 4 + 4 + 4 + 8 + 4));
-                return true;
-            });
-
-        indexFile.append(mq, 0, "key4", 4, 400, 1300);
-        indexFile.append(mq, 0, "key4", 4, 400, 1300);
-        indexFile.append(mq, 0, "key4", 4, 400, 1300);
-
-        Awaitility.waitAtMost(5, TimeUnit.SECONDS)
-            .until(() -> {
-                List<Pair<Long, ByteBuffer>> indexList = indexFile.queryAsync(mq.getTopic(), "key4", 1300, 1300).join();
-                if (indexList.size() != 1) {
-                    return false;
-                }
-
-                ByteBuffer indexBuffer = indexList.get(0).getValue();
-                Assert.assertEquals(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE * 3, indexBuffer.remaining());
-                Assert.assertEquals(4, indexBuffer.getLong(4 + 4 + 4));
-                Assert.assertEquals(400, indexBuffer.getInt(4 + 4 + 4 + 8));
-                Assert.assertEquals(0, indexBuffer.getInt(4 + 4 + 4 + 8 + 4));
-                return true;
-            });
-
-        List<Pair<Long, ByteBuffer>> indexList = indexFile.queryAsync(mq.getTopic(), "key1", 1300, 1300).join();
+        // do not do schedule task here
+        TieredStoreExecutor.shutdown();
+        List<Pair<Long, ByteBuffer>> indexList =
+            indexFile.queryAsync(mq.getTopic(), "key1", 1000, 1200).join();
         Assert.assertEquals(0, indexList.size());
 
-        indexList = indexFile.queryAsync(mq.getTopic(), "key4", 1200, 1300).join();
-        Assert.assertEquals(2, indexList.size());
-
-        ByteBuffer indexBuffer = indexList.get(0).getValue();
-        Assert.assertEquals(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE * 3, indexBuffer.remaining());
-        Assert.assertEquals(4, indexBuffer.getLong(4 + 4 + 4));
-        Assert.assertEquals(400, indexBuffer.getInt(4 + 4 + 4 + 8));
-        Assert.assertEquals(0, indexBuffer.getInt(4 + 4 + 4 + 8 + 4));
+        // do compaction once
+        TieredStoreExecutor.init();
+        storeConfig.setTieredStoreIndexFileRollingIdleInterval(0);
+        indexFile.doScheduleTask();
+        Awaitility.await().atMost(Duration.ofSeconds(10))
+            .until(() -> !indexFile.getPreMappedFile().getFile().exists());
 
-        indexBuffer = indexList.get(1).getValue();
-        Assert.assertEquals(TieredIndexFile.INDEX_FILE_HASH_COMPACT_INDEX_SIZE, indexBuffer.remaining());
-        Assert.assertEquals(2, indexBuffer.getLong(4 + 4 + 4));
-        Assert.assertEquals(200, indexBuffer.getInt(4 + 4 + 4 + 8));
-        Assert.assertEquals(100, indexBuffer.getInt(4 + 4 + 4 + 8 + 4));
+        indexList = indexFile.queryAsync(mq.getTopic(), "key1", 1000, 1200).join();
+        Assert.assertEquals(1, indexList.size());
     }
 }
