diff --git a/assertj-core/src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java b/assertj-core/src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java
index 5aa5315d6..a766fa9b4 100644
--- a/assertj-core/src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java
@@ -53,8 +53,8 @@ class UnambiguousRepresentation_Test {
     Object expected = new Object();
     given(representation.toStringOf(actual)).willReturn("representation");
     given(representation.toStringOf(expected)).willReturn("representation");
-    given(representation.unambiguousToStringOf(actual)).willReturn("actual");
-    given(representation.unambiguousToStringOf(expected)).willReturn("expected");
+    given(representation.unambiguousToStringOf(actual, false)).willReturn("actual");
+    given(representation.unambiguousToStringOf(expected, false)).willReturn("expected");
     // WHEN
     UnambiguousRepresentation actualRepresentation = new UnambiguousRepresentation(representation, actual, expected);
     // THEN
diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java b/assertj-core/src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java
index 198d112ac..285bf1992 100644
--- a/assertj-core/src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java
@@ -34,7 +34,7 @@ class CompositeRepresentation_Test extends AbstractBaseRepresentationTest {
     CompositeRepresentation compositeRepresentation = new CompositeRepresentation(representations);
     // WHEN
     String toString = compositeRepresentation.toStringOf("foo");
-    String unambiguousToString = compositeRepresentation.unambiguousToStringOf("foo");
+    String unambiguousToString = compositeRepresentation.unambiguousToStringOf("foo", false);
     // THEN
     then(toString).isEqualTo("3");
     then(unambiguousToString).isEqualTo("3");
@@ -48,7 +48,9 @@ class CompositeRepresentation_Test extends AbstractBaseRepresentationTest {
     Object longNumber = 123L;
     // THEN
     then(compositeRepresentation.toStringOf(longNumber)).isEqualTo(STANDARD_REPRESENTATION.toStringOf(longNumber));
-    then(compositeRepresentation.unambiguousToStringOf(longNumber)).isEqualTo(STANDARD_REPRESENTATION.unambiguousToStringOf(longNumber));
+    then(compositeRepresentation.unambiguousToStringOf(longNumber,
+                                                       false)).isEqualTo(STANDARD_REPRESENTATION.unambiguousToStringOf(longNumber,
+                                                                                                                       false));
   }
 
   @Test
@@ -86,7 +88,7 @@ class CompositeRepresentation_Test extends AbstractBaseRepresentationTest {
       }
 
       @Override
-      public String unambiguousToStringOf(Object object) {
+      public String unambiguousToStringOf(Object object, boolean shouldKeepPackage) {
         return "" + getPriority();
       }
 
diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java
index b8930650d..671a09714 100644
--- a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java
@@ -48,7 +48,7 @@ import org.assertj.core.util.StringTestComparator;
 import org.junit.jupiter.api.Test;
 
 /**
- * Tests for {@link StandardRepresentation#unambiguousToStringOf(Object)}.
+ * Tests for {@link Representation#unambiguousToStringOf(Object, boolean)}.
  *
  * @author Alexandre Dutra
  */
@@ -405,8 +405,40 @@ class StandardRepresentation_unambiguousToStringOf_Test extends AbstractBaseRepr
                      .hasMessageContaining(unambiguousToStringOf(ambiguous2));
   }
 
+  @Test
+  void should_get_unambiguous_representation_with_package() {
+    // GIVEN
+    Person person = new Person();
+    boolean shouldKeepPackageName = true;
+
+    // WHEN
+    String unambiguousRepresentation = STANDARD_REPRESENTATION.unambiguousToStringOf(person, shouldKeepPackageName);
+
+    // THEN
+    String unambiguousRepresentationWithoutHashCode = removeHashCode(unambiguousRepresentation);
+    assertThat(unambiguousRepresentationWithoutHashCode).isEqualTo("Person [name=null, age=0, account=0] (org.assertj.core.presentation.Person)");
+  }
+
+  @Test
+  void should_get_unambiguous_representation_without_package() {
+    // GIVEN
+    Person person = new Person();
+    boolean shouldKeepPackageName = false;
+
+    // WHEN
+    String unambiguousRepresentation = STANDARD_REPRESENTATION.unambiguousToStringOf(person, shouldKeepPackageName);
+
+    // THEN
+    String unambiguousRepresentationWithoutHashCode = removeHashCode(unambiguousRepresentation);
+    assertThat(unambiguousRepresentationWithoutHashCode).isEqualTo("Person [name=null, age=0, account=0] (Person)");
+  }
+
+  private String removeHashCode(String representation) {
+    return representation.replaceAll("(@\\w+)", "");
+  }
+
   private static String unambiguousToStringOf(Object o) {
-    return STANDARD_REPRESENTATION.unambiguousToStringOf(o);
+    return STANDARD_REPRESENTATION.unambiguousToStringOf(o, false);
   }
 
   private static class MyTestFile extends File {
diff --git a/assertj-core/src/test/java/org/assertj/core/util/introspection/ClassUtils_areSameClassInDifferentPackages_Test.java b/assertj-core/src/test/java/org/assertj/core/util/introspection/ClassUtils_areSameClassInDifferentPackages_Test.java
new file mode 100644
index 000000000..f54f5a088
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/util/introspection/ClassUtils_areSameClassInDifferentPackages_Test.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.util.introspection;
+
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class ClassUtils_areSameClassInDifferentPackages_Test {
+
+  @Test
+  void areClassesWithSameNameInDifferentPackages() {
+    // WHEN
+    boolean areSameClassInDifferentPackages = ClassUtils.areClassesWithSameNameInDifferentPackages(java.util.Date.class,
+                                                                                                   java.sql.Date.class);
+    // THEN
+    then(areSameClassInDifferentPackages).isTrue();
+  }
+
+  @Test
+  void areClassesWithSameNameInDifferentPackagesForSameClass() {
+    // WHEN
+    boolean areSameClassInDifferentPackages = ClassUtils.areClassesWithSameNameInDifferentPackages(java.util.Date.class,
+                                                                                                   java.util.Date.class);
+    // THEN
+    then(areSameClassInDifferentPackages).isFalse();
+  }
+
+  @Test
+  void areNotClassesWithSameNameInDifferentPackages() {
+    // WHEN
+    boolean areSameClassInDifferentPackages = ClassUtils.areClassesWithSameNameInDifferentPackages(java.util.Date.class,
+                                                                                                   java.text.DateFormat.class);
+    // THEN
+    then(areSameClassInDifferentPackages).isFalse();
+  }
+}
