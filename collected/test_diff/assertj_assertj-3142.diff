diff --git a/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThat_with_YearMonth_Test.java b/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThat_with_YearMonth_Test.java
new file mode 100644
index 000000000..4a77366b4
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThat_with_YearMonth_Test.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import java.time.YearMonth;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Tests for <code>{@link Assertions#assertThat(YearMonth)}</code>.
+ */
+class Assertions_assertThat_with_YearMonth_Test {
+
+  @Test
+  void should_create_Assert() {
+    AbstractYearMonthAssert<?> assertions = Assertions.assertThat(YearMonth.now());
+    assertThat(assertions).isNotNull();
+  }
+
+  @Test
+  void should_pass_actual() {
+    YearMonth yearMonth = YearMonth.now();
+    AbstractYearMonthAssert<?> assertions = Assertions.assertThat(yearMonth);
+    assertThat(assertions.getActual()).isSameAs(yearMonth);
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java b/assertj-core/src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java
index 417813cac..1fa8638c1 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java
@@ -97,6 +97,7 @@ import static org.assertj.core.api.InstanceOfAssertFactories.STRING_BUILDER;
 import static org.assertj.core.api.InstanceOfAssertFactories.THROWABLE;
 import static org.assertj.core.api.InstanceOfAssertFactories.URI_TYPE;
 import static org.assertj.core.api.InstanceOfAssertFactories.URL_TYPE;
+import static org.assertj.core.api.InstanceOfAssertFactories.YEAR_MONTH;
 import static org.assertj.core.api.InstanceOfAssertFactories.ZONED_DATE_TIME;
 import static org.assertj.core.api.InstanceOfAssertFactories.array;
 import static org.assertj.core.api.InstanceOfAssertFactories.atomicIntegerFieldUpdater;
@@ -140,6 +141,7 @@ import java.time.LocalTime;
 import java.time.OffsetDateTime;
 import java.time.OffsetTime;
 import java.time.Period;
+import java.time.YearMonth;
 import java.time.ZonedDateTime;
 import java.util.Collection;
 import java.util.Date;
@@ -761,6 +763,16 @@ class InstanceOfAssertFactoriesTest {
     result.isBeforeOrEqualTo(LocalDate.now());
   }
 
+  @Test
+  void year_month_factory_should_allow_year_month_assertions() {
+    // GIVEN
+    Object value = YearMonth.now();
+    // WHEN
+    AbstractYearMonthAssert<?> result = assertThat(value).asInstanceOf(YEAR_MONTH);
+    // THEN
+    result.isBeforeOrEqualTo(YearMonth.now());
+  }
+
   @Test
   void instant_factory_should_allow_instant_assertions() {
     // GIVEN
diff --git a/assertj-core/src/test/java/org/assertj/core/api/YearMonthAssertBaseTest.java b/assertj-core/src/test/java/org/assertj/core/api/YearMonthAssertBaseTest.java
new file mode 100644
index 000000000..ea7da1290
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/YearMonthAssertBaseTest.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import static org.mockito.Mockito.mock;
+
+import java.time.YearMonth;
+import org.assertj.core.internal.Comparables;
+
+public abstract class YearMonthAssertBaseTest extends BaseTestTemplate<YearMonthAssert, YearMonth> {
+
+  protected Comparables comparables;
+  protected YearMonth now = YearMonth.now();
+
+  @Override
+  protected void inject_internal_objects() {
+    super.inject_internal_objects();
+    comparables = mock(Comparables.class);
+    assertions.comparables = comparables;
+  }
+
+  @Override
+  protected YearMonthAssert create_assertions() {
+    return new YearMonthAssert(now);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssertBaseTest.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssertBaseTest.java
new file mode 100644
index 000000000..236d1fa7b
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssertBaseTest.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.AbstractYearMonthAssert;
+
+/**
+ * Base test class for {@link AbstractYearMonthAssert} tests.
+ */
+public class YearMonthAssertBaseTest {
+
+  public static final YearMonth BEFORE = YearMonth.now().minusMonths(1);
+  public static final YearMonth REFERENCE = YearMonth.now();
+  public static final YearMonth AFTER = YearMonth.now().plusMonths(1);
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasMonthValue_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasMonthValue_Test.java
new file mode 100644
index 000000000..c8b7f9277
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasMonthValue_Test.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldHaveDateField.shouldHaveDateField;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert hasMonthValue")
+class YearMonthAssert_hasMonthValue_Test {
+
+  @Test
+  void should_pass_if_actual_is_in_given_month() {
+    // GIVEN
+    YearMonth actual = YearMonth.of(2021, 2);
+    // WHEN/THEN
+    then(actual).hasMonthValue(2);
+  }
+
+  @Test
+  void should_fail_if_actual_is_not_in_given_month() {
+    // GIVEN
+    YearMonth actual = YearMonth.of(2022, 1);
+    int wrongMonth = 12;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasMonthValue(wrongMonth));
+    // THEN
+    then(assertionError).hasMessage(shouldHaveDateField(actual, "month", wrongMonth).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasMonthValue(5));
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasMonth_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasMonth_Test.java
new file mode 100644
index 000000000..12f5ee165
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasMonth_Test.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import java.time.Month;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldHaveDateField.shouldHaveMonth;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert hasMonth")
+class YearMonthAssert_hasMonth_Test {
+
+  @Test
+  void should_pass_if_actual_is_in_given_month() {
+    // GIVEN
+    YearMonth actual = YearMonth.of(2021, 2);
+    // WHEN/THEN
+    then(actual).hasMonth(Month.FEBRUARY);
+  }
+
+  @Test
+  void should_fail_if_actual_is_not_in_given_month() {
+    // GIVEN
+    YearMonth actual = YearMonth.of(2022, 1);
+    Month wrongMonth = Month.DECEMBER;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasMonth(wrongMonth));
+    // THEN
+    then(assertionError).hasMessage(shouldHaveMonth(actual, wrongMonth).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasMonth(YearMonth.now().getMonth()));
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasYear_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasYear_Test.java
new file mode 100644
index 000000000..88ea485cb
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_hasYear_Test.java
@@ -0,0 +1,57 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldHaveDateField.shouldHaveDateField;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert hasYear")
+class YearMonthAssert_hasYear_Test {
+
+  @Test
+  void should_pass_if_actual_is_in_given_year() {
+    // GIVEN
+    YearMonth actual = YearMonth.of(2022, 1);
+    // WHEN/THEN
+    then(actual).hasYear(2022);
+  }
+
+  @Test
+  void should_fail_if_actual_is_not_in_given_year() {
+    // GIVEN
+    YearMonth actual = YearMonth.of(2022, 1);
+    int expectedYear = 2021;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasYear(expectedYear));
+    // THEN
+    then(assertionError).hasMessage(shouldHaveDateField(actual, "year", expectedYear).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasYear(YearMonth.now().getYear()));
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isAfterOrEqualTo_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isAfterOrEqualTo_Test.java
new file mode 100644
index 000000000..1d2dcec42
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isAfterOrEqualTo_Test.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.error.ShouldBeAfterOrEqualTo.shouldBeAfterOrEqualTo;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isAfterOrEqualTo")
+class YearMonthAssert_isAfterOrEqualTo_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_after_year_month_parameter() {
+    assertThat(AFTER).isAfterOrEqualTo(REFERENCE);
+  }
+
+  @Test
+  void should_pass_if_actual_is_after_year_month_as_string_parameter() {
+    assertThat(AFTER).isAfterOrEqualTo(REFERENCE.toString());
+  }
+
+  @Test
+  void should_pass_if_actual_is_equal_to_year_month_parameter() {
+    assertThat(REFERENCE).isAfterOrEqualTo(REFERENCE);
+  }
+
+  @Test
+  void should_pass_if_actual_is_equal_to_year_month_as_string_parameter() {
+    assertThat(REFERENCE).isAfterOrEqualTo(REFERENCE.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_before_year_month_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(BEFORE).isAfterOrEqualTo(REFERENCE);
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeAfterOrEqualTo(BEFORE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_before_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(BEFORE).isAfterOrEqualTo(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeAfterOrEqualTo(BEFORE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth yearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(yearMonth).isAfterOrEqualTo(YearMonth.now());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(actualIsNull());
+  }
+
+  @Test
+  void should_fail_if_year_month_parameter_is_null() {
+    // GIVEN
+    YearMonth otherYearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isAfterOrEqualTo(otherYearMonth);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The YearMonth to compare actual with should not be null");
+  }
+
+  @Test
+  void should_fail_if_year_month_as_string_parameter_is_null() {
+    // GIVEN
+    String otherYearMonthAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isAfterOrEqualTo(otherYearMonthAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The String representing the YearMonth to compare actual with should not be null");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isAfter_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isAfter_Test.java
new file mode 100644
index 000000000..aed18adac
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isAfter_Test.java
@@ -0,0 +1,105 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import java.time.format.DateTimeParseException;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.assertj.core.error.ShouldBeAfter.shouldBeAfter;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isAfter")
+class YearMonthAssert_isAfter_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_after_year_month_parameter() {
+    assertThat(AFTER).isAfter(REFERENCE);
+  }
+
+  @Test
+  void should_pass_if_actual_is_after_year_month_as_string_parameter() {
+    assertThat(AFTER).isAfter(REFERENCE.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_equal_to_year_month_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isAfter(REFERENCE);
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeAfter(REFERENCE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_equal_to_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isAfter(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeAfter(REFERENCE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_before_year_month_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(BEFORE).isAfter(REFERENCE);
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeAfter(BEFORE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_before_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(BEFORE).isAfter(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeAfter(BEFORE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth yearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(yearMonth).isAfter(YearMonth.now());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(actualIsNull());
+  }
+
+  @Test
+  void should_fail_if_year_month_parameter_is_null() {
+    // GIVEN
+    YearMonth otherYearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isAfter(otherYearMonth);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The YearMonth to compare actual with should not be null");
+  }
+
+  @Test
+  void should_fail_if_year_month_as_string_parameter_is_null() {
+    // GIVEN
+    String otherYearMonthAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isAfter(otherYearMonthAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The String representing the YearMonth to compare actual with should not be null");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBeforeOrEqualTo_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBeforeOrEqualTo_Test.java
new file mode 100644
index 000000000..7093f809d
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBeforeOrEqualTo_Test.java
@@ -0,0 +1,97 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.error.ShouldBeBeforeOrEqualTo.shouldBeBeforeOrEqualTo;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isBeforeOrEqualTo")
+class YearMonthAssert_isBeforeOrEqualTo_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_before_year_month_parameter() {
+    assertThat(BEFORE).isBeforeOrEqualTo(REFERENCE);
+  }
+
+  @Test
+  void should_pass_if_actual_is_before_year_month_as_string_parameter() {
+    assertThat(BEFORE).isBeforeOrEqualTo(REFERENCE.toString());
+  }
+
+  @Test
+  void should_pass_if_actual_is_equal_to_year_month_parameter() {
+    assertThat(REFERENCE).isBeforeOrEqualTo(REFERENCE);
+  }
+
+  @Test
+  void should_pass_if_actual_is_equal_to_year_month_as_string_parameter() {
+    assertThat(REFERENCE).isBeforeOrEqualTo(REFERENCE.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_after_year_month_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(AFTER).isBeforeOrEqualTo(REFERENCE);
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeBeforeOrEqualTo(AFTER, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_after_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(AFTER).isBeforeOrEqualTo(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeBeforeOrEqualTo(AFTER, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth yearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(yearMonth).isBeforeOrEqualTo(YearMonth.now());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(actualIsNull());
+  }
+
+  @Test
+  void should_fail_if_year_month_parameter_is_null() {
+    // GIVEN
+    YearMonth otherYearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isBeforeOrEqualTo(otherYearMonth);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The YearMonth to compare actual with should not be null");
+  }
+
+  @Test
+  void should_fail_if_year_month_as_string_parameter_is_null() {
+    // GIVEN
+    String otherYearMonthAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isBeforeOrEqualTo(otherYearMonthAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The String representing the YearMonth to compare actual with should not be null");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBefore_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBefore_Test.java
new file mode 100644
index 000000000..4cc123b3a
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBefore_Test.java
@@ -0,0 +1,103 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.error.ShouldBeBefore.shouldBeBefore;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isBefore")
+class YearMonthAssert_isBefore_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_before_year_month_parameter() {
+    assertThat(BEFORE).isBefore(REFERENCE);
+  }
+
+  @Test
+  void should_pass_if_actual_is_before_year_month_as_string_parameter() {
+    assertThat(BEFORE).isBefore(REFERENCE.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_after_year_month_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(AFTER).isBefore(REFERENCE);
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeBefore(AFTER, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_after_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(AFTER).isBefore(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeBefore(AFTER, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_equal_to_year_month_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isBefore(REFERENCE);
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeBefore(REFERENCE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_equal_to_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isBefore(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeBefore(REFERENCE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth yearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(yearMonth).isBefore(YearMonth.now());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(actualIsNull());
+  }
+
+  @Test
+  void should_fail_if_year_month_parameter_is_null() {
+    // GIVEN
+    YearMonth otherYearMonth = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isBefore(otherYearMonth);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The YearMonth to compare actual with should not be null");
+  }
+
+  @Test
+  void should_fail_if_year_month_as_string_parameter_is_null() {
+    // GIVEN
+    String otherYearMonthAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isBefore(otherYearMonthAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The String representing the YearMonth to compare actual with should not be null");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBetween_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBetween_Test.java
new file mode 100644
index 000000000..be8dceebc
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBetween_Test.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.YearMonthAssert;
+import org.assertj.core.api.YearMonthAssertBaseTest;
+import org.junit.jupiter.api.DisplayName;
+
+import static org.mockito.Mockito.verify;
+
+@DisplayName("YearMonthAssert isBetween")
+class YearMonthAssert_isBetween_Test extends YearMonthAssertBaseTest {
+
+  private YearMonth before = now.minusMonths(1);
+  private YearMonth after = now.plusMonths(1);
+
+  @Override
+  protected YearMonthAssert invoke_api_method() {
+    return assertions.isBetween(before, after);
+  }
+
+  @Override
+  protected void verify_internal_effects() {
+    verify(comparables).assertIsBetween(getInfo(assertions), getActual(assertions), before, after, true, true);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBetween_with_String_parameters_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBetween_with_String_parameters_Test.java
new file mode 100644
index 000000000..4cb7c31ee
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isBetween_with_String_parameters_Test.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import java.time.format.DateTimeParseException;
+import org.assertj.core.api.YearMonthAssert;
+import org.assertj.core.api.YearMonthAssertBaseTest;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.mockito.Mockito.verify;
+
+@DisplayName("YearMonthAssert isBetweenWithStringParameters")
+class YearMonthAssert_isBetween_with_String_parameters_Test extends YearMonthAssertBaseTest {
+
+  private YearMonth before = now.minusMonths(1);
+  private YearMonth after = now.plusMonths(1);
+
+  @Override
+  protected YearMonthAssert invoke_api_method() {
+    return assertions.isBetween(before.toString(), after.toString());
+  }
+
+  @Override
+  protected void verify_internal_effects() {
+    verify(comparables).assertIsBetween(getInfo(assertions), getActual(assertions), before, after, true, true);
+  }
+
+  @Test
+  void should_throw_a_DateTimeParseException_if_start_String_parameter_cannot_be_converted() {
+    // GIVEN
+    String abc = "abc";
+    // WHEN
+    Throwable thrown = catchThrowable(() -> assertions.isBetween(abc, after.toString()));
+    // THEN
+    assertThat(thrown).isInstanceOf(DateTimeParseException.class);
+  }
+
+  @Test
+  void should_throw_a_DateTimeParseException_if_end_String_parameter_cannot_be_converted() {
+    // GIVEN
+    String abc = "abc";
+    // WHEN
+    Throwable thrown = catchThrowable(() -> assertions.isBetween(before.toString(), abc));
+    // THEN
+    assertThat(thrown).isInstanceOf(DateTimeParseException.class);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isEqualTo_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isEqualTo_Test.java
new file mode 100644
index 000000000..68373bbf9
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isEqualTo_Test.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.test.ErrorMessagesForTest.shouldBeEqualMessage;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+
+/**
+ * Only test String based assertion (tests with {@link YearMonth} are already defined in assertj-core)
+ */
+@DisplayName("YearMonthAssert isEqualTo")
+class YearMonthAssert_isEqualTo_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_equal_to_year_month_as_string_parameter() {
+    assertThat(REFERENCE).isEqualTo(REFERENCE.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_not_equal_to_year_month_as_string_parameter() {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(AFTER).isEqualTo(REFERENCE.toString()));
+    // THEN
+    then(assertionError).hasMessage(shouldBeEqualMessage(AFTER + " (java.time.YearMonth)", REFERENCE + " (java.time.YearMonth)"));
+  }
+
+  @Test
+  void should_fail_if_year_month_as_string_parameter_is_null() {
+    // GIVEN
+    String otherYearMonthAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isEqualTo(otherYearMonthAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The String representing the YearMonth to compare actual with should not be null");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isInTheFuture_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isInTheFuture_Test.java
new file mode 100644
index 000000000..2f5eb9001
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isInTheFuture_Test.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeInTheFuture.shouldBeInTheFuture;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isInTheFuture")
+class YearMonthAssert_isInTheFuture_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_in_the_future() {
+    assertThat(AFTER).isInTheFuture();
+  }
+
+  @Test
+  void should_fail_if_actual_is_today() {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(REFERENCE).isInTheFuture());
+    // THEN
+    then(assertionError).hasMessage(shouldBeInTheFuture(REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_in_the_past() {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(BEFORE).isInTheFuture());
+    // THEN
+    then(assertionError).hasMessage(shouldBeInTheFuture(BEFORE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isInTheFuture());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isInThePast_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isInThePast_Test.java
new file mode 100644
index 000000000..5499bbc70
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isInThePast_Test.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeInThePast.shouldBeInThePast;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isInThePast")
+class YearMonthAssert_isInThePast_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_in_the_past() {
+    assertThat(BEFORE).isInThePast();
+  }
+
+  @Test
+  void should_fail_if_actual_is_today() {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(REFERENCE).isInThePast());
+    // THEN
+    then(assertionError).hasMessage(shouldBeInThePast(REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_in_the_future() {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(AFTER).isInThePast());
+    // THEN
+    then(assertionError).hasMessage(shouldBeInThePast(AFTER).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isInThePast());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isIn_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isIn_Test.java
new file mode 100644
index 000000000..0e87ae33c
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isIn_Test.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.error.ShouldBeIn.shouldBeIn;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+
+/**
+ * Only test String based assertion (tests with {@link YearMonth} are already defined in assertj-core)
+ */
+@DisplayName("YearMonthAssert isIn")
+class YearMonthAssert_isIn_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_in_dates_as_string_array_parameter() {
+    assertThat(REFERENCE).isIn(REFERENCE.toString(), AFTER.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_not_in_dates_as_string_array_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isIn(AFTER.toString(), BEFORE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeIn(REFERENCE, asList(AFTER, BEFORE)).create());
+  }
+
+  @Test
+  void should_fail_if_dates_as_string_array_parameter_is_null() {
+    // GIVEN
+    String[] otherYearMonthsAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isIn(otherYearMonthsAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The given YearMonth array should not be null");
+  }
+
+  @Test
+  void should_fail_if_dates_as_string_array_parameter_is_empty() {
+    // GIVEN
+    String[] otherYearMonthsAsString = new String[0];
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isIn(otherYearMonthsAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The given YearMonth array should not be empty");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isNotEqualTo_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isNotEqualTo_Test.java
new file mode 100644
index 000000000..73601b5bf
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isNotEqualTo_Test.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.error.ShouldNotBeEqual.shouldNotBeEqual;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+
+/**
+ * Only test String based assertion (tests with {@link YearMonth} are already defined in assertj-core)
+ */
+@DisplayName("YearMonthAssert isNotEqualTo")
+class YearMonthAssert_isNotEqualTo_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_not_equal_to_year_month_as_string_parameter() {
+    assertThat(REFERENCE).isNotEqualTo(AFTER.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_equal_to_year_month_as_string_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isNotEqualTo(REFERENCE.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldNotBeEqual(REFERENCE, REFERENCE).create());
+  }
+
+  @Test
+  void should_fail_if_year_month_as_string_parameter_is_null() {
+    // GIVEN
+    String otherYearMonthAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isNotEqualTo(otherYearMonthAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The String representing the YearMonth to compare actual with should not be null");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isNotIn_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isNotIn_Test.java
new file mode 100644
index 000000000..008403777
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isNotIn_Test.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.assertj.core.error.ShouldNotBeIn.shouldNotBeIn;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+
+/**
+ * Only test String based assertion (tests with {@link YearMonth} are already defined in assertj-core)
+ */
+@DisplayName("YearMonthAssert isNotIn")
+class YearMonthAssert_isNotIn_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_not_in_dates_as_string_array_parameter() {
+    assertThat(REFERENCE).isNotIn(AFTER.toString(), BEFORE.toString());
+  }
+
+  @Test
+  void should_fail_if_actual_is_in_dates_as_string_array_parameter() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(REFERENCE).isNotIn(REFERENCE.toString(), AFTER.toString());
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldNotBeIn(REFERENCE, asList(REFERENCE, AFTER)).create());
+  }
+
+  @Test
+  void should_fail_if_dates_as_string_array_parameter_is_null() {
+    // GIVEN
+    String[] otherYearMonthsAsString = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isNotIn(otherYearMonthsAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The given YearMonth array should not be null");
+  }
+
+  @Test
+  void should_fail_if_dates_as_string_array_parameter_is_empty() {
+    // GIVEN
+    String[] otherYearMonthsAsString = new String[0];
+    // WHEN
+    ThrowingCallable code = () -> assertThat(YearMonth.now()).isNotIn(otherYearMonthsAsString);
+    // THEN
+    assertThatIllegalArgumentException().isThrownBy(code)
+                                        .withMessage("The given YearMonth array should not be empty");
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isStrictlyBetween_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isStrictlyBetween_Test.java
new file mode 100644
index 000000000..9b3111355
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isStrictlyBetween_Test.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.YearMonthAssert;
+import org.assertj.core.api.YearMonthAssertBaseTest;
+import org.junit.jupiter.api.DisplayName;
+
+import static org.mockito.Mockito.verify;
+
+@DisplayName("YearMonthAssert isStrictlyBetween")
+class YearMonthAssert_isStrictlyBetween_Test extends YearMonthAssertBaseTest {
+
+  private YearMonth before = now.minusMonths(1);
+  private YearMonth after = now.plusMonths(1);
+
+  @Override
+  protected YearMonthAssert invoke_api_method() {
+    return assertions.isStrictlyBetween(before, after);
+  }
+
+  @Override
+  protected void verify_internal_effects() {
+    verify(comparables).assertIsBetween(getInfo(assertions), getActual(assertions), before, after, false, false);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isStrictlyBetween_with_String_parameters_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isStrictlyBetween_with_String_parameters_Test.java
new file mode 100644
index 000000000..7e635a476
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isStrictlyBetween_with_String_parameters_Test.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import java.time.format.DateTimeParseException;
+import org.assertj.core.api.YearMonthAssert;
+import org.assertj.core.api.YearMonthAssert;
+import org.assertj.core.api.YearMonthAssertBaseTest;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.mockito.Mockito.verify;
+
+@DisplayName("YearMonthAssert isStrictlyBetweenWithStringParameters")
+class YearMonthAssert_isStrictlyBetween_with_String_parameters_Test extends YearMonthAssertBaseTest {
+
+  private final YearMonth before = now.minusMonths(1);
+  private YearMonth after = now.plusMonths(1);
+
+  @Override
+  protected YearMonthAssert invoke_api_method() {
+    return assertions.isStrictlyBetween(before.toString(), after.toString());
+  }
+
+  @Override
+  protected void verify_internal_effects() {
+    verify(comparables).assertIsBetween(getInfo(assertions), getActual(assertions), before, after, false, false);
+  }
+
+  @Test
+  void should_throw_a_DateTimeParseException_if_start_String_parameter_cannot_be_converted() {
+    // GIVEN
+    String abc = "abc";
+    // WHEN
+    Throwable thrown = catchThrowable(() -> assertions.isStrictlyBetween(abc, after.toString()));
+    // THEN
+    assertThat(thrown).isInstanceOf(DateTimeParseException.class);
+  }
+
+  @Test
+  void should_throw_a_DateTimeParseException_if_end_String_parameter_cannot_be_converted() {
+    // GIVEN
+    String abc = "abc";
+    // WHEN
+    Throwable thrown = catchThrowable(() -> assertions.isStrictlyBetween(before.toString(), abc));
+    // THEN
+    assertThat(thrown).isInstanceOf(DateTimeParseException.class);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isToday_Test.java b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isToday_Test.java
new file mode 100644
index 000000000..1a7283c13
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/yearmonth/YearMonthAssert_isToday_Test.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.yearmonth;
+
+import java.time.YearMonth;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.error.ShouldBeCurrentYearMonth.shouldBeCurrentYearMonth;
+import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+@DisplayName("YearMonthAssert isCurrentYearMonth")
+class YearMonthAssert_isCurrentYearMonth_Test extends YearMonthAssertBaseTest {
+
+  @Test
+  void should_pass_if_actual_is_current_year_month() {
+    assertThat(REFERENCE).isCurrentYearMonth();
+  }
+
+  @Test
+  void should_fail_if_actual_is_before_current_year_month() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(BEFORE).isCurrentYearMonth();
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeCurrentYearMonth(BEFORE).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_after_current_year_month() {
+    // WHEN
+    ThrowingCallable code = () -> assertThat(AFTER).isCurrentYearMonth();
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(shouldBeCurrentYearMonth(AFTER).create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    YearMonth actual = null;
+    // WHEN
+    ThrowingCallable code = () -> assertThat(actual).isCurrentYearMonth();
+    // THEN
+    assertThatAssertionErrorIsThrownBy(code).withMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_Test.java b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_Test.java
index 4c492f258..34505450b 100644
--- a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_Test.java
@@ -34,6 +34,7 @@ import java.time.Duration;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.time.OffsetDateTime;
+import java.time.YearMonth;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.util.ArrayList;
@@ -246,6 +247,16 @@ class StandardRepresentation_toStringOf_Test extends AbstractBaseRepresentationT
     then(localDateRepresentation).isEqualTo("2011-06-18 (java.time.LocalDate)");
   }
 
+  @Test
+  void should_return_unambiguous_toString_of_YearMonth() {
+    // GIVEN use Object to call toStringOf(Object) and not toStringOf(YearMonth)
+    Object yearMonth = YearMonth.of(2011, 6);
+    // WHEN
+    String localDateRepresentation = STANDARD_REPRESENTATION.toStringOf(yearMonth);
+    // THEN
+    then(localDateRepresentation).isEqualTo("2011-06 (java.time.YearMonth)");
+  }
+
   @Test
   void should_return_unambiguous_toString_of_LocalDateTime() {
     // GIVEN use Object to call toStringOf(Object) and not toStringOf(LocalDateTime)
