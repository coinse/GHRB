diff --git a/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThatThrownBy_Test.java b/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThatThrownBy_Test.java
index e7d713dc2..5c804c00d 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThatThrownBy_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/Assertions_assertThatThrownBy_Test.java
@@ -14,9 +14,8 @@ package org.assertj.core.api;
 
 import static java.lang.String.format;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.assertj.core.api.Assertions_catchThrowableOfType_Test.raisingException;
-import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
 import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldHaveMessage.shouldHaveMessage;
 import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
 
 import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
@@ -25,47 +24,63 @@ import org.junit.jupiter.api.Test;
 class Assertions_assertThatThrownBy_Test {
 
   @Test
-  void should_build_ThrowableAssert_with_runtime_exception_thrown() {
+  void should_work_with_runtime_exception_thrown() {
+    // WHEN/THEN
     assertThatThrownBy(codeThrowing(new IllegalArgumentException("boom"))).isInstanceOf(IllegalArgumentException.class)
                                                                           .hasMessage("boom");
   }
 
   @Test
-  void should_build_ThrowableAssert_with_throwable_thrown() {
+  void should_work_with_throwable_thrown() {
+    // WHEN/THEN
     assertThatThrownBy(codeThrowing(new Throwable("boom"))).isInstanceOf(Throwable.class)
                                                            .hasMessage("boom");
   }
 
   @Test
-  void should_be_able_to_pass_a_description_to_assertThatThrownBy() {
+  void should_work_with_method_reference_having_vararg_parameter() {
+    // WHEN/THEN
+    assertThatThrownBy(Assertions_assertThatThrownBy_Test::methodThrowing).isInstanceOf(Exception.class)
+                                                                          .hasMessage("boom");
+  }
+
+  @Test
+  void should_support_description() {
     // GIVEN
-    // make assertThatThrownBy fail to verify the description afterwards
-    ThrowingCallable code = () -> assertThatThrownBy(raisingException("boom"), "Test %s", "code").hasMessage("bam");
+    Throwable throwable = new Exception("boom");
     // WHEN
-    AssertionError assertionError = expectAssertionError(code);
+    AssertionError assertionError = expectAssertionError(() -> assertThatThrownBy(codeThrowing(throwable), "Test %s",
+                                                                                  "code").hasMessage("bam"));
     // THEN
     then(assertionError).hasMessageContaining("[Test code]");
   }
 
   @Test
   void should_fail_if_no_throwable_was_thrown() {
-    // GIVEN
-    ThrowingCallable code = () -> {};
     // WHEN
-    AssertionError assertionError = expectAssertionError(() -> assertThatThrownBy(code).hasMessage("boom ?"));
+    AssertionError assertionError = expectAssertionError(() -> assertThatThrownBy(() -> {}).hasMessage("boom ?"));
     // THEN
     then(assertionError).hasMessage(format("%nExpecting code to raise a throwable."));
   }
 
   @Test
-  void should_fail_with_good_message_when_assertion_is_failing() {
+  void should_fail_with_proper_message_when_assertion_is_failing() {
+    // GIVEN
+    Throwable throwable = new Exception("boom");
     // WHEN
-    AssertionError assertionError = expectAssertionError(() -> assertThatThrownBy(raisingException("boom")).hasMessage("bam"));
+    AssertionError assertionError = expectAssertionError(() -> assertThatThrownBy(codeThrowing(throwable)).hasMessage("bam"));
     // THEN
-    then(assertionError).hasMessageContainingAll("Expecting message to be:",
-                                                 "\"bam\"",
-                                                 "but was:",
-                                                 "\"boom\"");
+    then(assertionError).hasMessage(shouldHaveMessage(throwable, "bam").create());
+  }
+
+  private static ThrowingCallable codeThrowing(Throwable t) {
+    return () -> {
+      throw t;
+    };
+  }
+
+  private static void methodThrowing(Object... parameters) throws Exception {
+    throw new Exception("boom");
   }
 
 }
diff --git a/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_from_ThrowingCallable_Test.java b/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_from_ThrowingCallable_Test.java
index 30456928f..c6a1d8e6b 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_from_ThrowingCallable_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_from_ThrowingCallable_Test.java
@@ -12,10 +12,8 @@
  */
 package org.assertj.core.api.throwable;
 
-import static java.lang.String.format;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
 
 import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
 import org.junit.jupiter.api.Test;
@@ -52,14 +50,7 @@ class ThrowableAssert_built_from_ThrowingCallable_Test {
           // no exception
         }
       });
-    }).withMessage(format("%nExpecting code to raise a throwable."));
+    }).withMessage(String.format("%nExpecting code to raise a throwable."));
   }
 
-  @Test
-  void should_fail_and_show_value_returned_by_callable_code() {
-    // GIVEN
-    ThrowingCallable code = () -> assertThatThrownBy(() -> 42);
-    // WHEN/THEN
-    assertThatAssertionErrorIsThrownBy(code).withMessage("Expecting code to raise a throwable, but it returned [42] instead");
-  }
 }
diff --git a/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_with_then_method_Test.java b/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_with_then_method_Test.java
index e52334a7f..b19958ef2 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_with_then_method_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/throwable/ThrowableAssert_built_with_then_method_Test.java
@@ -14,11 +14,11 @@ package org.assertj.core.api.throwable;
 
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.BDDAssertions.thenThrownBy;
-import static org.assertj.core.util.AssertionsUtil.assertThatAssertionErrorIsThrownBy;
 
 import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
 import org.junit.jupiter.api.Test;
 
+// TODO build two throwable assert with then and assertThat and compare them.
 class ThrowableAssert_built_with_then_method_Test {
 
   @Test
@@ -54,11 +54,4 @@ class ThrowableAssert_built_with_then_method_Test {
     }).withMessage(String.format("%nExpecting code to raise a throwable."));
   }
 
-  @Test
-  void should_fail_if_value_is_returned_by_callable_code() {
-    // GIVEN
-    ThrowingCallable code = () -> thenThrownBy(() -> 42);
-    // WHEN/THEN
-    assertThatAssertionErrorIsThrownBy(code).withMessage("Expecting code to raise a throwable, but it returned [42] instead");
-  }
 }
