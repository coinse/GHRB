diff --git a/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java b/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java
index 0f04dafd6..a434b6d7d 100644
--- a/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java
+++ b/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/JValidatorTest.java
@@ -17,17 +17,24 @@
 package org.apache.dubbo.validation.support.jvalidation;
 
 import org.apache.dubbo.common.URL;
+import org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget;
 import org.apache.dubbo.validation.support.jvalidation.mock.ValidationParameter;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
+import javax.validation.ConstraintViolationException;
 import javax.validation.ValidationException;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.is;
+
 class JValidatorTest {
     @Test
     void testItWithNonExistMethod() {
@@ -72,7 +79,7 @@ class JValidatorTest {
     void testItWithCollectionArg() throws Exception {
         URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
         JValidator jValidator = new JValidator(url);
-        jValidator.validate("someMethod4", new Class<?>[]{List.class}, new Object[]{Arrays.asList("parameter")});
+        jValidator.validate("someMethod4", new Class<?>[]{List.class}, new Object[]{Collections.singletonList("parameter")});
     }
 
     @Test
@@ -83,4 +90,83 @@ class JValidatorTest {
         map.put("key", "value");
         jValidator.validate("someMethod5", new Class<?>[]{Map.class}, new Object[]{map});
     }
-}
\ No newline at end of file
+
+    @Test
+    void testItWithPrimitiveArg() {
+        Assertions.assertThrows(ValidationException.class, () -> {
+            URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
+            JValidator jValidator = new JValidator(url);
+            jValidator.validate("someMethod6", new Class<?>[]{Integer.class, String.class, Long.class}, new Object[]{null, null, null});
+        });
+    }
+
+    @Test
+    void testItWithPrimitiveArgWithProvidedMessage() {
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
+        JValidator jValidator = new JValidator(url);
+        try {
+            jValidator.validate("someMethod6", new Class<?>[]{Integer.class, String.class, Long.class}, new Object[]{null, "", null});
+            Assertions.fail();
+        } catch (Exception e) {
+            assertThat(e.getMessage(), containsString("string must not be blank"));
+            assertThat(e.getMessage(), containsString("longValue must not be null"));
+        }
+    }
+
+    @Test
+    void testItWithPartialParameterValidation() {
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
+        JValidator jValidator = new JValidator(url);
+        try {
+            jValidator.validate("someMethod6", new Class<?>[]{Integer.class, String.class, Long.class}, new Object[]{null, "", null});
+            Assertions.fail();
+        } catch (Exception e) {
+            assertThat(e, instanceOf(ConstraintViolationException.class));
+            ConstraintViolationException e1 = (ConstraintViolationException) e;
+            assertThat(e1.getConstraintViolations().size(), is(2));
+        }
+    }
+
+    @Test
+    void testItWithNestedParameterValidationWithNullParam() {
+        Assertions.assertThrows(ValidationException.class, () -> {
+            URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
+            JValidator jValidator = new JValidator(url);
+            jValidator.validate("someMethod7", new Class<?>[]{JValidatorTestTarget.BaseParam.class}, new Object[]{null});
+        });
+    }
+
+    @Test
+    void testItWithNestedParameterValidationWithNullNestedParam() {
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
+        JValidator jValidator = new JValidator(url);
+        try {
+            JValidatorTestTarget.BaseParam<JValidatorTestTarget.Param> param = new JValidatorTestTarget.BaseParam<>();
+            jValidator.validate("someMethod7", new Class<?>[]{JValidatorTestTarget.BaseParam.class}, new Object[]{param});
+            Assertions.fail();
+        } catch (Exception e) {
+            assertThat(e, instanceOf(ConstraintViolationException.class));
+            ConstraintViolationException e1 = (ConstraintViolationException) e;
+            assertThat(e1.getConstraintViolations().size(), is(1));
+            assertThat(e1.getMessage(), containsString("body must not be null"));
+        }
+    }
+
+    @Test
+    void testItWithNestedParameterValidationWithNullNestedParams() {
+        URL url = URL.valueOf("test://test:11/org.apache.dubbo.validation.support.jvalidation.mock.JValidatorTestTarget");
+        JValidator jValidator = new JValidator(url);
+        try {
+            JValidatorTestTarget.BaseParam<JValidatorTestTarget.Param> param = new JValidatorTestTarget.BaseParam<>();
+            param.setBody(new JValidatorTestTarget.Param());
+            jValidator.validate("someMethod7", new Class<?>[]{JValidatorTestTarget.BaseParam.class}, new Object[]{param});
+            Assertions.fail();
+        } catch (Exception e) {
+            assertThat(e, instanceOf(ConstraintViolationException.class));
+            ConstraintViolationException e1 = (ConstraintViolationException) e;
+            assertThat(e1.getConstraintViolations().size(), is(1));
+            assertThat(e1.getMessage(), containsString("name must not be null"));
+        }
+    }
+
+}
diff --git a/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/mock/JValidatorTestTarget.java b/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/mock/JValidatorTestTarget.java
index f65eb0573..9cf5dec6f 100644
--- a/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/mock/JValidatorTestTarget.java
+++ b/dubbo-filter/dubbo-filter-validation/src/test/java/org/apache/dubbo/validation/support/jvalidation/mock/JValidatorTestTarget.java
@@ -18,6 +18,9 @@ package org.apache.dubbo.validation.support.jvalidation.mock;
 
 import org.apache.dubbo.validation.MethodValidated;
 
+import org.hibernate.validator.constraints.NotBlank;
+
+import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import java.util.List;
 import java.util.Map;
@@ -35,7 +38,42 @@ public interface JValidatorTestTarget {
 
     void someMethod5(Map<String, String> map);
 
+    void someMethod6(Integer intValue,
+                     @NotBlank(message = "string must not be blank") String string,
+                     @NotNull(message = "longValue must not be null") Long longValue);
+
+    void someMethod7(@NotNull BaseParam<Param> baseParam);
+
     @interface Test2 {
     }
 
+    class BaseParam<T> {
+
+        @Valid
+        @NotNull(message = "body must not be null")
+        private T body;
+
+        public T getBody() {
+            return body;
+        }
+
+        public void setBody(T body) {
+            this.body = body;
+        }
+    }
+
+    class Param {
+
+        @NotNull(message = "name must not be null")
+        private String name;
+
+        public String getName() {
+            return name;
+        }
+
+        public void setName(String name) {
+            this.name = name;
+        }
+    }
+
 }
