diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
index 3359e5094..8572e43f8 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
@@ -29,7 +29,6 @@ import java.util.List;
 import org.junit.jupiter.api.Test;
 
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
-import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 
 public class RegexpCheckTest extends AbstractModuleTestSupport {
@@ -64,13 +63,17 @@ public class RegexpCheckTest extends AbstractModuleTestSupport {
 
     @Test
     public void testRequiredFail() throws Exception {
-        final DefaultConfiguration checkConfig =
-            createModuleConfig(RegexpCheck.class);
-        checkConfig.addProperty("format", "This\\stext is not in the file");
         final String[] expected = {
-            "0: " + getCheckMessage(MSG_REQUIRED_REGEXP, "This\\stext is not in the file"),
+            "1: " + getCheckMessage(MSG_REQUIRED_REGEXP, "This\\stext is not in the file"),
         };
-        verify(checkConfig, getPath("InputRegexpSemantic2.java"), expected);
+        verifyWithInlineConfigParser(getPath("InputRegexpSemantic2.java"), expected);
+    }
+
+    @Test
+    public void testDefault() throws Exception {
+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
+        verifyWithInlineConfigParser(
+                getPath("InputRegexpCheckDefault.java"), expected);
     }
 
     @Test
@@ -273,23 +276,17 @@ public class RegexpCheckTest extends AbstractModuleTestSupport {
 
     @Test
     public void testOnFileStartingWithEmptyLine() throws Exception {
-        final DefaultConfiguration checkConfig = createModuleConfig(RegexpCheck.class);
         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
-        verify(checkConfig, getPath("InputRegexpStartingWithEmptyLine.java"), expected);
+        verifyWithInlineConfigParser(getPath("InputRegexpStartingWithEmptyLine.java"), expected);
     }
 
     @Test
     public void testIgnoreCommentsCppStyleWithIllegalPatternFalse() throws Exception {
         // See if the comment is removed properly
-        final DefaultConfiguration checkConfig =
-                createModuleConfig(RegexpCheck.class);
-        checkConfig.addProperty("format", "don't use trailing comments");
-        checkConfig.addProperty("illegalPattern", "false");
-        checkConfig.addProperty("ignoreComments", "true");
         final String[] expected = {
-            "0: " + getCheckMessage(MSG_REQUIRED_REGEXP, "don't use trailing comments"),
+            "1: " + getCheckMessage(MSG_REQUIRED_REGEXP, "don't use trailing comments"),
         };
-        verify(checkConfig, getPath("InputRegexpTrailingComment11.java"), expected);
+        verifyWithInlineConfigParser(getPath("InputRegexpTrailingComment11.java"), expected);
     }
 
     @Test
